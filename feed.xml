<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>92Hz</title>
  <icon>https://www.gravatar.com/avatar/8b7f06e12e9f3c555a0587f51748ac7f</icon>
  <subtitle>To Be A Lean Developer!</subtitle>
  <link href="/feed.xml" rel="self"/>
  
  <link href="https://jongmin92.github.io/"/>
  <updated>2018-02-17T10:35:32.000Z</updated>
  <id>https://jongmin92.github.io/</id>
  
  <author>
    <name>KimJongMin</name>
    <email>kdhx92@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Spring - IoC &amp; DI</title>
    <link href="https://jongmin92.github.io/2018/02/11/Spring/spring-ioc-di/"/>
    <id>https://jongmin92.github.io/2018/02/11/Spring/spring-ioc-di/</id>
    <published>2018-02-11T09:30:00.000Z</published>
    <updated>2018-02-17T10:35:32.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ioc란"><a href="#IoC란" class="headerlink" title="IoC란?"></a>IoC란?</h1><p>IoC 컨테이너 개념을 이해하기 위하여 이와 같은 컨테이너가 왜 등장하게 되었는지를 먼저 이해하는 것이 중요합니다.</p><p>애플리케이션 코드를 작성할 때, 특정 기능이 필요하면 라이브러리 사용하곤 합니다. 이때는 프로그램의 흐름을 제어하는 주체가 애플리케이션 코드입니다. 하지만 <strong>프레임워크(Framework) 기반의 개발에서는 프레임워크 자신이 흐름을 제어하는 주체가 되어, 필요 할 때마다 애플리케이션 코드를 호출하여 사용합니다.</strong></p><p>프레임워크에서 이 제어권을 가지는 것이 바로 <code>컨테이너(Container)</code>입니다. <strong>객체에 대한 제어권이 개발자로부터 컨테이너에게 넘어가면서 객체의 생성부터 생명주기 관리까지의 모든 것을 컨테이너가 맡아서 하게됩니다.</strong> 이를 <strong>일반적인 제어권의 흐름이 바뀌었다고 하여 <code>IoC(Inversion of Control : 제어의 역전)</code>라고 합니다.</strong></p><p>먼저 지금까지 일반적으로 개발하던 방식에 대해서 생각해보아야 합니다. 모든 인스턴스에 대한 생성 권한은 지금까지 모든 개발자들에게 있었습니다. 즉, 작성하는 코드상에서 개발자가 직접 생성했다는 것입니다. EJB나 IoC 컨테이너를 사용하지 않았던 개발자들은 지금까지 이와 같은 방식을 사용했습니다.</p><p>EJB는 각 개발자들이 모든 인스턴스의 생성 권한에 제약을 가하는 첫번째 프레임워크입니다. EJB는 서비스를 위해 생성되는 컴포넌트에 대한 생성 권한을 EJB 컨테이너에게 위임했습니다. 생성된 인스턴스는 EJB 컨테이너가 생명주기를 관리했습니다. EJB가 EJB 컨테이너에 의하여 관리됨으로 인해 큰 장점을 얻을 수 있었습니다. 그러나 장점 이외에 EJB가 가지고 있는 한계에 부딪히게 되었으며, 이 같은 요구사항을 해결하기 위해 EJB의 한계를 극복하기 위한 시도가 발생했습니다.</p><p>그래서 등장한 것이 경량(LightWeight) IoC 컨테이너 입니다. 경량 IoC 컨테이너는 EJB 컨테이너가 가지고 있던 단점을 보완하기 위하여 탄생한 컨테이너 개념입니다. <strong>Spring 프레임워크에서 지원하는 IoC 컨테이너는 우리들이 흔히 개발하고 사용해왔던 일반 <code>POJO(Plain Old Java Object)</code> 클래스들이 지금까지 EJB를 통하여 실행했던 많은 기능들을 서비스 가능하도록 지원합니다.</strong><br>또한, EJB 컨테이너가 지원하고 있던 Transaction, Object Pooling, 인스턴스 생명주기 관리등의 기능들을 Spring 컨테이너가 지원하며 부가적으로 테스트의 용이성(애플리케이션 품질의 향상), 개발 생산성을 향상 시킬 수 있습니다.</p><h1 id="사용하는-목적"><a href="#사용하는-목적" class="headerlink" title="사용하는 목적"></a>사용하는 목적</h1><p>IoC를 사용하는 목적에 대해서는 지금까지의 클래스호출 방식의 변화를 살펴보면 더 쉽게 이해할 수 있습니다.</p><h2 id="클래스-호출-방식"><a href="#클래스-호출-방식" class="headerlink" title="클래스 호출 방식"></a>클래스 호출 방식</h2><p>클래스내에 선언과 구현이 같이 있기 때문에 다양한 형태로 변화가 불가능합니다.<br><img src="/images/post/2018-02-11/class1.jpg" alt=""></p><h2 id="인터페이스-호출-방식"><a href="#인터페이스-호출-방식" class="headerlink" title="인터페이스 호출 방식"></a>인터페이스 호출 방식</h2><p>클래스를 인터페이스와 인터페이스를 상속받아 구현하는 클래스로 분리했습니다. 구현클래스 교체가 용이하여 다양한 변화가 가능합니다. 그러나 구현클래스 교체시 호출클래스의 코드에서 수정이 필요합니다. (부분적으로 종속적)<br><img src="/images/post/2018-02-11/class2.jpg" alt=""></p><h2 id="팩토리-호출-방식"><a href="#팩토리-호출-방식" class="headerlink" title="팩토리 호출 방식"></a>팩토리 호출 방식</h2><p>팩토리 방식은 팩토리가 구현클래스를 생성하기 때문에 호출클래스는 팩토리를 호출 하는 코드로 충분합니다. 구현클래스 변경시 팩토리만 수정하면 되기 때문에 호출클래스에는 영향을 미치지 않습니다. 그러나 호출클래스에서 팩토리를 호출하는 코드가 들어가야 하는 것 또한 팩토리에 의존함을 의미합니다.<br><img src="/images/post/2018-02-11/class3.jpg" alt=""></p><h2 id="ioc"><a href="#IoC" class="headerlink" title="IoC"></a>IoC</h2><p>팩토리 패턴의 장점을 더해 어떠한 것에도 의존하지 않는 형태가 되었습니다. 실행시점에 클래스간의 관계가 형성이 됩니다. 즉, <strong>의존성이 삽입된다는 의미로 IoC를 <code>DI</code>라는 표현으로 사용합니다.</strong><br><img src="/images/post/2018-02-11/class4.jpg" alt=""></p><h1 id="ioc-용어-정리"><a href="#IoC-용어-정리" class="headerlink" title="IoC 용어 정리"></a>IoC 용어 정리</h1><ul><li><code>bean</code> : <strong>스프링에서 제어권을 가지고 직접 만들어 관계를 부여하는 오브젝트</strong><br>Java Bean, EJB의 Bean과 비슷한 오브젝트 단위의 애플리케이션 컴포넌트이다. 하지만 스프링을 사용하는 애플리케이션에서 만들어지는 모든 오브젝트가 빈은 아니다. 스프링의 빈은 스프링 컨테이너가 생성하고 관계설정, 사용을 제어해주는 오브젝트를 말한다.</li><li><code>bean factory</code> : <strong>스프링의 IoC를 담당하는 핵심 컨테이너</strong><br>Bean을 등록/생성/조회/반환/관리 한다. 보통 bean factory를 바로 사용하지 않고 이를 확장한 application context를 이용한다. BeanFactory는 bean factory가 구현하는 interface이다. (getBean()등의 메서드가 정의되어 있다.)</li><li><code>application context</code> : <strong>bean factory를 확장한 IoC 컨테이너</strong><br>Bean의 등록/생성/조회/반환/관리 기능은 bean factory와 같지만, 추가적으로 spring의 각종 부가 서비스를 제공한다. ApplicationContext는 application context가 구현해야 하는 interface이며, BeanFactory를 상속한다.</li><li><code>configuration metadata</code> : <strong>application context 혹은 bean factory가 IoC를 적용하기 위해 사용하는 메타정보</strong><br>스프링의 설정정보는 컨테이너에 어떤 기능을 세팅하거나 조정하는 경우에도 사용하지만 주로 bean을 생성/구성하는 용도로 사용한다.</li><li><code>container (ioC container)</code> : <strong>IoC 방식으로 bean을 관리한다는 의미에서 bean factory나 application context를 가리킨다.</strong><br>application context는 그 자체로 ApplicationContext 인터페이스를 구현한 오브젝트를 말하기도 하는데, 하나의 애플리케이션에 보통 여러개의 ApplicationContext 객체가 만들어진다. 이를 통칭해서 spring container라고 부를 수 있다.</li></ul><h1 id="스프링을-사용하지-않을-때-일어날-수-있는-문제"><a href="#스프링을-사용하지-않을-때-일어날-수-있는-문제" class="headerlink" title="스프링을 사용하지 않을 때 일어날 수 있는 문제"></a>스프링을 사용하지 않을 때 일어날 수 있는 문제</h1><p>스프링의 특징을 알아보기 앞서 스프링을 사용하지 않을 때 어떤 문제가 일어날 수 있는지 알아보겠습니다.</p><ul><li>오브젝트의 생명 주기 문제</li><li>부품화 문제</li><li>기술 은닉과 부적절한 기술 은닉 문제</li></ul><p>이러한 문제를 해결하지 않는 한 웹 애플리케이션은 리소스를 잘 이용하지 못하고, 테스트하기 어려우며, 확장이나 변경 또한 어려울 것입니다. 스프링은 이러한 문제를 해결하기 위해 만들어진 컨테이너라고도 할 수 있습니다.<br>스프링은 위의 문제를 다음과 같이 해결합니다.</p><ul><li>오브젝트의 생명 주기 문제는 DI 컨테이너로 해결</li><li>부품화 문제는 DI 컨테이너로 해결</li><li>기술 은닉과 부적절한 기술 은닉 문제는 AOP로 해결</li></ul><h1 id="di"><a href="#DI" class="headerlink" title="DI"></a>DI</h1><p><strong>IoC는 직관적이지 못하기 때문에 <code>DI(Dependency Injection)</code>라고도 부릅니다.</strong> DI는 오브젝트를 생성하고 오브젝트끼리의 관계를 생성해 소프트웨어의 부품화 및 설계를 가능하게 합니다. DI를 이용하면 인터페이스 기반의 컴포넌트를 쉽게 구현할 수 있습니다.<br>DI를 우리말로 옮기면 의존 관계의 주입입니다. 쉽게 말하면 오브젝트 사이의 의존 관계를 만드는 것입니다. 어떤 오브젝트의 프로퍼티(인스턴스 변수)에 오브젝트가 이용할 오브젝트를 설정한다는 의미입니다. 이를 학술적으로 말하면, 어떤 오브젝트가 의존(이용)할 오브젝트를 주입 혹은 인젝션(프로퍼티에 설정)한다는 것입니다.<br>DI를 구현하는 컨테이너는 단순한 인젝션 외에도 클래스의 인스턴스화 등의 생명 주기 관리 기능이 있는 경우가 많습니다.</p><p>클래스에서 new 연산자가 사라졌다는 사실이 중요합니다. 클래스에서 new 연산자가 사라짐으로써 개발자가 팩토리 메서드 같은 디자인 패턴을 구사하지 않아도 <strong>DI 컨테이너가 건내주는 인스턴스를 인터페이스로 받아서 인터페이스 기반의 컴포넌트화를 구현할 수 있게 됐습니다.</strong></p><p>DI 컨테이너의 구상 클래스 인스턴스화는(디폴트로는) 1회만 실행합니다. 생성된 인스턴스는 필요한 곳에서 사용합니다. 이렇게 하는 것으로 서비스와 DAO처럼 Singleton으로 만들고 싶은 컴포넌트를 특별히 Singleton으로 만들지 않아도 간단히 실현되게 해줍니다.</p><p><strong>스프링에는 크게 (1)XML로 작성된 Bean 정의 파일을 이용한 DI, (2)어노테이션을 이용한 DI, (3)JavaConfig에 의한 DI가 있습니다. 이번 포스팅에서는 어노테이션을 이용한 DI에 대해 알아보겠습니다.</strong></p><h2 id="autowired와-component"><a href="#Autowired와-Component" class="headerlink" title="@Autowired와 @Component"></a>@Autowired와 @Component</h2><p><strong>인스턴스 변수 앞에 <code>@Autowired</code>를 붙이면 DI 컨테이너가 그 인스턴스 변수의 형에 대입할 수 있는 클래스를 <code>@Component</code>가 붙은 클래스 중에서 찾아내 그 인스턴스를 인젝션해줍니다(정확히는 Bean 정의에서 클래스를 스캔할 범위를 정해야 합니다).</strong><br>인스턴스 변수로의 인젝션은 접근 제어자가 private라도 인젝션 할 수 있으므로 Setter 메서드를 만들 필요는 없습니다. (과거에 캡슐화의 정보 은닉에 반하는 것이 아니냐는 논의가 있었지만, 현재는 편리함에 밀려 그런 논의를 보기 힘들어졌습니다.)</p><p>만약 @Component가 붙은 클래스가 여러 개 있어도 형이 다르면 @Autowired가 붙은 인스턴스 변수에 인젝션되지 않습니다. 이렇게 <strong>형을 보고 인젝션하는 방법을 <code>byType</code>이라고 합니다.</strong></p><h2 id="autowired"><a href="#Autowired" class="headerlink" title="@Autowired"></a>@Autowired</h2><p>@Autowired는 인스턴스 변수 앞에 붙이는 것 외에도, 다음과 같이 적당한 메서드 선언 앞에도 붙일 수 있습니다.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFoo</span><span class="params">(Foo foo)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.foo = foo;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFoo</span><span class="params">(Foo foo, Bar bar)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.foo = foo;</span><br><span class="line">    <span class="keyword">this</span>.bar = bar;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>또한 생성자에도 이용할 수 있습니다.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Food</span><span class="params">(Bar b)</span> </span>&#123;...&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="/images/post/2018-02-11/interface_2_class.png" alt=""><br>그런데 위의 사진과 같이 인터페이스에 구현 클래스가 2개여서 @Autowired로 인젝션할 수 있는 클래스의 형이 2개 존재한다면 에러가 발생합니다. <strong>인젝션할 수 있는 클래스의 형은 반드시 하나로 해야합니다.</strong> 하지만 이래서는 인터페이스의 구현 클래스를 테스트용 클래스 등 다른 클래스로 바꿀 경우에 불편합니다. 그래서 이를 회피하는 세 가지 방법에 대해 알아보겠습니다.</p><ol><li><p>우선할 디폴트 Bean을 설정하는 @Primary를 @Bean이나 @Component에 부여하는 방법<br>(Bean 정의 파일에서는 <bean primary="true">)</bean></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Primary</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductDaoImpl</span> <span class="keyword">implements</span> <span class="title">ProductDao</span> </span>&#123;</span><br><span class="line">...(생략)...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>@Autowired와 병행해서 @Qualifier를 하는 방법<br>단, 이 경우는 @Component에도 이름을 같이 지정해야 한다. 이렇게 인젝션할 클래스를 형이 아닌 이름으로 찾아주는 방법을 byName이라고 한다. (물론 @Component에 같은 이름이 붙은 클래스가 중복되면 오류가 발생한다.)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="meta">@Qualifier</span>(<span class="string">"productDao"</span>)</span><br><span class="line"><span class="keyword">private</span> ProductDao productDao;</span><br><span class="line"></span><br><span class="line">-----------------------------------------</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(<span class="string">"productDao"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductDaoImpl</span> <span class="keyword">implements</span> <span class="title">ProductDao</span> </span>&#123;</span><br><span class="line">...(생략)...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Bean 정의 파일인 context:component-scan을 이용하는 방법<br>(context:component-scan을 어느 정도 크기의 컴포넌트마다 기술해두고, 만약 어떤 컴포넌트를 테스트용으로 바꾸고자 할 때는 그 컴포넌트 부분의 정의만 테스트용 부품을 스캔하게 수정하는 방법이다.)</p></li></ol><h2 id="확장된-component"><a href="#확장된-Component" class="headerlink" title="확장된 @Component"></a>확장된 @Component</h2><p>@Component에는 확장된 어노테이션이 있습니다. 웹 애플리케이션 개발에는 @Component를 이용할 것이 아니라 <strong>클래스가 어느 레이어에 배치될지 고려해서 배치될 레이어에 있는 @Component 확장 어노테이션을 사용하는 것이 좋습니다.</strong> 예를 들어 ProductServiceImpl은 @Component가 아니라 @Service로 바꾸는 편이 좋고, ProductDaoImpl 클래스도 @Component가 아니라 @Repository로 바꾸는 편이 좋습니다.</p><ul><li>@Controller : 프레젠테이션 층 스프링 MVC용 어노테이션</li><li>@Service : 비즈니스 로직 층 Service용 어노테이션, @Component와 동일</li><li>@Repository : 데이터 엑세스 층의 DAO용 어노테이션</li><li>@Configuration : Bean 정의를 자바 프로그램에서 실행하는 JavaConfig용 어노테이션</li></ul><p>@Component와 함께 사용하는 어노테이션의 하나로 @Scope가 있습니다. @Scope 뒤에 Value 속성을 지정하면 인스턴스화와 소멸을 제어할 수 있습니다. @Scope를 생략하면 해당 클래스는 싱글턴이 됩니다.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Scope</span>(<span class="string">"singletone"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductDaoImple</span> <span class="keyword">implements</span> <span class="title">ProductDao</span> </span>&#123;</span><br><span class="line">...(생략)...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li>singleton : 인스턴스를 싱글턴으로 함</li><li>prototype : 이용할 때마다 인스턴스화함</li><li>request : Servlet API의 request 스코프인 동안만 인스턴스가 생존함</li><li>session : Servlet API의 session 스코프인 동안만 인스턴스가 생존함</li><li>application : Servlet API의 application 스코프인 동안만 인스턴스가 생존함</li></ul><p>value 속성의 값은 직접 문자열로 넣어도 되지만, 상수가 존재하기 때문에 상수를 사용하는 것이 좋습니다.</p><ul><li>singleton : BeanDefinition.SCOPE_SINGLETON</li><li>prototype : BeanDefinition.SCOPE_PROTOTYPE</li><li>request : WebApplicationContext.SCOPE_REQUEST</li><li>session : WebApplicationContext.SCOPE_SESSION</li><li>application : WebApplicationContext.SCOPE_APPLICATION</li></ul><h2 id="생명-주기-관리"><a href="#생명-주기-관리" class="headerlink" title="생명 주기 관리"></a>생명 주기 관리</h2><p>스프링 DI 컨테이너에는 인스턴스의 생성과 소멸 타이밍에 호출되는 메서드를 설정할 수 있는 @PosetConstruct와 @PreDestroy라는 2개의 어노테이션이 있습니다.</p><ul><li>@PostConstruct : 초기 처리를 하는 메서드 선언. 메서드 이름은 임의로 지정할 수 있다. 단, 메서드 인수 없이 반환형은 void 형으로 해야한다.</li><li>@PreDestroy : 종료 처리를 하는 메서드 선언. 메서드 이름은 임의로 지정할 수 있다. 단, 메서드 인수 없이 반환형은 void 형으로 해야한다.</li></ul><p>@PostConstruct는 DI 컨테이너에 의해 인스턴스 변수에 무언가 인젝션된 다음에 호출됩니다. 따라서 인젝션 된 값으로 초기 처리를 할 때 사용합니다. (생성자에서도 초기 처리를 할 수 있습니다.)<br>@PreDestroy는 소멸자가 없는 자바에서 종료 처리를 하기 위해 사용합니다.</p><h1 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h1><ul><li><a href="http://wiki.javajigi.net/pages/viewpage.action?pageId=281" target="_blank" rel="noopener">Spring Core API 및 IoC(DI)</a></li><li><a href="http://www.javajigi.net/pages/viewpage.action?pageId=5614#SpringIoC%EA%B0%9C%EB%85%90%EB%B0%8F%ED%99%9C%EC%9A%A9%EB%B0%A9%EC%95%88-1.IoC%EC%9D%98%EA%B0%9C%EB%85%90" target="_blank" rel="noopener">Spring IoC 개념 및 활용방안</a></li><li><a href="http://www.javajigi.net/pages/viewpage.action?pageId=68" target="_blank" rel="noopener">IoC 컨테이너와 의존성 삽입 패턴</a></li><li><a href="https://okky.kr/article/415474" target="_blank" rel="noopener">자바EE의 역사 및 스프링과의 관계</a></li><li><a href="http://isstory83.tistory.com/91" target="_blank" rel="noopener">Spring - IoC &amp; DI</a></li><li><a href="">스프링4 입문 - 한빛미디어</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;ioc란&quot;&gt;&lt;a href=&quot;#IoC란&quot; class=&quot;headerlink&quot; title=&quot;IoC란?&quot;&gt;&lt;/a&gt;IoC란?&lt;/h1&gt;&lt;p&gt;IoC 컨테이너 개념을 이해하기 위하여 이와 같은 컨테이너가 왜 등장하게 되었는지를 먼저 이해하는 것이 중요
      
    
    </summary>
    
      <category term="Programming" scheme="https://jongmin92.github.io/categories/Programming/"/>
    
    
      <category term="Spring" scheme="https://jongmin92.github.io/tags/Spring/"/>
    
      <category term="IoC" scheme="https://jongmin92.github.io/tags/IoC/"/>
    
      <category term="DI" scheme="https://jongmin92.github.io/tags/DI/"/>
    
  </entry>
  
  <entry>
    <title>Java와 함께하는 Web</title>
    <link href="https://jongmin92.github.io/2018/02/05/Spring/web-with-java/"/>
    <id>https://jongmin92.github.io/2018/02/05/Spring/web-with-java/</id>
    <published>2018-02-05T06:30:00.000Z</published>
    <updated>2018-02-17T08:46:44.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="서론"><a href="#서론" class="headerlink" title="서론"></a>서론</h1><p>Javascript를 이용한 Node.js로 서버프로그래밍을 하다가 최근 <strong>Java를 이용한 Spring Framework를 사용하게 되면서 JavaEE, Servlet, JSP, Tomcat, MVC, WAS와 같은 용어들을 마주하게 되었습니다.</strong> 이번 포스팅을 통해서 Java를 이용한 웹 개발의 히스토리와 여러 용어들을 정리해보고자 합니다.</p><h1 id="시작은-javaee"><a href="#시작은-JavaEE" class="headerlink" title="시작은 JavaEE"></a>시작은 JavaEE</h1><p>기존에는 기업용 서버 소프트웨어 개발이라는 것이 C나 C++을 사용해서 다양한 회사의 미들웨어(middleware) 제품들을 사용해서 개발하는 방식이었습니다. 그러나 이 경우 개발자들은 운영체제와 사용하는 미들웨어 제품에 종속될 수 밖에 없는데, <strong>자바의 플랫폼 독립적 특성</strong>을 활용해서 미들웨어에 필요한 공통 API를 제공하면 그런 문제를 해결할 수 있을 것이라는 생각을 했습니다.<br>그래서 서버 개발에 필요한 기능을 모아서 J2EE라는 표준을 만들었습니다. 그리고 이 J2EE는 버전 5.0 이후로 Java EE로 개칭됩니다.</p><p>자바 플랫폼, 엔터프라이즈 에디션(Java Platform, Enterprise Edition; Java EE)은 자바를 이용한 서버측 개발을 위한 플랫폼입니다. Java EE 플랫폼은 PC에서 동작하는 표준 플랫폼인 Java SE에 부가하여, 웹 애플리케이션 서버에서 동작하는 장애복구 및 분산 멀티티어를 제공하는 자바 소프트웨어의 기능을 추가한 서버를 위한 플랫폼입니다. 이러한 Java EE 스펙에 따라 제품으로 구현한 것을 <code>웹 애플리케이션 서버</code> 또는 <code>WAS</code>라 부릅니다.</p><blockquote><p><strong>WAS란?</strong><br>인터넷 상에서 HTTP를 통해 사용자 컴퓨터나 장치에 애플리케이션을 수행해 주는 미들웨어(소프트웨어 엔진)이다. <strong>웹 애플리케이션 서버는 동적 서버 콘텐츠를 수행하는 것으로 일반적인 웹 서버와 구별이 되며, 주로 데이터베이스 서버와 같이 수행이 된다.</strong><br><img src="/images/post/2018-02-05/was.png" alt=""><br>&lt; 사용자 요청(웹 브라우저) -&gt; 웹 서버 -&gt; WAS(동적 처리) -&gt; 웹 서버 -&gt; 사용자 응답 메세지(웹 브라우저) &gt;<br>예로, 웹 서버에서 JSP를 요청하면 톰캣에서는 JSP 파일을 서블릿으로 변환하여 컴파일을 수행하고, 서블릿의 수행결과를 웹 서버에서 전달하게 된다.</p></blockquote><p>그렇게 시작된 자바EE는 출발부터 많은 관심을 받았고, 특히 웹 개발을 위해 자바EE 표준에 포함된 <strong>서블릿(Servlet)</strong>과 <strong>JSP</strong>는 당시 막 유행하던 PHP나 ASP와 함께 <code>CGI</code>를 몰아내며 자바 언어가 인기를 얻는데 한 몫을 담당했습니다.</p><blockquote><p><strong>CGI란?</strong> (인용 - <a href="http://www.terms.co.kr/CGI.htm" target="_blank" rel="noopener">http://www.terms.co.kr/CGI.htm</a>)<br><strong>CGI는 웹서버에 있어 사용자의 요구를 응용프로그램에 전달하고 그 결과를 사용자에게 되돌려주기 위한 표준적인 방법이다.</strong> 사용자가 하이퍼링크를 클릭 하거나 웹사이트의 주소를 입력함으로써 웹 페이지를 요청하면, 서버는 요청된 페이지를 보내준다. 그러나, 사용자가 웹페이지의 양식에 내용을 기재하여 보냈을 때, 그것은 보통 응용프로그램에 의해 처리될 필요가 있다. 웹 서버는 그 양식 정보를 조그만 응용프로그램에 전달하는데, 이 프로그램은 데이터를 처리하고 필요에 따라 확인 메시지를 보내주기도 한다. 이렇게 <strong>서버와 응용 프로그램간에 데이터를 주고받기 위한 방법이나 규약들을 CGI라고 부른다.</strong> 이것은 웹의 HTTP 프로토콜의 일부이다.<br>만약 웹사이트를 만들 때 어떠한 제어를 위해 CGI 프로그램을 사용하기 원하면, HTML 파일 내에 있는 URL 내에 그 프로그램의 이름을 기술하면 된다. 만약 폼을 만들려고 할 때, 이 URL은 FORMS 태그의 일부로서 기술될 수 있는데, 예를 들어 아래와 같이 쓸 수 있을 것이다.<br>이 태그의 결과로서 mybiz.com에 있는 서버는 입력된 데이터를 저장하기 위해 제어권을 “formprog.pl”이라는 CGI 프로그램에 넘기고, 확인 메시지를 되돌려준다 (여기서 .pl은 Perl로 작성된 프로그램이라는 것을 가리키지만, CGI는 다른 언어로도 작성될 수 있다).<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">FORM</span> <span class="attr">METHOD</span>=<span class="string">POST</span> <span class="attr">ACTION</span>=<span class="string">http://www.mybiz.com/cgi-local/formprog.pl</span>&gt;</span></span><br></pre></td></tr></table></figure></p></blockquote><p>자바EE의 핵심은 EJB(Enterprise Java Beans)라는 기술이었습니다. EJB는 자바EE가 대체하는 미들웨어에서 구동되던 기업의 핵심 서비스를 만들기 위한 분산처리 및 트랜잭션, 보안 등을 지원하는 컴포넌트 모델을 제공하는 기술입니다. 이러한 EJB는 주목을 받으며 널리 쓰이게 되었지만 시간이 지남에 따라 몇 가지 심각한 문제들로 비판을 받게 되었고, 이러한 문제점을 개선하기 위해 Spring Framework가 처음 개발되었습니다. 특히 고가의 풀스택 자바EE 서버가 아닌 톰캣과 같은 일반 서블릿 컨테이너에서도 구동된다는 것이 큰 강점으로 작용했습니다.</p><p>다시 말하면, 이는 Spring을 통해 비싼 자바EE 서버를 구매하지 않아도 EJB보다 훨씬 간편한 방식으로 EJB가 제공하던 선언적 트랜잭션 및 보안 처리, 분산 환경 지원 등 주요 기능을 모두 사용할 수 있게 되었음을 뜻하며, 무엇보다 이제는 더 이상 각 자바EE 서버 제품에 특화된 설정을 따로 공부하거나 서버 제품을 바꿀 때마다 포팅 작업이 필요없이 Spring만 이용하면 톰캣이든 레진(Resin)이든 기존의 풀스택 자바EE 서버이든 관계없이 간단하게 배포가 가능하다는 뜻입니다.</p><h1 id="servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h1><p><strong><code>Servlet</code>은 Java 기반의 확장된 CGI로서 동일하게 동적인 웹 애플리케이션을 작성할 수 있는 기술입니다.</strong> CGI와 비슷하게 클라이언트의 요청을 받아 해당하는 프로그램을 실행시켜주지만 CGI와는 조금 다른 동작 형태를 보입니다.<br>Servlet은 CGI와 달리 효율적입니다. <strong>CGI의 멀티 프로세스 동작이 아닌 멀티 스레드 방식의 동작으로 서블릿이 생성되면 서버가 종료되지 않는 이상 메모리로 남게 됩니다.</strong> 따라서 이후에 오는 요청에 대해서는 서블릿을 새로 생성하지 않고 동작을 이어갈 수 있기 때문에 시스템 자원(메모리)에서 큰 이점이 있습니다. <strong>그로인해 Servlet은 CGI 보다 적은 시스템 자원으로 많은 요청을 처리할 수 있는 구조를 가지고 있습니다.</strong></p><h2 id="멀티-프로세스-동작-방식"><a href="#멀티-프로세스-동작-방식" class="headerlink" title="멀티 프로세스 동작 방식"></a>멀티 프로세스 동작 방식</h2><p><img src="/images/post/2018-02-05/multi_process.png" alt=""><br>클라이언트의 요청을 받아 웹 애플리케이션을 직접 실행하는 구조로 <strong>각각의 요청에 대해 프로세스를 생성하고 응답한 뒤 종료하는 형태</strong>이다. 이는 각각의 많은 요청이 들어오는 경우 프로세스를 계속 생성하므로(프로세스를 생성하는 작업은 필요이상의 부담을 주게 된다) 시스템 부하가 커지게 되 안정적인 서비스가 힘들다.</p><h2 id="멀티-스레드-동작-방식"><a href="#멀티-스레드-동작-방식" class="headerlink" title="멀티 스레드 동작 방식"></a>멀티 스레드 동작 방식</h2><p><img src="/images/post/2018-02-05/multi_thread.png" alt=""><br><strong>클라이언트의 요청을 받으면 웹 애플리케이션을 거치지 않고 <code>웹 컨테이너</code>로 요청이 전달된다. 그리고 웹 컨테이너가 요청을 처리할 스레드를 생성하는 형태이다.</strong> 멀티스레드 방식은 최초 요청 시 웹 애플리케이션을 실행한 후 종료하지 않은 상태에서 같은 요청이 여러 번 오는 경우, 실행되고 있는 웹 애플리케이션의 스레드를 생성해 요청을 처리하는 방법이다. <strong>CGI에서 사용하는 멀티프로세스 방식보다 시스템 부하를 줄여 안정적인 서비스를 제공할 수 있다.</strong></p><blockquote><p><strong>컨테이너란?</strong> (인용 - <a href="http://yayongi.tistory.com/entry/%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%BC%EA%B9%8C" target="_blank" rel="noopener">컨테이너란?? 무엇일까?</a>)<br><strong>컨테이너는 Servlet을 실행하고 관리하는 역할을 합니다. 개발자가 해야하는 역할을 대신 함으로써, 개발자가 해야하는 일을 대폭 줄여줍니다.</strong> 컨테이너는 개발자가 웹서버와 통신하기 위하여 소켓을 생성하고, 특정 포트에 리스닝하고, 스트림을 생성하는 등의 복잡한 일들을 대신합니다. 또한 Servlet의 생성부터 소멸까지 일련의 과정을 관리하며, 요청이 들어올 때마다 새로운 자바 스레드를 하나 생성합니다.<br>톰캣을 예로 들면 아파치와 같은 웹서버가 사용자로부터 Servlet에 대한 요청을 받으면 이것을 바로 호출하는 것이 아니라 컨테이너에게 이 요청을 넘겨주고 이 컨테이너는 <code>request와 response 객체를 생성</code>하고 해당하는 <code>Servlet의 스레드를 생성</code>하여 앞의 <code>두 객체를 인자로 넘깁니다.</code><br>스레드 생성 후 이 <code>스레드의 service() 메소드를 호출</code>하고 처음에 사용자로부터 요청받은 방식이 get인지 post인지에 따라 <code>doGet()과 doPost() 메소드 중 선택 생성</code>합니다. 만약 doPost가 생성되었다고 가정하면, 이 doPost() 메소드는 독 페이지를 생성하고, 이것을 처음 받은 response 객체에 실어서 컨테이너에게 보냅니다. 컨테이너는 <code>이 객체를 HTTPResponse로 변환하여 클라이언트에게 보냅니다.</code> 그런 다음 처음에 생성한 <code>객체 Request와 Response를 소멸</code>시킵니다.</p></blockquote><h2 id="servlet-동작-방식"><a href="#Servlet-동작-방식" class="headerlink" title="Servlet 동작 방식"></a>Servlet 동작 방식</h2><p><img src="/images/post/2018-02-05/servlet.png" alt=""></p><ol><li>사용자가 URL을 클릭하면 HTTP Request를 Servlet Container에 보낸다.</li><li>Servlet Container는 HttpServletRequest, HttpServletResponse 두 객체를 생성한다.</li><li>사용자가 요청한 URL을 분석하여 어느 서블릿에 대한 요청인지 찾는다. (<strong>DD</strong>를 참조하여 분석)</li><li>컨테이너는 서블릿 service() 메소드를 호출하며, POST, GET여부에 따라 doGet() 또는 doPost()가 호출된다.</li><li>doGet() or doPost() 메소드는 동적인 페이지를 생성한 후 HttpServletResponse객체에 응답을 보낸다.</li><li>응답이 완료되면 HttpServletRequest, HttpServletResponse 두 객체를 소멸시킨다.</li></ol><blockquote><p><strong>DD (배포서술자, Deployment Descriptor) = web.xml</strong></p><ul><li>Servlet, Error Page, Listener, Fillter, 보안 설정등 Web Application의 설정 파일이다.</li><li>URL과 실제 서블릿의 매핑 정보도 담고 있다.</li><li>하나의 웹 어플리케이션에 하나만 존재한다.</li><li>보통 Web Document Root 디렉토리에 WEB-INF 폴더 아래 web.xml 파일로 존재한다.</li></ul></blockquote><p>한마디로 정리하자면 톰캣과 같은 <code>WAS</code> 가 java 파일을 컴파일해서 Class로 만들고 메모리에 올려 <code>Servlet 객체</code>를 만들게 되고 이 <code>Servlet 객체</code>는 <code>doPost</code>, <code>doGet</code>을 통해 요청에 응답합니다. 초기화 과정을 더 자세히 보면 다음과 같습니다.<br><img src="/images/post/2018-02-05/servlet_detail.png" alt=""><br><code>init</code>, <code>Service</code>, <code>destory</code> 이런 콜백이 각 시점에 불리는걸 볼 수 있습니다. <code>init</code>은 Servlet이 메모리에 로드 될때 실행됩니다. <code>destory</code>는 마찬가지로 언로드되기 전에 수행되는 콜백입니다. <code>service</code> 메소드는 HTTP Method 타입에 따라 <code>doGet</code> 혹은 <code>doPost</code>를 호출합니다.<br>기억해야 할 점은, 초기화된 Servlet이 클라이언트의 요청이 있을 때 마다 <code>Thread</code>를 생성해서 병렬적으로 <code>service</code>를 수행한다는 것. 서블릿 객체는 <strong>여러개 생성되지 않습니다.</strong></p><h2 id="servlet-예시-코드"><a href="#Servlet-예시-코드" class="headerlink" title="Servlet 예시 코드"></a>Servlet 예시 코드</h2><p>다음은 Servlet의 예시 코드입니다. 자바 코드 안에 HTML을 넣기 굉장히 불편합니다.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse res)</span> <span class="keyword">throws</span> ServletException,IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">res.setContentType(<span class="string">"text/html;charset=UTF-8"</span>);</span><br><span class="line"></span><br><span class="line">PrintWriter out = res.getWriter();</span><br><span class="line"></span><br><span class="line">out.println(<span class="string">"&lt;HTML&gt;"</span>);</span><br><span class="line">out.println(<span class="string">"&lt;BODY&gt;"</span>);</span><br><span class="line">out.println(<span class="string">"Hello World!!"</span>);</span><br><span class="line">out.println(<span class="string">"&lt;/BODY&gt;"</span>);</span><br><span class="line">out.println(<span class="string">"&lt;/HTML&gt;"</span>);</span><br><span class="line">out.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="jsp"><a href="#JSP" class="headerlink" title="JSP"></a>JSP</h1><p>HTML을 넣기 불편한 구조로 인해 JSP가 등장하게 됬습니다. Servlet의 확장된 기술로 브라우저에 표현하기 위한 HTML 코드에 JAVA 코드를 혼용하여 사용할 수 있게 합니다. 이로써 디자인과 로직 개발을 분업화시켜 효율적인 코드를 생산해 낼 수 있게됩니다.</p><h2 id="jsp-동작-방식"><a href="#JSP-동작-방식" class="headerlink" title="JSP 동작 방식"></a>JSP 동작 방식</h2><p>JSP 라는 새로운 개발 방법이 나왔지만, 사실 이 <strong><code>JSP</code> 도 내부적으로는 아래 그림 처럼 <code>Tomcat</code>이 <code>Servlet</code>으로 바꾸어서 돌립니다.</strong><br><img src="/images/post/2018-02-05/jsp.png" alt=""></p><ol><li>클라이언트가 브라우저를 통해 서버에 HTTP 프로토콜로 요청한다.</li><li>서버는 컨테이너에게 처리를 요청하고 컨테이너는 해당 파일을 찾는다.</li><li>찾은 파일을 서블릿으로 변환한다. 만약 이미 변환 되어있는 파일이 있다면 그 파일을 바로 실행⑤한다.</li><li>서블릿 파일을 실행가능한 class파일로 컴파일 한다.</li><li>컴파일된 class파일을 메모리에 적재하고 실행한 결과를 웹서버에 넘겨준다.</li><li>웹서버는 브라우저가 인식할수 있는 정적페이지를 구성하여 클라이언트에게 응답한다.</li></ol><h2 id="jsp-예시-코드"><a href="#JSP-예시-코드" class="headerlink" title="JSP 예시 코드"></a>JSP 예시 코드</h2><p>HTML 내부에 Java 코드가 있어 HTML 코드를 작성하기 쉽습니다. 그러나 <strong>로직과 디자인이 한 파일내에 섞여있어 유지보수가 어렵습니다.</strong> 하나가 편한대신, 다른 불편한 점들이 생긴것 입니다. 그래서 이를 해결하기 위해 <code>MVC Model</code>이 등장하였습니다.<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;%<span class="meta">@page</span> <span class="keyword">import</span>=<span class="string">"java.util.Calendar"</span> %&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">"text/html; charset=UTF-8"</span>%&gt;</span><br><span class="line">&lt;%</span><br><span class="line">  String str=String.format(<span class="string">"%tF"</span>,Calendar.getInstance());</span><br><span class="line">%&gt;</span><br><span class="line">&lt;!DOCTYPE html PUBLIC <span class="string">"-//W3C//DTD HTML 4.01 Transitional//EN"</span> <span class="string">"http://www.w3.org/TR/html4/loose.dtd"</span>&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta http-equiv=<span class="string">"Content-Type"</span> content=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span><br><span class="line">    &lt;title&gt;Insert title here&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    오늘은 &lt;%=str%&gt;&lt;br/&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><h2 id="mvc-model-1"><a href="#MVC-Model-1" class="headerlink" title="MVC Model 1"></a>MVC Model 1</h2><p><img src="/images/post/2018-02-05/mvc_model1.png" alt=""><br>Model1 방식은 사용자로부터 요청을 JSP가 받아(더 정확히는 JSP 에서 사용자가 요청을 합니다.) <code>Java Bean</code>(DTO, DAO)을 호출해 처리합니다.<br>이 방식은 개발 속도가 빠르고 배우기 쉽지만 프레젠테이션 로직과 비즈니스 로직이 혼재하기 때문에 JSP 코드가 복잡해져 유지 보수가 어려워진다는 단점이 있습니다.</p><h2 id="mvc-model-2"><a href="#MVC-Model-2" class="headerlink" title="MVC Model 2"></a>MVC Model 2</h2><p><img src="/images/post/2018-02-05/mvc_model2.png" alt=""><br>단순히 JSP만 사용하거나, Servlet만 사용하는 것이 아니라 두개의 장단점을 모두 취해 <code>View</code> 는 <code>JSP</code>로, <code>Controller</code>는 <code>Servlet</code>을 사용한 것이 Model2 입니다. 보여지는 부분은 HTML이 중심이 되는 <code>JSP</code>, 다른 자바 클래스에게 데이터를 넘겨주는 부분은 Java 코드가 중심이 되는 <code>Servlet</code>이 담당하게 됩니다. 그리고 <code>Model</code> 영역 에서는 DTO, DAO를 통해 Mysql 과 같은 데이터베이스에 접근합니다.</p><h1 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h1><ul><li><a href="https://okky.kr/article/415474" target="_blank" rel="noopener">자바EE의 역사 및 스프링과의 관계</a></li><li><a href="https://ko.wikipedia.org/wiki/%EC%9E%90%EB%B0%94_%ED%94%8C%EB%9E%AB%ED%8F%BC,_%EC%97%94%ED%84%B0%ED%94%84%EB%9D%BC%EC%9D%B4%EC%A6%88_%EC%97%90%EB%94%94%EC%85%98" target="_blank" rel="noopener">위키백과 - 자바 플랫폼, 엔터프라이즈 에디션</a></li><li><a href="http://dzlove.tistory.com/entry/서블릿-자바-서블릿으로-알아보는-웹-프로그래밍" target="_blank" rel="noopener">서블릿-자바-서블릿으로-알아보는-웹-프로그래밍</a></li><li><a href="http://myblog.opendocs.co.kr/archives/427" target="_blank" rel="noopener">Servlet - Concept</a></li><li><a href="http://a07274.tistory.com/314" target="_blank" rel="noopener">Java Servlet 이란? (개념 및 예제)</a></li><li><a href="http://anster.tistory.com/128" target="_blank" rel="noopener">JSP와 Servlet, 왜 같이 쓸까?</a></li><li><a href="http://myblog.opendocs.co.kr/archives/440" target="_blank" rel="noopener">JSP - Concept</a></li><li><a href="http://www.javajigi.net/pages/viewpage.action?pageId=73" target="_blank" rel="noopener">Model1, Model2 개발 방식</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;서론&quot;&gt;&lt;a href=&quot;#서론&quot; class=&quot;headerlink&quot; title=&quot;서론&quot;&gt;&lt;/a&gt;서론&lt;/h1&gt;&lt;p&gt;Javascript를 이용한 Node.js로 서버프로그래밍을 하다가 최근 &lt;strong&gt;Java를 이용한 Spring Fram
      
    
    </summary>
    
      <category term="Programming" scheme="https://jongmin92.github.io/categories/Programming/"/>
    
    
      <category term="JavaEE" scheme="https://jongmin92.github.io/tags/JavaEE/"/>
    
      <category term="Servlet" scheme="https://jongmin92.github.io/tags/Servlet/"/>
    
      <category term="JSP" scheme="https://jongmin92.github.io/tags/JSP/"/>
    
      <category term="MVC" scheme="https://jongmin92.github.io/tags/MVC/"/>
    
      <category term="Tomcat" scheme="https://jongmin92.github.io/tags/Tomcat/"/>
    
  </entry>
  
  <entry>
    <title>IntelliJ에서 SpringBoot 프로젝트 생성하기</title>
    <link href="https://jongmin92.github.io/2018/02/04/Spring/springboot-start/"/>
    <id>https://jongmin92.github.io/2018/02/04/Spring/springboot-start/</id>
    <published>2018-02-04T14:00:00.000Z</published>
    <updated>2018-02-05T06:11:18.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="서론"><a href="#서론" class="headerlink" title="서론"></a>서론</h1><p>Spring은 J2EE나 JEE로 알려진 자바 엔터프라이즈 에디션을 경량화하기 위해 시작되었다. 스프링은 무거운 엔터프라이즈 자바 빈(EJB)로 컴포넌트를 개발하지 않았다. 그 대신 의존성 주입(DI)과 관점 지향 프로그래밍(AOP)을 활용해서 EJB의 기능을 평범한 자바 객체(POJO)로 구현할 수 있게 하여 간단하게 엔터프라이즈 자바 개발에 접근할 수 있도록 했다.<br>컴포넌트 코드 작성은 가벼워졌지만, <strong>Spring Framework 기반의 웹 프로젝트를 진행하게되면 최초 개발 구성(설정)하는 부분에 많은 시간이 소모되었다.</strong> 결국 애플리케이션 로직 작성이 아닌 프로젝트 구성 작업에 쓰는 시간이 많이 Gk소모되는 것이다.<br><strong><code>SpringBoot</code>는 Spring의 복잡한 설정을 최소화하여 빠르게 프로젝트 개발을 시작할 수 있게 해준다.</strong> 이 포스팅에서는 IntelliJ에서 SpringBoot로 웹 프로젝트를 시작하는 방법을 소개하며 SpringBoot의 특징을 소개한다.</p><h1 id="intellij에서-springboot-프로젝트-생성"><a href="#IntelliJ에서-SpringBoot-프로젝트-생성" class="headerlink" title="IntelliJ에서 SpringBoot 프로젝트 생성"></a>IntelliJ에서 SpringBoot 프로젝트 생성</h1><p><strong><code>Spring Initializr</code>는 SpringBoot 프로젝트 구조를 만드는 웹 애플리케이션이다.</strong> 기본적인 프로젝트 구조와 코드를 빌드하는 데 필요한 maven이나 gradle 빌드 명세를 만들어준다. 그러므로 Spring Initializr가 만든 프젝트에 애플리케이션 코드만 작성하면 된다.<br>Spring Initializr는 웹 기반 인터페이스, Spring Tool Suite(STS), IntelliJ IDE, SpringBoot CLI로 사용할 수 있다. 그 중 IntelliJ를 사용해 프로젝트를 생성해보자.</p><p>IntelliJ를 시작하여 <strong>Create New Project</strong>를 선택하고 새로운 프로젝트 다이얼로그를 연다. <strong>New Project</strong> 다이얼로그에서 <strong>Spring Initializr</strong> 프로젝트를 선택하고 자바 SDK를 설정한 후 Next 버튼을 누른다.<br><img src="/images/post/2018-02-04/new_project_1.png" alt=""></p><p>두 번째 화면에서는 프로젝트 이름, 빌드할 때 maven과 gradle 중 어느 것을 사용할지, 자바 버전 등 프로젝트의 기본적인 사항을 물어본다. 프로젝트 정보를 입력하고 Next 버튼을 누른다.<br><img src="/images/post/2018-02-04/new_project_2.png" alt=""></p><p>세 번째 화면에서는 프로젝트에서 필요한 종류의 의존성을 추가한다. <strong>Web, Thymeleaf, JPA, H2</strong>를 선택한 후 Next 버튼을 누른다.<br><img src="/images/post/2018-02-04/new_project_3.png" alt=""></p><p>다음으로 프로젝트가 저장되는 경로를 지정한다.<br><img src="/images/post/2018-02-04/new_project_4.png" alt=""></p><p>Gradle 설정을 지정한다.<br><img src="/images/post/2018-02-04/new_project_5.png" alt=""></p><h1 id="코드-작성"><a href="#코드-작성" class="headerlink" title="코드 작성"></a>코드 작성</h1><h2 id="도메인-정의-diaryjava"><a href="#도메인-정의-Diary-java" class="headerlink" title="도메인 정의 (Diary.java)"></a>도메인 정의 (Diary.java)</h2><p><strong>src/main/java/com.example.demo/Diary.java</strong> 파일을 작성한다.<br>일기를 나타내는 엔티티 정의한다. 간단하게 id, title, ocntent 필드를 갖고 있는 <strong>POJO 객체</strong>로 만든다. <code>@Entity</code> 어노테이션을 붙여 클래스를 JPA 엔티티로 지정했고, id 필드에는 <code>@Id</code>와 <code>@GeneratedValue</code> 어노테이션을 붙여 엔티티의 유일성을 식별하고 자동으로 값을 제공하는 필드로 지정했다.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.persistence.Entity;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.GeneratedValue;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.GenerationType;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.Id;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Diary</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.AUTO)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> id;</span><br><span class="line">    <span class="keyword">private</span> String user;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="keyword">private</span> String content;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">long</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUser</span><span class="params">(String user)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.user = user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getTitle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> title;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTitle</span><span class="params">(String title)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.title = title;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getContent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> content;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setContent</span><span class="params">(String content)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.content = content;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="레파지토리-인터페이스-선언-diarylistrepositoryjava"><a href="#레파지토리-인터페이스-선언-DiaryListRepository-java" class="headerlink" title="레파지토리 인터페이스 선언 (DiaryListRepository.java)"></a>레파지토리 인터페이스 선언 (DiaryListRepository.java)</h2><p><strong>src/main/java/com.example.demo/DiaryListRepository.java</strong> 파일을 작성한다.<br><strong>데이터베이스에 Diary 객체를 저장할 수 있는 레파지토리를 선언한다.</strong> 스프링 JPA를 사용하므로 스프링 데이터 JAP의 인터페이스를 상속하여 인터페이스를 만든다. JpaRepository 인터페이스는 타입 매개변수 두 개를 받는다. 첫 번째는 레파지토리가 사용할 도메인 타입, 두번 째는 클래스의 ID 프로퍼티 타입이다. 지정한 유저의 이름으로 도서 목록을 검색하는 findByUser() 메서드를 추가했다.<br>DiaryListRepository는 JpaRepository 인터페이스를 상속받아 18개의 메서드를 구현해야 한다. 그러나 스프링 데이터는 레파지토리를 인터페이스로 정의만 해도 잘 작동할 수 있게 런타임 시에 자동으로 구현해준다.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.data.jpa.repository.JpaRepository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DiaryListRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">Diary</span>, <span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">List&lt;Diary&gt; <span class="title">findByUser</span><span class="params">(String user)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="일기-목록-애플리케이션의-스프링-mvc-컨트롤러-diarylistcontrollerjava"><a href="#일기-목록-애플리케이션의-스프링-MVC-컨트롤러-DiaryListController-java" class="headerlink" title="일기 목록 애플리케이션의 스프링 MVC 컨트롤러 (DiaryListController.java)"></a>일기 목록 애플리케이션의 스프링 MVC 컨트롤러 (DiaryListController.java)</h2><p><strong>src/main/java/com.example.demo/DiaryListController.java</strong> 파일을 작성한다.<br>클래스에 <code>@Controller</code> 어노테이션을 추가하면, 자동 컴포넌트 검색으로 DiaryListController를 발견해 자동으로 스프링 애플리케이션 컨텍스트에 빈으로 등록한다. 요청을 처리하는 모든 메서드를 기본 URL 경로인 /로 매핑하기 위해 <code>@RequestMapping</code> 어노테이션을 붙였다.<br>usersDiarys() 메서드는 “diaryList”를 논리적 뷰 이름으로 반환한다. 그러므로 이 뷰도 만들어야 한다.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.Model;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DiaryListController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String user=<span class="string">"jongmin"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> DiaryListRepository diaryListRepository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DiaryListController</span><span class="params">(DiaryListRepository diaryListRepository)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.diaryListRepository = diaryListRepository;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(method= RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">usersDiarys</span><span class="params">(Model model)</span> </span>&#123;</span><br><span class="line">        List&lt;Diary&gt; diaryList = diaryListRepository.findByUser(user);</span><br><span class="line">        <span class="keyword">if</span> (diaryList != <span class="keyword">null</span>) &#123;</span><br><span class="line">            model.addAttribute(<span class="string">"diarys"</span>, diaryList);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"diaryList"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(method = RequestMethod.POST)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">addToReadingList</span><span class="params">(Diary diary)</span> </span>&#123;</span><br><span class="line">        diary.setUser(user);</span><br><span class="line">        diaryListRepository.save(diary);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"redirect:/"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="일기-목록을-보여주는-thymeleaf-탬플릿-diarylisthtml"><a href="#일기-목록을-보여주는-Thymeleaf-탬플릿-diaryList-html" class="headerlink" title="일기 목록을 보여주는 Thymeleaf 탬플릿 (diaryList.html)"></a>일기 목록을 보여주는 Thymeleaf 탬플릿 (diaryList.html)</h2><p><strong>src/main/resources/template/diaryList.html</strong> 파일을 작성한다.<br>유저의 일기 목록 부분과 일기를 일기 목록에 추가할 때 사용하는 입력 폼을 작성한다.<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span> xmlns:th=<span class="string">"http://www.springframework.org/schema/data/jaxb"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=<span class="string">"UTF-8"</span> /&gt;</span><br><span class="line">  &lt;title&gt;일기 리스트&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h2&gt;일기 목록&lt;/h2&gt;</span><br><span class="line">&lt;div th:unless=<span class="string">"$&#123;#lists.isEmpty(diarys)&#125;"</span>&gt;</span><br><span class="line">  &lt;dl th:each=<span class="string">"diary : $&#123;diarys&#125;"</span>&gt;</span><br><span class="line">    &lt;dt&gt;</span><br><span class="line">      &lt;span th:if="$&#123;diary.title&#125;" th:text="$&#123;diary.title&#125;"&gt;Title&lt;/span&gt;</span><br><span class="line">    &lt;/dt&gt;</span><br><span class="line">    &lt;dd&gt;</span><br><span class="line">      &lt;span th:if="$&#123;diary.content&#125;" th:text="$&#123;diary.content&#125;"&gt;Content&lt;/span&gt;</span><br><span class="line">    &lt;/dd&gt;</span><br><span class="line">  &lt;/dl&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;hr /&gt;</span><br><span class="line"></span><br><span class="line">&lt;h3&gt;일기 작성&lt;/h3&gt;</span><br><span class="line">&lt;form method=<span class="string">"POST"</span> th:action=<span class="string">"@&#123;/&#125;"</span>&gt;</span><br><span class="line">  &lt;label for="title"&gt;Title:&lt;/label&gt;</span><br><span class="line">  &lt;input type=<span class="string">"text"</span> name=<span class="string">"title"</span> size=<span class="string">"50"</span> /&gt;&lt;br /&gt;</span><br><span class="line">  &lt;label for="content"&gt;Content:&lt;/label&gt;</span><br><span class="line">  &lt;input type=<span class="string">"text"</span> name=<span class="string">"content"</span> size=<span class="string">"100"</span> /&gt;&lt;br /&gt;</span><br><span class="line">  &lt;input type=<span class="string">"submit"</span> value=<span class="string">"추가"</span> /&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><h1 id="실행-결과"><a href="#실행-결과" class="headerlink" title="실행 결과"></a>실행 결과</h1><p><img src="/images/post/2018-02-04/result.png" alt=""></p><h1 id="springboot-특징-살펴보기"><a href="#SpringBoot-특징-살펴보기" class="headerlink" title="SpringBoot 특징 살펴보기"></a>SpringBoot 특징 살펴보기</h1><p>SpringBoot를 이용해 간단한 애플리케이션을 만들어 보았다. 이 애플리케이션을 바탕으로 SpringBoot의 특징을 알아보자.</p><h2 id="스타터-의존성"><a href="#스타터-의존성" class="headerlink" title="스타터 의존성"></a>스타터 의존성</h2><p>처음 프로젝트를 생성하며 Spring Initializr에서 필요한 Dependencies들(Web, Thymeleaf, JPA, H2)을 쉽게 추가했었다. 만약 이런 <code>스타터 의존성</code>이 없었다면, 애플리케이션을 개발하기도 전에 <strong>build.gradle</strong> 또는 <strong>pom.xml</strong>에서 필요한 Dependencies를 직접 추가해야했을 것이다. (또햔, 여러 의존성들 사이에 잘 호환이 되는지도 확인해야 한다.)</p><p>프로젝트의 <strong>build.gradle</strong> 코드를 잠시 살펴보자.<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line"><span class="keyword">compile</span>(<span class="string">'org.springframework.boot:spring-boot-starter-data-jpa'</span>)</span><br><span class="line"><span class="keyword">compile</span>(<span class="string">'org.springframework.boot:spring-boot-starter-thymeleaf'</span>)</span><br><span class="line"><span class="keyword">compile</span>(<span class="string">'org.springframework.boot:spring-boot-starter-web'</span>)</span><br><span class="line"><span class="keyword">runtime</span>(<span class="string">'com.h2database:h2'</span>)</span><br><span class="line">testCompile(<span class="string">'org.springframework.boot:spring-boot-starter-test'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Spring Initializr에서 체크했던 의존성들이 gradle에 추가되어 있는것을 볼 수 있다. 또한 각 라이브러리의 버전이 명시되어 있지 않은데, 이는 SpringBoot 버전에 따라 스타터 의존성 버전이 결정되기 때문이다. 즉, 사용자는 스타터 의존성만 지정하면 어떤 라이브러리와 어떤 버전을 사용해야 하는지 걱정없이 구성에서 자유로워질 수 있는 것이다.</p><h2 id="자동-구성"><a href="#자동-구성" class="headerlink" title="자동 구성"></a>자동 구성</h2><p>SpringBoot <code>Auto-configuration</code>은 <strong>스프링 구성을 적용해야 할지 말지를 결정하는 요인들을 판단하는 런타임 과정이다.</strong> 애플리케이션이 시작될 때마다 스프링 부트는 보안, 통합, 데이터 저장, 웹 개발 영역 등을 커버하기 위해 자도성에서 대략 200가지 정도 결정을 내린다. 이 자동 구성 덕분에 필요한 상황이 아니면 명시적으로 구성을 작성하지 않아도 된다.</p><h1 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h1><ul><li>스프링 부트 코딩 공작소</li><li><a href="http://blog.saltfactory.net/creating-springboot-project-in-intellij/" target="_blank" rel="noopener">http://blog.saltfactory.net/creating-springboot-project-in-intellij/</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;서론&quot;&gt;&lt;a href=&quot;#서론&quot; class=&quot;headerlink&quot; title=&quot;서론&quot;&gt;&lt;/a&gt;서론&lt;/h1&gt;&lt;p&gt;Spring은 J2EE나 JEE로 알려진 자바 엔터프라이즈 에디션을 경량화하기 위해 시작되었다. 스프링은 무거운 엔터프라이즈 
      
    
    </summary>
    
      <category term="Programming" scheme="https://jongmin92.github.io/categories/Programming/"/>
    
      <category term="Spring" scheme="https://jongmin92.github.io/categories/Programming/Spring/"/>
    
    
      <category term="SpringBoot" scheme="https://jongmin92.github.io/tags/SpringBoot/"/>
    
      <category term="IntelliJ" scheme="https://jongmin92.github.io/tags/IntelliJ/"/>
    
  </entry>
  
  <entry>
    <title>Retrofit2 네트워크 타임아웃 시간 설정하기</title>
    <link href="https://jongmin92.github.io/2018/01/31/Programming/android-customize-network-timeouts/"/>
    <id>https://jongmin92.github.io/2018/01/31/Programming/android-customize-network-timeouts/</id>
    <published>2018-01-31T14:00:00.000Z</published>
    <updated>2018-02-05T01:06:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>Retrofit은 기본적인 네트워크 타임아웃 시간 설정을 사용하고 있습니다. 그러나 <strong>여러 상황으로 인해 기본적으로 설정된 타임아웃 시간을 변경할 필요가 생기기도 합니다.</strong><br>이번 포스팅에서는 3가지의 네트워크 타임아웃 시간 설정에 대해 알아보고 변경해보겠습니다.</p><h2 id="타임아웃-시간-설정"><a href="#타임아웃-시간-설정" class="headerlink" title="타임아웃 시간 설정"></a>타임아웃 시간 설정</h2><p>Retrofit에서는 기본적으로 다음의 3가지 타임아웃 시간 설정 값을 갖고 있습니다.</p><ul><li>Connection timeout : 10초</li><li>Read timeout : 10초</li><li>Write timeout : 10초</li></ul><h3 id="connection-timeout"><a href="#Connection-Timeout" class="headerlink" title="Connection Timeout"></a>Connection Timeout</h3><p><strong>요청을 시작한 후 서버와의 TCP handshake가 완료되기까지 지속되는 시간이다.</strong> 즉, Retrofit이 설정된 연결 시간 제한 내에서 서버에 연결할 수없는 경우 해당 요청을 실패한 것으로 계산한다.<br>따라서 사용자의 인터넷 연결 상태가 좋지 않을때 기본 시간 제한인 10초를 더 높은 값으로 설정하면 좋다.</p><h3 id="read-timeout"><a href="#Read-Timeout" class="headerlink" title="Read Timeout"></a>Read Timeout</h3><p><strong>읽기 시간 초과는 연결이 설정되면 모든 바이트가 전송되는 속도를 감시한다.</strong> 서버로부터의 응답까지의 시간이 읽기 시간 초과보다 크면 요청이 실패로 계산된다.<br><code>LongPolling</code>을 위해 변경해 주어야 하는 설정값이다.</p><h3 id="write-timeout"><a href="#Write-Timeout" class="headerlink" title="Write Timeout"></a>Write Timeout</h3><p><strong>쓰기 타임 아웃은 읽기 타임 아웃의 반대 방향이다. 얼마나 빨리 서버에 바이트를 보낼 수 있는지 확인한다.</strong></p><h2 id="코드"><a href="#코드" class="headerlink" title="코드"></a>코드</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">OkHttpClient okHttpClient = <span class="keyword">new</span> OkHttpClient.Builder()</span><br><span class="line">        .connectTimeout(<span class="number">1</span>, TimeUnit.MINUTES)</span><br><span class="line">        .readTimeout(<span class="number">30</span>, TimeUnit.SECONDS)</span><br><span class="line">        .writeTimeout(<span class="number">15</span>, TimeUnit.SECONDS)</span><br><span class="line">        .build();</span><br><span class="line"></span><br><span class="line">Retrofit.Builder builder = <span class="keyword">new</span> Retrofit.Builder()</span><br><span class="line">        .baseUrl(<span class="string">"http://localhost:3000/"</span>)</span><br><span class="line">        .client(okHttpClient)</span><br><span class="line">        .addConverterFactory(GsonConverterFactory.create());</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Retrofit은 기본적인 네트워크 타임아웃 시간 설정을 사용하고 있습니다. 그러나 &lt;strong&gt;여러 상황으로 인해 기본적으로 설정된 타임아웃 시간을 변경할 필요가 생기기도 합니다.&lt;/strong&gt;&lt;br&gt;이번 포스팅에서는 3가지의 네트워크 타임
      
    
    </summary>
    
      <category term="Programming" scheme="https://jongmin92.github.io/categories/Programming/"/>
    
    
      <category term="Android" scheme="https://jongmin92.github.io/tags/Android/"/>
    
      <category term="Retrofit2" scheme="https://jongmin92.github.io/tags/Retrofit2/"/>
    
      <category term="OkHttp3" scheme="https://jongmin92.github.io/tags/OkHttp3/"/>
    
      <category term="Timeout" scheme="https://jongmin92.github.io/tags/Timeout/"/>
    
      <category term="LongPolling" scheme="https://jongmin92.github.io/tags/LongPolling/"/>
    
  </entry>
  
  <entry>
    <title>Retrofit2 + OkHttp3 사용하기</title>
    <link href="https://jongmin92.github.io/2018/01/29/Programming/android-retrofit2-okhttp3/"/>
    <id>https://jongmin92.github.io/2018/01/29/Programming/android-retrofit2-okhttp3/</id>
    <published>2018-01-29T12:00:00.000Z</published>
    <updated>2018-02-05T01:06:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>신입사원 프로젝트로 간만에 안드로이드 개발을 하게됐습니다. 서버와 통신하기위해 Square에서 만든 Retrofit 라이브러리를 사용했는데, 기존에 사용하던 버전(1.x)과 변경된 부분이 많아 새롭게 사용법을 알아보고자 합니다.<br>Retrofit 테스트는 <a href="https://reqres.in/" target="_blank" rel="noopener">API 테스트 사이트</a>를 통해서 Fake data를 가져오는 실습을 해보겠습니다. 해당 글의 대부분은 <a href="https://www.journaldev.com/13639/retrofit-android-example-tutorial" target="_blank" rel="noopener">Retrofit 2.0 Example</a>을 참고했습니다.</p><h2 id="retrofit2"><a href="#Retrofit2" class="headerlink" title="Retrofit2"></a>Retrofit2</h2><p>Retrofit 의외에 다른 라이브러리도 있지만, Retrofit을 사용하기로 한 이유는 성능과 간단한 구현방법 때문입니다. 아래 보시는것과 같이 응답속도가 매우 빠른것으로 나와있습니다. 더 자세한 비교는 <a href="http://instructure.github.io/blog/2013/12/09/volley-vs-retrofit/" target="_blank" rel="noopener">Android Async HTTP Clients: Volley vs Retrofit</a>에서 볼 수 있습니다.</p><p><img src="/images/post/2018-01-29/retrofit_benchmark.png" alt="Retrofit Benchmark"></p><p>Retrofit2는 기본적으로 OkHttp를 네트워킹 계층으로 활용하며 그 위에 구축됩니다.</p><p>Retrofit은 자동적으로 JSON 응답을 사전에 정의된 POJO를 통해 직렬화 할 수 있습니다. JSON을 직렬화 하기 위해서는 먼저 Gson converter가 필요합니다. <strong><code>build.gradle</code></strong>에 다음의 dependencies를 추가합니다.<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">compile</span> <span class="string">'com.squareup.retrofit2:retrofit:2.3.0'</span></span><br><span class="line"><span class="keyword">compile</span> <span class="string">'com.google.code.gson:gson:2.8.0'</span></span><br><span class="line"><span class="keyword">compile</span> <span class="string">'com.squareup.retrofit2:converter-gson:2.1.0'</span></span><br></pre></td></tr></table></figure></p><p>OkHttp는 이미 Retrofit2 모듈의 종속성에 포함되어 있어, 별도의 OkHttp 설정이 필요하다면 다음과 같이 Retrofit2에서 OkHttp 종속성을 제외해야 합니다.<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">compile</span>(<span class="string">'com.squareup.retrofit2:retrofit:2.3.0'</span>) &#123;</span><br><span class="line">    <span class="keyword">exclude</span> module: <span class="string">'okhttp'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">compile</span> <span class="string">'com.google.code.gson:gson:2.8.0'</span></span><br><span class="line"><span class="keyword">compile</span> <span class="string">'com.squareup.retrofit2:converter-gson:2.1.0'</span></span><br><span class="line"><span class="keyword">compile</span> <span class="string">'com.squareup.okhttp3:okhttp:3.9.1'</span></span><br><span class="line"><span class="keyword">compile</span> <span class="string">'com.squareup.okhttp3:logging-interceptor:3.9.1'</span></span><br><span class="line"><span class="comment">// logging-interceptor는 반환된 모든 응답에 대해 로그 문자열을 생성합니다.</span></span><br></pre></td></tr></table></figure></p><p>네트워크 사용을 위해서 <strong><code>AndroidManifest.xml</code></strong>에서 Internet Permission을 추가합니다.<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.INTERNET"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="okhttp-interceptors"><a href="#OkHttp-Interceptors" class="headerlink" title="OkHttp Interceptors"></a>OkHttp Interceptors</h2><p><strong><code>Interceptor</code></strong>는 OkHttp에 있는 강력한 메커니즘으로 호출을 모니터, 재 작성 및 재 시도를 할 수 있습니다. Interceptor는 크게 두 가지 카테고리로 분류할 수 있습니다.</p><ul><li><strong>Application Interceptors</strong> : Application Interceptor를 등록하려면 <code>OkHttpClient.Builder</code>에서 <code>addInterceptor()</code>를 호출해야 합니다.</li><li><strong>Network Interceptors</strong> : Network Interceptor를 등록하려면 <code>addInterceptor()</code> 대신 <code>addNetworkInterceptor()</code>를 추가해야 합니다.</li></ul><h2 id="retrofit-interface-설정"><a href="#Retrofit-Interface-설정" class="headerlink" title="Retrofit Interface 설정"></a>Retrofit Interface 설정</h2><h3 id="apiclientjava"><a href="#APIClient-java" class="headerlink" title="APIClient.java"></a>APIClient.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.journaldev.retrofitintro;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> okhttp3.OkHttpClient;</span><br><span class="line"><span class="keyword">import</span> okhttp3.logging.HttpLoggingInterceptor;</span><br><span class="line"><span class="keyword">import</span> retrofit2.Retrofit;</span><br><span class="line"><span class="keyword">import</span> retrofit2.converter.gson.GsonConverterFactory;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">APIClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Retrofit retrofit = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> Retrofit <span class="title">getClient</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        HttpLoggingInterceptor interceptor = <span class="keyword">new</span> HttpLoggingInterceptor();</span><br><span class="line">        interceptor.setLevel(HttpLoggingInterceptor.Level.BODY);</span><br><span class="line">        OkHttpClient client = <span class="keyword">new</span> OkHttpClient.Builder().addInterceptor(interceptor).build();</span><br><span class="line"></span><br><span class="line">        retrofit = <span class="keyword">new</span> Retrofit.Builder()</span><br><span class="line">                .baseUrl(<span class="string">"https://reqres.in/"</span>)</span><br><span class="line">                .addConverterFactory(GsonConverterFactory.create())</span><br><span class="line">                .client(client)</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> retrofit;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>getClient()</code> 메서드는 Retrofit 인터페이스를 설정할 때마다 호출됩니다. Retrofit은 <strong><code>@GET, @POST, @PUT, @DELETE, @PATCH or @HEAD</code></strong>와 같은 <strong>annotation</strong>을 통해 HTTP method를 이용합니다.</p><h3 id="apiinterfacejava"><a href="#APIInterface-java" class="headerlink" title="APIInterface.java"></a>APIInterface.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.journaldev.retrofitintro;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.journaldev.retrofitintro.pojo.MultipleResource;</span><br><span class="line"><span class="keyword">import</span> com.journaldev.retrofitintro.pojo.User;</span><br><span class="line"><span class="keyword">import</span> com.journaldev.retrofitintro.pojo.UserList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> retrofit2.Call;</span><br><span class="line"><span class="keyword">import</span> retrofit2.http.Body;</span><br><span class="line"><span class="keyword">import</span> retrofit2.http.Field;</span><br><span class="line"><span class="keyword">import</span> retrofit2.http.FormUrlEncoded;</span><br><span class="line"><span class="keyword">import</span> retrofit2.http.GET;</span><br><span class="line"><span class="keyword">import</span> retrofit2.http.POST;</span><br><span class="line"><span class="keyword">import</span> retrofit2.http.Query;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">APIInterface</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GET</span>(<span class="string">"api/unknown"</span>)</span><br><span class="line">    <span class="function">Call&lt;MultipleResource&gt; <span class="title">doGetListResources</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@POST</span>(<span class="string">"api/users"</span>)</span><br><span class="line">    <span class="function">Call&lt;User&gt; <span class="title">createUser</span><span class="params">(@Body User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GET</span>(<span class="string">"api/users?"</span>)</span><br><span class="line">    <span class="function">Call&lt;UserList&gt; <span class="title">doGetUserList</span><span class="params">(@Query(<span class="string">"page"</span>)</span> String page)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@FormUrlEncoded</span></span><br><span class="line">    <span class="meta">@POST</span>(<span class="string">"api/users?"</span>)</span><br><span class="line">    <span class="function">Call&lt;UserList&gt; <span class="title">doCreateUserWithField</span><span class="params">(@Field(<span class="string">"name"</span>)</span> String name, @<span class="title">Field</span><span class="params">(<span class="string">"job"</span>)</span> String job)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위의 클래스에서 Annotation을 통해 테스트 HTTP request를 작성했습니다. 해당 API로 <a href="https://reqres.in/" target="_blank" rel="noopener">이곳</a>을 통해 테스트 할 것입니다.</p><p><code>@GET(&quot;api/unknown&quot;)</code>은  <code>doGetListResources()</code>를 호출합니다.<br><code>doGetListResources()</code>은 메서드 이름입니다. <code>MultipleResource.java</code>는 응답 객체의 Model POJO 클래스로서 Response parameter를 각각의 변수에 매핑하는 데 사용됩니다. 이러한 POJO 클래스는 메소드 리턴 유형으로 동작합니다.</p><h3 id="multipleresourcesjava"><a href="#MultipleResources-java" class="headerlink" title="MultipleResources.java"></a>MultipleResources.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.journaldev.retrofitintro.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.google.gson.annotations.SerializedName;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MultipleResource</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SerializedName</span>(<span class="string">"page"</span>)</span><br><span class="line">    <span class="keyword">public</span> Integer page;</span><br><span class="line">    <span class="meta">@SerializedName</span>(<span class="string">"per_page"</span>)</span><br><span class="line">    <span class="keyword">public</span> Integer perPage;</span><br><span class="line">    <span class="meta">@SerializedName</span>(<span class="string">"total"</span>)</span><br><span class="line">    <span class="keyword">public</span> Integer total;</span><br><span class="line">    <span class="meta">@SerializedName</span>(<span class="string">"total_pages"</span>)</span><br><span class="line">    <span class="keyword">public</span> Integer totalPages;</span><br><span class="line">    <span class="meta">@SerializedName</span>(<span class="string">"data"</span>)</span><br><span class="line">    <span class="keyword">public</span> List&lt;Datum&gt; data = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Datum</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@SerializedName</span>(<span class="string">"id"</span>)</span><br><span class="line">        <span class="keyword">public</span> Integer id;</span><br><span class="line">        <span class="meta">@SerializedName</span>(<span class="string">"name"</span>)</span><br><span class="line">        <span class="keyword">public</span> String name;</span><br><span class="line">        <span class="meta">@SerializedName</span>(<span class="string">"year"</span>)</span><br><span class="line">        <span class="keyword">public</span> Integer year;</span><br><span class="line">        <span class="meta">@SerializedName</span>(<span class="string">"pantone_value"</span>)</span><br><span class="line">        <span class="keyword">public</span> String pantoneValue;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>@SerializedName</code> 어노테이션은 JSON 응답에서 각각의 필드를 구분하기 위해 사용합니다.</p><p><strong># Tip)</strong> <a href="http://www.jsonschema2pojo.org/" target="_blank" rel="noopener">jsonschema2pojo</a> 에서 json 응답의 구조를 바탕으로 해당 응답에 대한 POJO 클래스를 쉽게 만들 수 있습니다.</p><p><img src="/images/post/2018-01-29/jsonschema2pojo.png" alt="Json Schema -&gt; POJO"></p><p>POJO 클래스는 Retrofit Call 클래스로 래핑됩니다. (JSONArray는 POJO 클래스의 객체 목록으로 직렬화됩니다.)</p><p><strong>Method Parameters</strong> : 메서드 내에서 전달할 수 있는 다양한 매개 변수 옵션이 있습니다.</p><ul><li><strong>@Body</strong> - request body로 Java 객체를 전달합니다.</li><li><strong>@Url</strong> - 동적인 URL이 필요할때 사용합니다.</li><li><strong>@Query</strong> - 쿼리를 추가할 수 있으며, 쿼리를 URL 인코딩하려면 다음과 같이 작성합니다.<br>@Query(value = “auth_token”,encoded = true) String auth_token</li><li><strong>@Field</strong> - POST에서만 동작하며 form-urlencoded로 데이터를 전송합니다. 이 메소드에는 @FormUrlEncoded 어노테이션이 추가되어야 합니다.</li></ul><h2 id="android-retrofit-예제-프로젝트-구조"><a href="#Android-Retrofit-예제-프로젝트-구조" class="headerlink" title="Android Retrofit 예제 프로젝트 구조"></a>Android Retrofit 예제 프로젝트 구조</h2><p><img src="/images/post/2018-01-29/android-retrofit-project-structure.png" alt="Android Retrofit 예제 프로젝트 구조"></p><p>pojo 패키지는 <strong>APIInterface.java</strong> 클래스에 정의된 각각의 API 요청 응답에 대한 4가지 모델 클래스를 정의하고 있습니다.</p><h3 id="userjava"><a href="#User-java" class="headerlink" title="User.java"></a>User.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.journaldev.retrofitintro.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.google.gson.annotations.SerializedName;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SerializedName</span>(<span class="string">"name"</span>)</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="meta">@SerializedName</span>(<span class="string">"job"</span>)</span><br><span class="line">    <span class="keyword">public</span> String job;</span><br><span class="line">    <span class="meta">@SerializedName</span>(<span class="string">"id"</span>)</span><br><span class="line">    <span class="keyword">public</span> String id;</span><br><span class="line">    <span class="meta">@SerializedName</span>(<span class="string">"createdAt"</span>)</span><br><span class="line">    <span class="keyword">public</span> String createdAt;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String name, String job)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.job = job;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위 클래스는 <strong>createUser()</strong> 메서드에 대한 응답을 위해 사용합니다.</p><h3 id="userlistjava"><a href="#UserList-java" class="headerlink" title="UserList.java"></a>UserList.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.journaldev.retrofitintro.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.google.gson.annotations.SerializedName;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserList</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SerializedName</span>(<span class="string">"page"</span>)</span><br><span class="line">    <span class="keyword">public</span> Integer page;</span><br><span class="line">    <span class="meta">@SerializedName</span>(<span class="string">"per_page"</span>)</span><br><span class="line">    <span class="keyword">public</span> Integer perPage;</span><br><span class="line">    <span class="meta">@SerializedName</span>(<span class="string">"total"</span>)</span><br><span class="line">    <span class="keyword">public</span> Integer total;</span><br><span class="line">    <span class="meta">@SerializedName</span>(<span class="string">"total_pages"</span>)</span><br><span class="line">    <span class="keyword">public</span> Integer totalPages;</span><br><span class="line">    <span class="meta">@SerializedName</span>(<span class="string">"data"</span>)</span><br><span class="line">    <span class="keyword">public</span> List&lt;Datum&gt; data = <span class="keyword">new</span> ArrayList();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Datum</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@SerializedName</span>(<span class="string">"id"</span>)</span><br><span class="line">        <span class="keyword">public</span> Integer id;</span><br><span class="line">        <span class="meta">@SerializedName</span>(<span class="string">"first_name"</span>)</span><br><span class="line">        <span class="keyword">public</span> String first_name;</span><br><span class="line">        <span class="meta">@SerializedName</span>(<span class="string">"last_name"</span>)</span><br><span class="line">        <span class="keyword">public</span> String last_name;</span><br><span class="line">        <span class="meta">@SerializedName</span>(<span class="string">"avatar"</span>)</span><br><span class="line">        <span class="keyword">public</span> String avatar;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="createuserresponsejava"><a href="#CreateUserResponse-java" class="headerlink" title="CreateUserResponse.java"></a>CreateUserResponse.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.journaldev.retrofitintro.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.google.gson.annotations.SerializedName;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CreateUserResponse</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SerializedName</span>(<span class="string">"name"</span>)</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="meta">@SerializedName</span>(<span class="string">"job"</span>)</span><br><span class="line">    <span class="keyword">public</span> String job;</span><br><span class="line">    <span class="meta">@SerializedName</span>(<span class="string">"id"</span>)</span><br><span class="line">    <span class="keyword">public</span> String id;</span><br><span class="line">    <span class="meta">@SerializedName</span>(<span class="string">"createdAt"</span>)</span><br><span class="line">    <span class="keyword">public</span> String createdAt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="mainactivityjava"><a href="#MainActivity-java" class="headerlink" title="MainActivity.java"></a>MainActivity.java</h3><p><strong><code>MainActivity.java</code></strong>는 Interface 클래스에 정의된 각각의 API를 호출하고 그 결과를 Toast와 TextView를 통해 표시하고 있습니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.journaldev.retrofitintro;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"><span class="keyword">import</span> android.widget.TextView;</span><br><span class="line"><span class="keyword">import</span> android.widget.Toast;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.journaldev.retrofitintro.pojo.CreateUserResponse;</span><br><span class="line"><span class="keyword">import</span> com.journaldev.retrofitintro.pojo.MultipleResource;</span><br><span class="line"><span class="keyword">import</span> com.journaldev.retrofitintro.pojo.User;</span><br><span class="line"><span class="keyword">import</span> com.journaldev.retrofitintro.pojo.UserList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> retrofit2.Call;</span><br><span class="line"><span class="keyword">import</span> retrofit2.Callback;</span><br><span class="line"><span class="keyword">import</span> retrofit2.Response;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    TextView responseText;</span><br><span class="line">    APIInterface apiInterface;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        responseText = (TextView) findViewById(R.id.responseText);</span><br><span class="line">        apiInterface = APIClient.getClient().create(APIInterface.class);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         GET List Resources</span></span><br><span class="line"><span class="comment">         **/</span></span><br><span class="line">        Call&lt;MultipleResource&gt; call = apiInterface.doGetListResources();</span><br><span class="line">        call.enqueue(<span class="keyword">new</span> Callback&lt;MultipleResource&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(Call&lt;MultipleResource&gt; call, Response&lt;MultipleResource&gt; response)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                Log.d(<span class="string">"TAG"</span>,response.code()+<span class="string">""</span>);</span><br><span class="line"></span><br><span class="line">                String displayResponse = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">                MultipleResource resource = response.body();</span><br><span class="line">                Integer text = resource.page;</span><br><span class="line">                Integer total = resource.total;</span><br><span class="line">                Integer totalPages = resource.totalPages;</span><br><span class="line">                List&lt;MultipleResource.Datum&gt; datumList = resource.data;</span><br><span class="line"></span><br><span class="line">                displayResponse += text + <span class="string">" Page\n"</span> + total + <span class="string">" Total\n"</span> + totalPages + <span class="string">" Total Pages\n"</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span> (MultipleResource.Datum datum : datumList) &#123;</span><br><span class="line">                    displayResponse += datum.id + <span class="string">" "</span> + datum.name + <span class="string">" "</span> + datum.pantoneValue + <span class="string">" "</span> + datum.year + <span class="string">"\n"</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                responseText.setText(displayResponse);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Call&lt;MultipleResource&gt; call, Throwable t)</span> </span>&#123;</span><br><span class="line">                call.cancel();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         Create new user</span></span><br><span class="line"><span class="comment">         **/</span></span><br><span class="line">        User user = <span class="keyword">new</span> User(<span class="string">"morpheus"</span>, <span class="string">"leader"</span>);</span><br><span class="line">        Call&lt;User&gt; call1 = apiInterface.createUser(user);</span><br><span class="line">        call1.enqueue(<span class="keyword">new</span> Callback&lt;User&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(Call&lt;User&gt; call, Response&lt;User&gt; response)</span> </span>&#123;</span><br><span class="line">                User user1 = response.body();</span><br><span class="line"></span><br><span class="line">                Toast.makeText(getApplicationContext(), user1.name + <span class="string">" "</span> + user1.job + <span class="string">" "</span> + user1.id + <span class="string">" "</span> + user1.createdAt, Toast.LENGTH_SHORT).show();</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Call&lt;User&gt; call, Throwable t)</span> </span>&#123;</span><br><span class="line">                call.cancel();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         GET List Users</span></span><br><span class="line"><span class="comment">         **/</span></span><br><span class="line">        Call&lt;UserList&gt; call2 = apiInterface.doGetUserList(<span class="string">"2"</span>);</span><br><span class="line">        call2.enqueue(<span class="keyword">new</span> Callback&lt;UserList&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(Call&lt;UserList&gt; call, Response&lt;UserList&gt; response)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">                UserList userList = response.body();</span><br><span class="line">                Integer text = userList.page;</span><br><span class="line">                Integer total = userList.total;</span><br><span class="line">                Integer totalPages = userList.totalPages;</span><br><span class="line">                List&lt;UserList.Datum&gt; datumList = userList.data;</span><br><span class="line">                Toast.makeText(getApplicationContext(), text + <span class="string">" page\n"</span> + total + <span class="string">" total\n"</span> + totalPages + <span class="string">" totalPages\n"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span> (UserList.Datum datum : datumList) &#123;</span><br><span class="line">                    Toast.makeText(getApplicationContext(), <span class="string">"id : "</span> + datum.id + <span class="string">" name: "</span> + datum.first_name + <span class="string">" "</span> + datum.last_name + <span class="string">" avatar: "</span> + datum.avatar, Toast.LENGTH_SHORT).show();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Call&lt;UserList&gt; call, Throwable t)</span> </span>&#123;</span><br><span class="line">                call.cancel();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         POST name and job Url encoded.</span></span><br><span class="line"><span class="comment">         **/</span></span><br><span class="line">        Call&lt;UserList&gt; call3 = apiInterface.doCreateUserWithField(<span class="string">"morpheus"</span>,<span class="string">"leader"</span>);</span><br><span class="line">        call3.enqueue(<span class="keyword">new</span> Callback&lt;UserList&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(Call&lt;UserList&gt; call, Response&lt;UserList&gt; response)</span> </span>&#123;</span><br><span class="line">                UserList userList = response.body();</span><br><span class="line">                Integer text = userList.page;</span><br><span class="line">                Integer total = userList.total;</span><br><span class="line">                Integer totalPages = userList.totalPages;</span><br><span class="line">                List&lt;UserList.Datum&gt; datumList = userList.data;</span><br><span class="line">                Toast.makeText(getApplicationContext(), text + <span class="string">" page\n"</span> + total + <span class="string">" total\n"</span> + totalPages + <span class="string">" totalPages\n"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span> (UserList.Datum datum : datumList) &#123;</span><br><span class="line">                    Toast.makeText(getApplicationContext(), <span class="string">"id : "</span> + datum.id + <span class="string">" name: "</span> + datum.first_name + <span class="string">" "</span> + datum.last_name + <span class="string">" avatar: "</span> + datum.avatar, Toast.LENGTH_SHORT).show();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Call&lt;UserList&gt; call, Throwable t)</span> </span>&#123;</span><br><span class="line">                call.cancel();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>apiInterface = APIClient.getClient().create(APIInterface.class);</code>는 APIClient를 인스턴스화 하기위해 사용됩니다.<br>API 응답에 Model 클래스를 매핑하기 위해서는 다음과 같이 사용합니다.<br><code>MultipleResource resource = response.body();</code></p><p>이제 앱을 실행하면 각 API를 호출하고 이에 따라 토스트 메시지를 표시합니다.</p><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="http://instructure.github.io/blog/2013/12/09/volley-vs-retrofit/" target="_blank" rel="noopener">Volley vs Retrofit</a></li><li><a href="https://www.journaldev.com/13629/okhttp-android-example-tutorial" target="_blank" rel="noopener">OkHttp Example</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;신입사원 프로젝트로 간만에 안드로이드 개발을 하게됐습니다. 서버와 통신하기위해 Square에서 만든 Retrofit 라이브러리를 사용했는데, 기존에 사용하던 버전(1.x)과 변경된 부분이 많아 새롭게 사용법을 알아보고자 합니다.&lt;br&gt;Retrof
      
    
    </summary>
    
      <category term="Programming" scheme="https://jongmin92.github.io/categories/Programming/"/>
    
    
      <category term="Android" scheme="https://jongmin92.github.io/tags/Android/"/>
    
      <category term="Retrofit2" scheme="https://jongmin92.github.io/tags/Retrofit2/"/>
    
      <category term="OkHttp3" scheme="https://jongmin92.github.io/tags/OkHttp3/"/>
    
  </entry>
  
  <entry>
    <title>OAuth 2.0과 네이버로 로그인</title>
    <link href="https://jongmin92.github.io/2018/01/20/Programming/android-naver-login/"/>
    <id>https://jongmin92.github.io/2018/01/20/Programming/android-naver-login/</id>
    <published>2018-01-20T06:30:00.000Z</published>
    <updated>2018-02-05T01:06:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>안드로이드에서 <strong>&lt;네이버 아이디로 로그인&gt;</strong> 기능을 구현하며 <strong>OAuth 2.0</strong>에 대해 알아보고, 라이브러리를 적용하는 방법에 대해 알아보겠습니다.</p><h2 id="oauth-20"><a href="#OAuth-2-0" class="headerlink" title="OAuth 2.0"></a>OAuth 2.0</h2><p>OAuth는 <strong><code>인증(Authentication)과 허가(Authorization)</code></strong>을 위한 표준 프로토콜로, 사용자가 Facebook이나 트위터 같은 인터넷 서비스의 기능을 다른 애플리케이션(데스크톱, 웹, 모바일 등)에서도 사용할 수 있게 한 것입니다.</p><p>Facebook이나 트위터의 기능을 이용하기 위해 사용자가 반드시 Facebook이나 트위터에 로그인해야 하는 것이 아니라, 별도의 인증 절차를 거치면 다른 서비스에서 Facebook과 트위터의 기능을 이용할 수 있게 됩니다. 이런 방식은 Facebook이나 트위터 같은 서비스 제공자뿐만 아니라 사용자와 여러 인터넷 서비스 업체 모두에 이익이 되는 생태계를 구축하는데 기여했습니다.<br>이 방식에서 사용하는 <strong>인증 절차가 <code>OAuth</code></strong>입니다.</p><p>OAuth를 이용하면 이 인증을 공유하는 애플리케이션끼리는 별도의 인증이 필요없습니다. 따라서 여러 애플리케이션을 통합하여 사용하는 것이 가능하게 됩니다.</p><p><strong>OAuth 2.0은 authorization(허가, 승인)을 위한 산업 표준 프로토콜</strong>입니다. OAuth 2.0 전에 OAuth 1.0이 만들어져 사용되었지만 웹, 데스크탑, 모바일 등의 어플리케이션의 authorization flow(권한 흐름)을 보다 단순화 하는데 초점이 맞춰졌습니다.<br>(OAuth 1.0에서는 Acess Token을 받으면 계속 사용이 가능했습니다. 그러나 OAuth 2.0에서는 보안 강화를 위해 Access Token의 Life-time을 지정할 수 있게됐고, Life-time이 만료되면 Refresh Token을 통해 Access Token을 재발급을 받아야 합니다.)</p><h2 id="주의사항"><a href="#주의사항" class="headerlink" title="주의사항"></a>주의사항</h2><p><strong><code>로그인과 OAuth는 반드시 분리해서 이해해야 합니다.</code></strong> 아래의 예시를 통해 그 이유를 생각해봅시다.</p><blockquote><p>사원증을 이용해 출입할 수 있는 회사를 생각해 보자. 그런데 외부 손님이 그 회사에 방문할 일이 있다. 회사 사원이 건물에 출입하는 것이 로그인이라면 OAuth는 방문증을 수령한 후 회사에 출입하는 것에 비유할 수 있다. 방문증이란 사전에 정해진 곳만 다닐 수 있도록 하는 것이니, ‘방문증’을 가진 사람이 출입할 수 있는 곳과 ‘사원증’을 가진 사람이 출입할 수 있는 곳은 다르다. 역시 직접 서비스에 로그인한 사용자와 OAuth를 이용해 권한을 인증받은 사용자는 할 수 있는 일이 다르다.</p></blockquote><h2 id="구성요소"><a href="#구성요소" class="headerlink" title="구성요소"></a>구성요소</h2><ul><li>사용자(Resource Owner) : Service Provider에 계정을 가지고 있으면서, Client를 이용하려는 사용자</li><li>소비자(Client) : OAuth 인증을 사용해 Service Provider의 기능을 사용하려는 애플리케이션이나 웹 서비스</li><li>API 서버(Resource Server) : OAuth를 사용하는 Open API를 제공하는 서비스</li><li>권한 (Authroization Server) : OAuth 인증 서버</li><li>접근 토큰(Access Token) : 인증 후 Client가 Resource Server의 자원에 접근하기 위한 키를 포함한 값</li><li>갱신 토큰(Refresh Token) : 유효기간이 지난 Access Token을 갱신하기 위해 사용되는 값</li></ul><h2 id="인증과정"><a href="#인증과정" class="headerlink" title="인증과정"></a>인증과정</h2><p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1fnn3785mw7j31460ro435.jpg" alt="OAuth 2.0 과정"></p><hr><h2 id="네이버-아이디로-로그인"><a href="#네이버-아이디로-로그인" class="headerlink" title="네이버 아이디로 로그인"></a>네이버 아이디로 로그인</h2><p><strong><code>&lt;네이버 아이디로 로그인&gt;</code>은 OAuth 2.0 기반의 사용자 인증 기능을 제공해 네이버가 아닌 다른 서비스에서 네이버의 사용자 인증 기능을 이용할 수 있게 하는 서비스입니다.</strong> 별도의 아이디나 비밀번호를 기억할 필요 없이 네이버 아이디로 간편하고 안전하게 서비스에 로그인할 수 있어, 가입이 귀찮거나 가입한 계정이 생각나지 않아 서비스를 이탈하는 사용자를 잡을 수 있습니다.</p><p>&lt;네이버 아이디로 로그인&gt;을 통해 로그인하는 기본 절차는 다음과 같습니다.</p><ol><li>로그인 (네이버 앱이 설치되어 있다면 네이버 앱의 간편 로그인 기능으로 로그인, 네이버 앱이 설치되지 않았다면 애플리케이션에서 인앱 브라우저가 실행되고 네이버 로그인 화면으로 이동한다.)</li><li>사용자가 네이버 아이디로 로그인하면 사용자 정보에 동의하는 화면으로 이동한다.</li><li>사용자가 정보 제공에 동의하면 <strong>콜백 URL로 애플리케이션에 <code>접근 토큰(access token)</code>이 발급된다.</strong> 발급받은 접근 토큰을 이용해 OAuth 2.0을 지원하는 네이버의 오픈 API를 사용하거나 사용자의 정보를 얻어 올 수 있다.</li></ol><h2 id="특징"><a href="#특징" class="headerlink" title="특징"></a>특징</h2><p>네이버 아이디로 로그인한 사용자의 이름, 메일 주소, 별명, 프로필 사진, 생일, 연령대, 성별 등을 API로 간단하게 조회할 수 있습니다.</p><h2 id="적용-칠자"><a href="#적용-칠자" class="headerlink" title="적용 칠자"></a>적용 칠자</h2><ol><li>애플리케이션 등록<br>네이버 아이디로 로그인을 적용하기 위해 애플리케이션을 등록하고 <strong>클라이언트 아이디와 클라이언트 시크릿 키</strong>를 발급받는다.</li><li>애플리케이션 개발<br>네이버 아이디로 로그인을 이용하기 위한 정보를 확인하고 등록한 환경에 맞는 개발가이드를 참고해 애플리케이션을 개발한다.<br><a href="https://developers.naver.com/docs/login/android/" target="_blank" rel="noopener">- Android 튜토리얼 참고</a></li><li>서비스 적용<br>개발을 완료하면 서비스에 네이버 아이디로 로그인을 적용한다.</li></ol><h2 id="결과"><a href="#결과" class="headerlink" title="결과"></a>결과</h2><p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1fnn43ymkojj30u01hcdhh.jpg" alt="네이버 아이디로 로그인 전"><br><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1fnn449h4vyj30u01hcdif.jpg" alt="네이버 아이디로 로그인 후"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;안드로이드에서 &lt;strong&gt;&amp;lt;네이버 아이디로 로그인&amp;gt;&lt;/strong&gt; 기능을 구현하며 &lt;strong&gt;OAuth 2.0&lt;/strong&gt;에 대해 알아보고, 라이브러리를 적용하는 방법에 대해 알아보겠습니다.&lt;/p&gt;
&lt;h2 id=&quot;oauth
      
    
    </summary>
    
      <category term="Programming" scheme="https://jongmin92.github.io/categories/Programming/"/>
    
    
      <category term="Android" scheme="https://jongmin92.github.io/tags/Android/"/>
    
      <category term="OAuth" scheme="https://jongmin92.github.io/tags/OAuth/"/>
    
      <category term="OAuth 2.0" scheme="https://jongmin92.github.io/tags/OAuth-2-0/"/>
    
      <category term="Naver Login" scheme="https://jongmin92.github.io/tags/Naver-Login/"/>
    
  </entry>
  
  <entry>
    <title>신입 개발자의 취준 후기</title>
    <link href="https://jongmin92.github.io/2017/12/14/Etc/prepare-for-employment/"/>
    <id>https://jongmin92.github.io/2017/12/14/Etc/prepare-for-employment/</id>
    <published>2017-12-14T07:00:00.000Z</published>
    <updated>2018-02-05T01:06:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>8월을 마지막으로 1년 2개월의 스타트업 생활을 마치고, 이번 하반기 신입 채용과정을 거쳐 3곳에 합격했습니다. 퇴사 후 부랴부랴 취업준비를 시작했는데, 이번 포스팅에서는 취업준비를 하며 <strong><code>어떤 식으로 전공 지식과 직무 면접을 준비했는지 다뤄보겠습니다!</code></strong></p><h3 id="자료구조와-알고리즘"><a href="#자료구조와-알고리즘" class="headerlink" title="자료구조와 알고리즘"></a>자료구조와 알고리즘</h3><p>제일 먼저 준비했던 과목은 자료구조와 알고리즘이었습니다. 제 경우 자료구조와 알고리즘이 다른 전공에 비해 많이 부족해서 가장 먼저 공부를 시작했습니다.<br>대부분 기업이 서류 통과 후 바로 <code>온라인 코딩 테스트</code> 과정이 있기 때문에, 처음부터 차근차근 이론을 공부하고 문제를 푸는것은 시간상 불가능하다고 생각했습니다. 그래서 <a href="https://code.plus/course/19" target="_blank" rel="noopener">코드플러스 - SW 역량 테스트 대비</a> 강의를 통해 자주 출제되는 알고리즘들의 유형을 빠르게 익히고 비슷한 문제를 풀어보는 연습을 했습니다.</p><p><strong>저는 대표적인 유형의 알고리즘 같은 경우는 코드를 외울 정도로 자주 봤습니다. 사람마다 다르겠지만 제 경우에는 어느정도 문제의 틀이나 해법을 외워두니 비슷한 유형의 문제는 빠르게 풀 수 있었습니다.</strong> 처음 코딩 테스트를 준비하시는 분이라면 저처럼 대표적인 유형의 해법 정도는 외워두는게 도움이 많이 될 것 같다고 생각합니다. (당연히 이해를 바탕으로 외워야 합니다.)</p><p>자료구조와 알고리즘의 경우 온라인 코딩 테스트를 통과하더라도 다음 절차인 <code>(직무)면접</code>에서도 빠지지 않고 등장하는 과목입니다. <strong>저도 온라인 코딩 테스트를 통과한 후에는 방향을 바꿔서 문제를 많이 풀기보다는 자료구조의 공부에 조금 더 초점을 맞췄습니다.</strong> 이 과정에서는 <a href="http://www.kocw.net/home/search/kemView.do?kemId=1148815" target="_blank" rel="noopener">부경대학교 권오흠 교수님 - 알고리즘</a> 강의가 큰 도움이 됐습니다.</p><h3 id="운영체제"><a href="#운영체제" class="headerlink" title="운영체제"></a>운영체제</h3><p>운영체제의 경우 학부생 때 가장 재밌게 공부했던 과목중 하나이다 보니 어느정도 자신있었습니다. <a href="http://www.kocw.net/home/search/kemView.do?kemId=1046323&amp;ar=pop" target="_blank" rel="noopener">이화여자대학교 반효경 교수님 - 운영체제</a> 강의를 듣고 <a href="http://book.naver.com/bookdb/book_detail.nhn?bid=4392911" target="_blank" rel="noopener">운영 체제와 정보기술의 원리</a> 책을 통해서 복습하며 빠르게 개념을 다잡았습니다.</p><p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1fmge157ht0j305k086glq.jpg" alt=""></p><p>운영체제 과목의 경우 학부생 때 공부했을 때와는 다른 느낌이었습니다. 특히 <strong>스레드와 프로세스, 경쟁 상태 부분은 제가 주로 사용하는 Node.js의 특징을 이해하는데 큰 도움이 되었습니다.</strong> 단순히 개념공부로 끝나는 것이 아닌 실제 이러한 개념이 어떤 환경에서 어떻게 사용되고 있는지 그리고 그로 인해 어떠한 장단점이 있는지를 연관지어 생각해볼 수 있었습니다.</p><h3 id="데이터베이스"><a href="#데이터베이스" class="headerlink" title="데이터베이스"></a>데이터베이스</h3><p>데이터베이스는 <strong>아키텍처 구성(다중화), 트랜잭션과 동시성 제어</strong>에 중점을 맞춰 공부했습니다. 당연히 기본적인 개념은 숙지하였고, 제가 했던 프로젝트라던가 어떤 서비스를 구축함에 있어 어떻게 아키텍처를 구성해야 하는지 고민해본것이 면접에 가서 도움이 많이 되었습니다.<br>위와 같은 내용을 공부함에 있어 <a href="http://book.naver.com/bookdb/book_detail.nhn?bid=11154846" target="_blank" rel="noopener">데이터베이스 첫걸음</a>이라는 책이 큰 도움이 되었습니다.</p><p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1fmm0o8hoguj30cz0goq6f.jpg" alt=""></p><h3 id="그-외-전산학"><a href="#그-외-전산학" class="headerlink" title="그 외 전산학"></a>그 외 전산학</h3><p>저는 <a href="https://github.com/JaeYeopHan/Interview_Question_for_Beginner" target="_blank" rel="noopener">Tech Interview For Beginner</a>를 통해서 위의 전공들 뿐만 아니라 그 외 과목들에서 필요한 부분을 공부했습니다. 예비 개발자들의 기술 면접 준비를 위한 자료를 정리해놓은 Repository로서 신입 개발자로 취업을 준비하시는 분이라면 많은 도움을 받으실 수 있을 것입니다.</p><h3 id="나만의-강점"><a href="#나만의-강점" class="headerlink" title="나만의 강점"></a>나만의 강점</h3><p>제가 이번 하반기에 3곳에 최종합격 할 수 있었던 저만의 강점을 생각해 본다면 크게 두가지인것 같습니다.<br><strong><code>첫 번째로 개인 블로그와, 개인 프로젝트입니다.</code></strong> 저는 면접을 보며 개발에 대한 애착 혹은 자기 자기계발에 관련된 질문에는 항상 블로그와 개인 프로젝트를 통해 어필했습니다. 어떤 행동이나 습관으로 끝나는 것이 아닌 그로인한 결과물을 갖고 어필을 했던것이 큰 도움이 되었습니다.<br><strong><code>두 번째는 서비스를 직접 개발하고 운영해보았다는 점입니다.</code></strong> 1년 2개월 동안 스타트업에서 동료들과 함께 서비스를 기획하고 개발하고 운영했던 경험이 가장 큰 도움이 되었습니다. 단순히 학교 과제나 동아리 활동에서 결과물을 내는 것이 아니라, <strong>실제 사용자에게 서비스를 하기 위한 개발은 여러가지 면에서 차이가 있다고 느꼈습니다.</strong> 그런 면에서 항상 고민하고 선배 개발자 분과 이야기를 자주 나눴습니다. 제가 생각하고 고민한 방법에 대해 말씀드리고 그로 인해 다시 생길 수 있는 문제점을 생각해보고 개선해 나가는… 이런 과정들이 면접에 가서 가장 큰 도움이 되었습니다. 실제 면접에 가도 면접관 분들은 지원자가 했던 프로젝트에 대해 물어보시면서 추가적으로 어떤 문제점을 추가로 주고, 이를 면접자가 자신의 전산지식을 바탕으로 해결해가는 과정을 많이 보시는것 같습니다.</p><h3 id="마지막으로-드리고싶은-말씀"><a href="#마지막으로-드리고싶은-말씀" class="headerlink" title="마지막으로 드리고싶은 말씀"></a>마지막으로 드리고싶은 말씀</h3><p>간혹 제 주변 친구들 혹은 지인들이 물어봅니다. 신입 개발자로 취업하기 위해서는 어떤것을 준비해야 하는지, 내가 지금 프로젝트를 더 해야하는지, 영어 점수를 더 올려야 하는지…<br><strong>저는 먼저, 꼭 기본적인 전산학에 대한 공부부터 하시기를 추천드립니다. 결국에는 내가 프로젝트를 하고 그 프로젝트를 자소서에 적더라도, 면접에 가서는 면접관님들은 프로젝트로부터 기본적인 전산학에 관련된 내용을 요구합니다. 그렇기 때문에 꼭 기본적인 전산학 공부를 탄탄히 하시길 바랍니다. 그 후에는 자신이 했던 프로젝트로부터 관련된 전산학 내용을 꼭 정리해보셨으면 좋겠습니다.</strong> (예를 들어, Node.js를 사용했다면 Node.js의 특징인 비동기 방식에 대해 운영체제 관점에서 설명할 수 있어야 합니다.)<br>이 부분만 잘 되었다면 면접에서 어려운 질문을 받더라도, 면접관님과 대화를 하면서 문제에 접근하고 조금씩은 풀어갈 수 있는 능력이 생길거라고 생각합니다.</p><h3 id="주두다지-서버개발자-양성-교육-프로그램"><a href="#주-두다지-서버개발자-양성-교육-프로그램" class="headerlink" title="(주)두다지 서버개발자 양성 교육 프로그램"></a>(주)두다지 서버개발자 양성 교육 프로그램</h3><p>두다지의 <strong><code>서버개발자 양성 교육 프로그램</code></strong>은 제가 스타트업에 있을때 많은 도움을 받았던 선배 개발자분께서 기획하고 진행하시는 프로그램입니다. 프로그램을 운영하고 계시는 홍석환 멘토님은 제가 대학생일때 멘토 멘티로 만나 스타트업에서의 생활, 그리고 취업을 준비하면서도 계속해서 많은 도움을 주셨습니다.<br><strong>스스로 다시 한 번 전산학 내용을 정리할 수 있는 시간을 가지며 기본을 탄탄히 하고, 학생때는 단순히 학점만을 위해 공부하며 키워온 제 전산학 지식을 쌓아왔다면 실제 실무에서는 어떻게 사용되는지, 필요로 하는지 다양한 경험을 통해 체감할 수 있게 해주셨습니다.</strong><br>제가 과거에 멘티로서 선배 개발자분께 배웠던 과정은 <a href="https://sites.google.com/view/dudaji/study" target="_blank" rel="noopener">교육 과정</a>에서 확인해 볼 수 있습니다. 교육 과정의 더 자세한 내용과 과정을 수료한 멘티들의 후기도 <a href="https://sites.google.com/view/dudaji/meetup" target="_blank" rel="noopener">이곳</a>에서 확인할 수 있습니다.<br>제가 생각하는 신입개발자에게 필요한 것은 단순히 전산지식을 얼마나 많이 아느냐가 아니라, 내가 앞으로 개발하면서 그동안 공부 했던 전산지식을 바탕으로 얼마나 잘 이해하며 활용할 수 있는지 그 능력이 필요하다고 생각합니다. 두다지 교육 프로그램은 그 능력을 키울 수 있도록 방향을 잡아줄 것입니다. 관심이 있으신분은 주저하지 마시고 꼭 연락을 드려보세요!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;8월을 마지막으로 1년 2개월의 스타트업 생활을 마치고, 이번 하반기 신입 채용과정을 거쳐 3곳에 합격했습니다. 퇴사 후 부랴부랴 취업준비를 시작했는데, 이번 포스팅에서는 취업준비를 하며 &lt;strong&gt;&lt;code&gt;어떤 식으로 전공 지식과 직무 면
      
    
    </summary>
    
    
      <category term="신입 개발자" scheme="https://jongmin92.github.io/tags/%EC%8B%A0%EC%9E%85-%EA%B0%9C%EB%B0%9C%EC%9E%90/"/>
    
      <category term="취업 준비" scheme="https://jongmin92.github.io/tags/%EC%B7%A8%EC%97%85-%EC%A4%80%EB%B9%84/"/>
    
  </entry>
  
  <entry>
    <title>힙 응용 - 우선순위 큐 (Priority queue)</title>
    <link href="https://jongmin92.github.io/2017/11/20/Algorithm/Concept/priority-queue/"/>
    <id>https://jongmin92.github.io/2017/11/20/Algorithm/Concept/priority-queue/</id>
    <published>2017-11-20T09:00:00.000Z</published>
    <updated>2018-02-05T01:06:40.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="우선순위-큐-priority-queue-란"><a href="#우선순위-큐-Priority-queue-란" class="headerlink" title="우선순위 큐 (Priority queue) 란?"></a>우선순위 큐 (Priority queue) 란?</h3><p>큐는 여러개의 데이터를 넣을 수 있는 자료구조 입니다. 데이터가 넣고 뺄때는 <strong>First In First Out(FIFO) 구조</strong>를 가집니다.</p><p><strong><code>우선순위 큐</code>는 이러한 큐의 한종류로써 <code>최대 우선순위 큐</code>와 <code>최소 우선순위 큐</code>로 나뉩니다.</strong></p><h3 id="최대-우선순위-큐"><a href="#최대-우선순위-큐" class="headerlink" title="최대 우선순위 큐"></a>최대 우선순위 큐</h3><p>최대 우선순위 큐는 다음의 두가지 연산을 지원하는 자료구조 입니다. (최소 우선순위 큐는 EXTRACT-MAX 대신 EXTRACT-MIN을 지원하는 자료구조입니다.)<br>1) <strong>INSERT(x)</strong> : 새로운 원소 x를 삽입<br>2) <strong>EXTRACT_MAX()</strong> : 최대값을 삭제하고 반환</p><p>MAX HEAP을 이용해서 최대 우선순위 큐를 구현할 수 있습니다.</p><h3 id="insert"><a href="#INSERT" class="headerlink" title="INSERT"></a>INSERT</h3><p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1flon6ap26oj31780syn7m.jpg" alt="INSERT 과정"></p><p>위의 그림은 MAX HEAP의 형태로 저장되어 있는 우선순위 큐 입니다. 현재 heap은<br>1) complete binary tree<br>2) max heap property<br>조건을 만족하기 때문에 이를 유지하면서 INSERT 연산을 하기 위해서는 고려할 사항들이 있습니다.</p><p>INSERT는 새로운 노드를 추가해야하는데 <strong>complete binary tree</strong> 를 만족하기 위해서는 가장 마지막 레벨의 leaf에 추가 될 수 밖에 없습니다. 그리고 새로운 노드가 추가된 후 <strong>max heap property</strong>를 만족하기 위해서는 max-heapify 연산이 필요합니다.<br>INSERT의 의사 코드는 다음과 같습니다.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">MAX-HEAP-INSERT(A, key)&#123;</span><br><span class="line">    heap_size = heap_size + <span class="number">1</span>;</span><br><span class="line">    A[heap_size] = key;</span><br><span class="line">    i = heap_size;</span><br><span class="line">    <span class="keyword">while</span>(i &gt; <span class="number">1</span> <span class="keyword">and</span> A[PARENT(i)] &lt; A[i])&#123;</span><br><span class="line">        exchange A[i] <span class="keyword">and</span> A[PARENT(i)];</span><br><span class="line">        i = PARENT(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위의 코드에서 A는 heap의 사이즈를 1증가 시키고, 그 자리에 새로운 key값을 넣습니다. i는 새로 추가된 노드의 인덱스입니다.<br>그 후 while 문에서 i &gt; 1 (root 노드가 아니라는 의미) 이며, A[PARENT(i)] &lt; A[i] (부모 노드에 저장된 값보다 크다는 의미) 라면 부모 노드와 값을 교환합니다.</p><p>즉, 루트 노드가 될 때까지 혹은 자신의 부모 노드보다 작을 때 까지 계속해서 교환연산을 진행합니다. 따라서 시간 복잡도는 트리의 높이에 비례하게 되고, heap은 complete binary tree이므로 <code>O(nlogn)</code>입니다.</p><h3 id="extract_max"><a href="#EXTRACT-MAX" class="headerlink" title="EXTRACT_MAX"></a>EXTRACT_MAX</h3><p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1flonkg61l9j314a0ro7cl.jpg" alt="EXTRACT_MAX 과정"></p><p>위의 그림은 EXTRACT_MAX 과정을 나타내고 있습니다. heap은 complete binary tree 성질을 유지하기 위해서 아무 노드나 삭제하는 것이 아니라 마지막 노드를 삭제하게 됩니다. 이때 루트 노드와 마지막 노드의 자리를 변경해 마지막 노드를 삭제 후 max-heapify를 통해 다시 max heap property를 만족하도록 만들 수 있습니다.<br>HEAP-EXTRACT-MAX의 의사 코드는 다음과 같습니다.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">HEAP-EXTRACT-MAX(A)&#123;</span><br><span class="line">    <span class="keyword">if</span> heap-size[A] &lt; <span class="number">1</span></span><br><span class="line">        then error <span class="string">"heap underflow"</span></span><br><span class="line">    max &lt;- A[<span class="number">1</span>]</span><br><span class="line">    A[<span class="number">1</span>] &lt;- A[heap-size[A]]</span><br><span class="line">    heap-size[A] &lt;- heap-size[A] - <span class="number">1</span></span><br><span class="line">    MAX-HEAPIFY(A, <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> max</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="c로-구현하기"><a href="#C-로-구현하기" class="headerlink" title="C++로 구현하기"></a>C++로 구현하기</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">max_heap_insert</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> size, <span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, tmp;</span><br><span class="line"></span><br><span class="line">    size = size + <span class="number">1</span>;</span><br><span class="line">    a[size] = key;</span><br><span class="line"></span><br><span class="line">    i = size;</span><br><span class="line">    <span class="keyword">while</span> (i &gt; <span class="number">1</span> &amp;&amp; a[i / <span class="number">2</span>] &lt; a[i]) &#123;</span><br><span class="line">        tmp = a[i / <span class="number">2</span>];</span><br><span class="line">        a[i / <span class="number">2</span>] = a[i];</span><br><span class="line">        a[i] = tmp;</span><br><span class="line">        i = i / <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">heap_extract_max</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> size)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (size &lt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"heap underflow\n"</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> max = a[<span class="number">1</span>];</span><br><span class="line">    a[<span class="number">1</span>] = a[size];</span><br><span class="line">    max_heapify(a, size<span class="number">-1</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>출처 : 2015 봄학기 알고리즘 - 부경대 권오흠 교수님</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;우선순위-큐-priority-queue-란&quot;&gt;&lt;a href=&quot;#우선순위-큐-Priority-queue-란&quot; class=&quot;headerlink&quot; title=&quot;우선순위 큐 (Priority queue) 란?&quot;&gt;&lt;/a&gt;우선순위 큐 (Priori
      
    
    </summary>
    
      <category term="Algorithm" scheme="https://jongmin92.github.io/categories/Algorithm/"/>
    
      <category term="Concept" scheme="https://jongmin92.github.io/categories/Algorithm/Concept/"/>
    
    
      <category term="Algorithm" scheme="https://jongmin92.github.io/tags/Algorithm/"/>
    
      <category term="Sort" scheme="https://jongmin92.github.io/tags/Sort/"/>
    
      <category term="Heap sort" scheme="https://jongmin92.github.io/tags/Heap-sort/"/>
    
      <category term="Priority queue" scheme="https://jongmin92.github.io/tags/Priority-queue/"/>
    
  </entry>
  
  <entry>
    <title>힙 정렬 (Heap sort) - 2</title>
    <link href="https://jongmin92.github.io/2017/11/19/Algorithm/Concept/heap-sort-2/"/>
    <id>https://jongmin92.github.io/2017/11/19/Algorithm/Concept/heap-sort-2/</id>
    <published>2017-11-19T07:35:00.000Z</published>
    <updated>2018-02-05T01:06:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>저번 포스팅에서는 힙(Heap)과 max-heapify에 대해 알아보았습니다. 이번 포스팅에서는 직접 1차원 배열을 heap 구조로 변경한 후 힙 정렬을 해보겠습니다.</p><h3 id="1차원-배열을-힙heap-으로-만들기"><a href="#1차원-배열을-힙-Heap-으로-만들기" class="headerlink" title="1차원 배열을 힙(Heap) 으로 만들기"></a>1차원 배열을 힙(Heap) 으로 만들기</h3><p>먼저 의사 코드는 다음과 같습니다.<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">BUILD-MAX-HEAP</span><br><span class="line">    heap-size[A]&lt;-length[A]</span><br><span class="line">    <span class="keyword">for</span> i &lt;- |length[A]/<span class="number">2</span>| downto <span class="number">1</span></span><br><span class="line">        <span class="keyword">do</span> MAX-HEAPIFY(A,i)</span><br></pre></td></tr></table></figure></p><p>i가 A 배열의 길이 / 2 부터 시작하는 이유는 리프 노드에서는 max-heapify 과정이 필요 없기 때문입니다.</p><p><img src="https://ws3.sinaimg.cn/large/006tNc79gy1flnftndkvwj31260yodqt.jpg" alt="BUILD-MAX-HEAP 과정"></p><p>힙을 만드는데의 시간 복잡도는 다음과 같습니다.<br>MAX-HEAPIFY 연산의 시간 복잡도는 log(n) 입니다. 그런데 for 문이 n/2 돌기 때문에 n/2*log(n)이며 빅 오로 표기하면 O(n*log(n))이 됩니다.<br>이는 루트 노드만 고려하여 상당히 러프하게 계산한 것이기 때문에, 정확하게 계산한다면 시간 복잡도는 <strong><code>O(n)</code></strong>이 됩니다.</p><h3 id="힙-정렬heap-sort-하기"><a href="#힙-정렬-Heap-sort-하기" class="headerlink" title="힙 정렬(Heap sort) 하기"></a>힙 정렬(Heap sort) 하기</h3><p>힙 정렬은 다음과 같은 순서로 실행됩니다.<br>1) 주어진 데이터를 힙으로 만든다<br>2) 힙에서 최대값(루트 노드)을 가장 마지막 값과 바꾼다.<br>3) 힙의 크기가 1 줄어든 것으로 간주한다. 즉, 마지막 값은 힙의 일부가 아닌것으로 간주한다.<br>4) 루트 노드에 대해서 HEAPIFY(1)한다.<br>5) 2~4번을 반복한다.</p><p>데이터를 힙으로 만들면 인덱스 1의 값이 가장 최대값 이므로 마지막 값과 바꿉니다.<br>그리고 마지막값은 정렬된 값으로 간주하고 더 이상 신경쓰지 않아도 됩니다.<br>그렇게 줄여나간다면 결국 정렬된 상태의 배열이 완성됩니다.</p><p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1flnhnyssc1j31bi10sqec.jpg" alt="힙 정렬 과정"></p><p>힙 정렬의 의사 코드는 다음과 같습니다.<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">HEAPSORT(A)</span><br><span class="line">    BUILD-MAX-HEAP(A)             <span class="comment">// O(n)</span></span><br><span class="line">    <span class="keyword">for</span> i &lt;-heap-size downto <span class="number">2</span> <span class="keyword">do</span> <span class="comment">// n-1 times</span></span><br><span class="line">        exchange A[<span class="number">1</span>] &lt;-&gt; A[i]    <span class="comment">// O(1)</span></span><br><span class="line">        heap_size &lt;- heap_size <span class="number">-1</span> <span class="comment">// O(1)</span></span><br><span class="line">        MAX-HEAPIFY(A,<span class="number">1</span>)          <span class="comment">// O(log(n))</span></span><br></pre></td></tr></table></figure></p><p>총 시간 복잡도는 <strong><code>nlogn</code></strong>이 됩니다.</p><h3 id="c로-힙-정렬-구현하기"><a href="#C-로-힙-정렬-구현하기" class="headerlink" title="C++로 힙 정렬 구현하기"></a>C++로 힙 정렬 구현하기</h3><p>다음과 같이 C++로 힙 정렬을 구현할 수 있습니다.<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ITEM_SIZE 10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_arr</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> size)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; a[i] &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">max_heapify</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> size, <span class="keyword">int</span> idx)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> left = idx * <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">int</span> right = (idx * <span class="number">2</span>) + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> largest = idx;</span><br><span class="line">    <span class="keyword">int</span> tmp = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 왼쪽 자식 노드와 비교</span></span><br><span class="line">    <span class="keyword">if</span> (left &lt; size &amp;&amp; a[left] &gt; a[largest]) &#123;</span><br><span class="line">        largest = left;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 오른쪽 자식 노드와 비교</span></span><br><span class="line">    <span class="keyword">if</span> (right &lt; size &amp;&amp; a[right] &gt; a[largest]) &#123;</span><br><span class="line">        largest = right;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 부모 노드보다 자식 노드가 큰 경우 교환</span></span><br><span class="line">    <span class="keyword">if</span> (largest != idx) &#123;</span><br><span class="line">        tmp = a[largest];</span><br><span class="line">        a[largest] = a[idx];</span><br><span class="line">        a[idx] = tmp;</span><br><span class="line">        <span class="comment">// 재귀 호출</span></span><br><span class="line">        max_heapify(a, size, largest);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build_max_heap</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> size)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = size / <span class="number">2</span>; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">        max_heapify(a, size, i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">heap_sort</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> size)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> tmp = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    build_max_heap(a, size);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> count = size - <span class="number">1</span>; count &gt; <span class="number">0</span>; count--) &#123;</span><br><span class="line">        <span class="comment">// 루트 노드를 가장 마지막 노드와 교환</span></span><br><span class="line">        tmp = a[count];</span><br><span class="line">        a[count] = a[<span class="number">1</span>];</span><br><span class="line">        a[<span class="number">1</span>] = tmp;</span><br><span class="line">        <span class="comment">// 힙 구조 유지</span></span><br><span class="line">        max_heapify(a, count, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a[ITEM_SIZE] = &#123; <span class="number">0</span>, &#125;; <span class="comment">// 루트 노드는 1번 인덱스 부터 시작</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; ITEM_SIZE; i++) &#123;</span><br><span class="line">        a[i] = (rand() % (ITEM_SIZE * <span class="number">10</span>)) + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    print_arr(a, ITEM_SIZE);</span><br><span class="line">    heap_sort(a, ITEM_SIZE);</span><br><span class="line">    print_arr(a, ITEM_SIZE);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>출처 : 2015 봄학기 알고리즘 - 부경대 권오흠 교수님</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;저번 포스팅에서는 힙(Heap)과 max-heapify에 대해 알아보았습니다. 이번 포스팅에서는 직접 1차원 배열을 heap 구조로 변경한 후 힙 정렬을 해보겠습니다.&lt;/p&gt;
&lt;h3 id=&quot;1차원-배열을-힙heap-으로-만들기&quot;&gt;&lt;a href=&quot;
      
    
    </summary>
    
      <category term="Algorithm" scheme="https://jongmin92.github.io/categories/Algorithm/"/>
    
      <category term="Concept" scheme="https://jongmin92.github.io/categories/Algorithm/Concept/"/>
    
    
      <category term="Algorithm" scheme="https://jongmin92.github.io/tags/Algorithm/"/>
    
      <category term="Sort" scheme="https://jongmin92.github.io/tags/Sort/"/>
    
      <category term="Heap sort" scheme="https://jongmin92.github.io/tags/Heap-sort/"/>
    
  </entry>
  
  <entry>
    <title>힙 정렬 (Heap sort) - 1</title>
    <link href="https://jongmin92.github.io/2017/11/19/Algorithm/Concept/heap-sort-1/"/>
    <id>https://jongmin92.github.io/2017/11/19/Algorithm/Concept/heap-sort-1/</id>
    <published>2017-11-19T05:00:00.000Z</published>
    <updated>2018-02-05T01:06:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>힙 정렬은 <code>힙, 바이너리 힙, 이진 힙</code>이라고 부르는 자료구조를 이용하는 정렬 알고리즘입니다.</p><p><strong>힙 정렬의 특징</strong>은 다음과 같습니다.<br>1.최악의 경우에도 시간 복잡도가 nlogn이 되는 빠른 정렬이다.<br>2.힙 정렬은 알고리즘을 구현하는데 추가적인 배열이 필요하지 않다.<br>3.이진 힙(바이너리 힙) 자료구조를 사용한다.</p><p>먼저 힙 정렬을 구현하기 전에, <code>힙</code> 이라는 자료구조에 대해 알아보겠습니다.</p><h3 id="힙heap-이란"><a href="#힙-Heap-이란" class="headerlink" title="힙(Heap) 이란?"></a>힙(Heap) 이란?</h3><p>힙(Heap)은<br>1) complete binary tree(완전 이진 트리) 이면서<br>2) heap property를 만족해야 합니다.</p><p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1flnbnxri5vj31cy0nu48n.jpg" alt="포화 이진 트리, 완전 이진 트리"></p><p>위의 그림에서는 <strong>full binary tree(포화 이진 트리)</strong>와 <strong>complete binary tree(완전 이진 트리)</strong>에 대해 설명하고 있습니다.</p><p><code>binary tree(이진 트리)</code>란 한 노드가 최대 2개의 자식 노드를 가지는 트리 입니다. 따라서, 위의 2개 트리는 모두 이진 트리입니다. 이진 트리는 이진 탐색 트리(BST)와 이진 힙(Binary Heap)의 구현에 흔히 사용됩니다.</p><p><code>full binary tree(포화 이진 트리)</code>란 이진 트리중에 모든 레벨의 노드 들이 꽉 차있는 형태를 말합니다.</p><p><code>complete binary tee(완전 이진 트리)</code>는 마지막 레벨을 제외하면 완전히 꽉 차있고, 마지막 레벨에는 가장 오른쪽 부터 연속된 몇개의 노드가 비어있을 수 있는 트리를 말합니다. 따라서 포화 이진 트리는 완전 이진 트리이기도 합니다.</p><p>위의 2번째 조건에서 <strong>heap property</strong>를 만족해야 한다고 했습니다. 이 heap property는 2개의 조건으로 나누어집니다.</p><p><img src="https://ws3.sinaimg.cn/large/006tNc79ly1flnccxerlwj31b60g0dla.jpg" alt=""></p><p>1) <strong>max heap property</strong> - 부모 노드는 자식 노드보다 데이터가 크거나 같다.<br>2) <strong>min heap property</strong> - 부모 노드는 자식 노드보다 데이터가 크거나 작다.</p><p>max와 min 모두 대칭적 관계이므로 모든 알고리즘에 적용되나 상황에 따라서 간단하게 사용할 수 있는 것을 씁니다. 여기서는 max-heap property를 다루겠습니다.</p><p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1flnc51lx8aj31da0qqk02.jpg" alt="(a) heaps, (b,c) nonheaps"></p><p>(a)의 3개 트리는 모두 heap 입니다. (완전 이진 트리이면서 heap property를 만족합니다.)<br>(b)의 3개 트리는 heap이 아닙니다. (완전 이진 트리이지만, (max)heap property를 만족하지 않습니다.)<br>(c)의 2개 트리도 heap이 아닙니다. (완전 이진 트리를 만족하지 않습니다.)</p><p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1flncuv31voj318u0da79j.jpg" alt=""></p><p>위의 (a), (b), (c)는 모두 다 heap입니다.<br>(a), (b), (c)는 동일한 데이터를 갖고 있는 서로 다른 heap입니다. 즉, <strong>여러가지 모양의 heap이 존재할 수 있는 것입니다.</strong></p><p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1flncxi146tj31820h0n30.jpg" alt=""></p><p>Heap은 <strong>1차원 배열을 사용해 표현할 수 있습니다.</strong> 같은 레벨에서 왼쪽부터 배열로 저장하면 1차원 배열이 됩니다. 일반적인 트리에서는 부모 자식간의 관계를 식을 통해 표현할 수 없지만 Heap은 complete binary tree이므로 배열의 인덱스만으로 부모와 자식의 관계를 표현할 수 있습니다. 루트 노드가 배열의 1번 인덱스부터 시작한다면 다음과 같은 표현식을 사용할 수 있습니다.</p><ul><li>루트 노드 : A[1]</li><li>A[i]의 부모 노드 : A[i/2]</li><li>A[i]의 왼쪽 자식 노드 : A[2i]</li><li>A[i]의 오른쪽 자식 노드 : A[2i+1]</li></ul><p>따라서 <strong>Heap은 1차원 배열을 통해 표현이 가능하기 때문에 불필요하게 트리 자료구조를 따로 만들어 사용해 구현할 필요가 없습니다.</strong></p><h3 id="max-heapify-란"><a href="#Max-heapify-란" class="headerlink" title="Max-heapify 란?"></a>Max-heapify 란?</h3><p>지금부터는 어떤 1차원 배열의 데이터가 있을 때 이 1차원 배열을 Heap으로 변환하는 과정에 대해 알아보겠습니다. (이번 포스팅에서는 max heap만을 다루기로 했으므로 max heap을 만드는 방법에 대해 알아보겠습니다.)<br>일반 1차원 배열은 <strong>max-heapify</strong>라는 연산 과정을 통해 max heap으로 만들수 있습니다.</p><p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1flnd6rf5iij31eq0s6jzw.jpg" alt=""></p><p>max-heapify 연산을 하기 위한 전제조건을 위의 그림에서 보여주고 있습니다.<br>1) 트리의 전체 모양은 complete binary tree이다.<br>2) 왼쪽 서브 트리(subtree)는 그 자체로 heap이다.<br>3) 오른쪽 서브 트리(subtree)는 그 자체로 heap이다.</p><p>여기서 유일하게 루트 노드만이 heap property를 만족하지 않을때, max-heapify 연산을 통해 heap property를 만족하게 만들 수 있습니다.</p><p><img src="https://ws1.sinaimg.cn/large/006tNc79ly1flndt24q4ij31fo0xck3z.jpg" alt="max-heapify 연산 과정"></p><p>위의 그림에서 루트 노드는 자신의 자식 노드중에 더 큰값과 자리를 교체 합니다. 그 후 교체된 노드에서 다시 max-heapify 연산을 통해 max-heap property를 만족할 때까지 반복합니다.</p><p>결국 max-heapify는 동일한 과정을 반복하고 있기 때문에 <strong>recursion(재귀)</strong>로 구현이 가능합니다.<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">MAX-HEAPIFY(A, i)&#123;</span><br><span class="line">    <span class="keyword">if</span> there is no child of A[i]</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    k &lt;- index of the biggest child of i;</span><br><span class="line">    <span class="keyword">if</span> A[i]&gt;=A[k]</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    exchange A[i] <span class="keyword">and</span> A[k];</span><br><span class="line">    MAX-HEAPIFY(A, k);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>첫번째 조건은 base case로서, 자식 노드가 없다면 가장 아래의 레벨에 위치한 리프노드이기 때문에 종료합니다. 만약 자식 노드가 있다면 큰 자식 노드의 인덱스를 k로 지정합니다. 그 후  부모 노드와 값을 비교해 부모 노드가 크다면 max-heapify 과정을 종료하고, 자식 노드의 값이 크다면 부모 노드와 값을 교환한 후 다시 max-heapify를 재귀 호출 합니다.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">MAX-HEAPIFY(A, i)&#123;</span><br><span class="line">    <span class="keyword">while</span> A[i] has a child <span class="keyword">do</span></span><br><span class="line">        k&lt;- index of the biggest child of i;</span><br><span class="line">        <span class="keyword">if</span> A[i]&gt;= A[k];</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        exchange A[i] <span class="keyword">and</span> A[k];</span><br><span class="line">        i=k;</span><br><span class="line">    end</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>같은 함수를 iterate하게 구현한 코드입니다. 주요 함수의 동작 원리는 같습니다.</p><p>max-heapify의 시간 복잡도는 루트 노드로부터 마지막 레벨까지 비교, 교환 연산을 하므로 트리의 높이보다 많은 시간이 필요하지 않습니다. 따라서 <strong>시간 복잡도는 높이에 의해서 결정되며, <code>O(h)</code>입니다.</strong><br>일반적인 이진트리가 아닌 complete binary tree이므로 노드의 개수를 n이라 하면, <strong>시간 복잡도는 <code>O(logn)</code></strong>이 됩니다.</p><p>출처 : 2015 봄학기 알고리즘 - 부경대 권오흠 교수님</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;힙 정렬은 &lt;code&gt;힙, 바이너리 힙, 이진 힙&lt;/code&gt;이라고 부르는 자료구조를 이용하는 정렬 알고리즘입니다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;힙 정렬의 특징&lt;/strong&gt;은 다음과 같습니다.&lt;br&gt;1.최악의 경우에도 시간 복잡도가 nlogn이
      
    
    </summary>
    
      <category term="Algorithm" scheme="https://jongmin92.github.io/categories/Algorithm/"/>
    
      <category term="Concept" scheme="https://jongmin92.github.io/categories/Algorithm/Concept/"/>
    
    
      <category term="Algorithm" scheme="https://jongmin92.github.io/tags/Algorithm/"/>
    
      <category term="Sort" scheme="https://jongmin92.github.io/tags/Sort/"/>
    
      <category term="Heap sort" scheme="https://jongmin92.github.io/tags/Heap-sort/"/>
    
  </entry>
  
  <entry>
    <title>퀵 정렬 (Quick sort)</title>
    <link href="https://jongmin92.github.io/2017/11/07/Algorithm/Concept/quick-sort/"/>
    <id>https://jongmin92.github.io/2017/11/07/Algorithm/Concept/quick-sort/</id>
    <published>2017-11-06T15:30:00.000Z</published>
    <updated>2018-02-05T01:06:40.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="분할정복법과-퀵-정렬-quick-sort"><a href="#분할정복법과-퀵-정렬-Quick-sort" class="headerlink" title="분할정복법과 퀵 정렬 (Quick sort)"></a>분할정복법과 퀵 정렬 (Quick sort)</h3><p>퀵 정렬은 합병 정렬과 마찬가지로 분할정복법을 사용하지만 그 방법에 있어서 차이가 있습니다.<br><strong>퀵 정렬에서는 정렬할 데이터가 주어지면 하나의 값을 <code>기준값(pivot)</code>으로 사용하여 정렬을 합니다.</strong> 어떤 값을 기준값으로 설정하는지가 퀵정렬의 성능을 좌우합니다.</p><p>분할정복법 3단계를 바탕으로 퀵정렬의 과정을 알아보겠습니다.</p><ol><li>분할 : 하나의 값을 기준값(pivot)으로 설정 한 후 데이터들을 기준값보다 큰 값과 작은값으로 분류한다.</li><li>정복 : 분할한 양쪽을 각각 재귀로 퀵 정렬한다.</li><li>합병 : 이미 분할 과정에서 정렬이 완료되었기 때문에 따로 과정이 없다.</li></ol><p><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1fl8t9gfhijj30u00h6q5c.jpg" alt="퀵 정렬에서의 분할정복법 과정"></p><h3 id="퀵-정렬-의사-코드"><a href="#퀵-정렬-의사-코드" class="headerlink" title="퀵 정렬 의사 코드"></a>퀵 정렬 의사 코드</h3><p>의사 코드는 다음과 같습니다.<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">quickSort(A[], p, r) &#123;</span><br><span class="line">    <span class="keyword">if</span>(p&lt;r) then&#123;</span><br><span class="line">        q = partition(A, p, r);    <span class="comment">// 분할</span></span><br><span class="line">        quickSort(A, p, q<span class="number">-1</span>);    <span class="comment">// 왼쪽 부분배열 정렬</span></span><br><span class="line">        quickSort(A, q+<span class="number">1</span>, r);    <span class="comment">// 오른쪽 부분배열 정렬</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">partition(A[], p, r) &#123;</span><br><span class="line">    배열 A[p...r]의 원소들을 A[r]을 기준으로 양쪽으로 재배치하고</span><br><span class="line">    A[r]이 자리한 위치를 <span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>배열 A의 인덱스 p에서 r사이에 있는 데이터를 정렬합니다. 조건문으로 p가 r보다 작은 경우에만 알고리즘이 실행되도록 합니다. 다음으로 partion 함수는 기준값(pivot)을 기준으로 전체 데이터를 나눠주고 피봇 인덱스를 반환하는 역할을 합니다. 따라서, q는 피봇이 됩니다.</p><p>[p, q-1] 은 배열의 왼쪽 부분, 작은 값이고<br>[q+1, r] 까지는 배열의 오른쪽 부분, 큰 값입니다.<br>재귀적으로 quickSort 함수를 호출해 정렬합니다.</p><p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1fl8trgffz7j30nh0ii0ty.jpg" alt=""></p><p>위의 그림에서 기준값(pivot)으로 인덱스의 마지막 값을 사용하고 있습니다. 위의 그림 기준에서 현재 인덱스 j의 값이 기준값보다 크다면 j를 증가시켜 다음값으로 넘어갑니다.<br>그러나 인덱스 j의 값이 기준값보다 작다면 앞쪽으로 보내야하는데, 이때 i값을 1 증가 시킨 후 그 값과 교환합니다.</p><p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1fl8twh3l33j30q00l43zz.jpg" alt=""><br><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1fl8u0xwg18j30q10hwta0.jpg" alt=""></p><p>위의 과정은 기준값을 마지막 인덱스의 값인 15로 설정하고 i와 j를 증가시키면서 정렬하는 과정을 보여줍니다. 모든 정렬이 완료되면 인덱스 i+1의 값과 기준값의 위치를 변경합니다.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Partition(A, p, r)&#123;</span><br><span class="line">    x&lt;-A[r];</span><br><span class="line">    i&lt;-p<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span> j&lt;-p to r<span class="number">-1</span></span><br><span class="line">    <span class="keyword">if</span> A[j] &lt;= x then</span><br><span class="line">        i&lt;-i+<span class="number">1</span>;</span><br><span class="line">        exchange A[i] <span class="keyword">and</span> A[j];</span><br><span class="line">    exchange A[i+<span class="number">1</span>] <span class="keyword">and</span> A[r];</span><br><span class="line">    <span class="keyword">return</span> i+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Partition 함수를 더 자세한 의사 코드로 나타냈습니다. 앞서 설명한 위치 변환과 인덱스 증가로 정렬을 완료하고 마지막으로 기준값(pivot)의 인덱스를 리턴합니다.</strong></p><h3 id="퀵-정렬-c-코드"><a href="#퀵-정렬-c-코드" class="headerlink" title="퀵 정렬 c++ 코드"></a>퀵 정렬 c++ 코드</h3><p>이제 의사 코드를 바탕으로 c++ 코드를 작성하면 다음과 갖습니다. (의사 코드와는 완전히 일치하지는 않습니다.)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ITEM_SIZE 10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_arr</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> size)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; a[i] &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">partition</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pivot = right;</span><br><span class="line">    <span class="keyword">int</span> i = left - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> j = left;</span><br><span class="line">    <span class="keyword">int</span> tmp;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (left &lt; right) &#123;</span><br><span class="line">        <span class="keyword">while</span> (j &lt; right) &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[j] &lt; a[pivot]) &#123;</span><br><span class="line">                tmp = a[j];</span><br><span class="line">                a[j] = a[i + <span class="number">1</span>];</span><br><span class="line">                a[i + <span class="number">1</span>] = tmp;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        tmp = a[pivot];</span><br><span class="line">        a[pivot] = a[i + <span class="number">1</span>];</span><br><span class="line">        a[i + <span class="number">1</span>] = tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    pivot = i + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> pivot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">quick_sort</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (left &lt; right) &#123;</span><br><span class="line">        <span class="keyword">int</span> pivot = partition(a, left, right);</span><br><span class="line">        quick_sort(a, left, pivot - <span class="number">1</span>);</span><br><span class="line">        quick_sort(a, pivot + <span class="number">1</span>, right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a[ITEM_SIZE] = &#123; <span class="number">15</span>, <span class="number">2</span>, <span class="number">24</span>, <span class="number">18</span>, <span class="number">7</span>, <span class="number">13</span>, <span class="number">12</span>, <span class="number">4</span>, <span class="number">21</span>, <span class="number">9</span> &#125;;</span><br><span class="line">    print_arr(a, ITEM_SIZE);</span><br><span class="line">    quick_sort(a, <span class="number">0</span>, ITEM_SIZE - <span class="number">1</span>);</span><br><span class="line">    print_arr(a, ITEM_SIZE);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="퀵-정렬-시간-복잡도"><a href="#퀵-정렬-시간-복잡도" class="headerlink" title="퀵 정렬 시간 복잡도"></a>퀵 정렬 시간 복잡도</h3><p>퀵 정렬에서의 시간 복잡도는 파티션(분할) 하는데 모든 데이터를 한번씩 비교하면 되므로 n이 됩니다. 정확하게 말하자면 데이터의 개수가 n개일때, n-1 번의 비교가 이루어집니다.</p><p>합병 정렬보다는 시간 복잡도를 구하는게 조금 더 복잡한데, 합병 정렬은 항상 2개로 나뉘는것과 달리 퀵 정렬은 항상 양쪽이 고르게 나누어지지 않기 때문입니다.</p><p>먼저 최악의 경우부터 생각해보면 모든 배열이 정렬되어있을 때, 기준값이 최대/최소 값일 때, 최악의 시간 복잡도가 발생합니다. 분할은 0개와 나머지 전체로 나누어지므로 결국 데이터는 아무변화가 없고 똑같은 루틴이 반복되기 때문에 시간 복잡도는 <strong><code>O(n^2)</code></strong>가 됩니다.</p><p>반대로 최선의 경우는 항상 절반으로 분할되는 경우로, 이 때는 합병 정렬과 동일한 시간인 <strong><code>O(nlogn)</code></strong>의 시간을 같습니다.</p><p>퀵 정렬은 다른 정렬 알고리즘보다 대체로 빠르기 때문에 퀵 정렬 이라는 이름이 붙었습니다. 그렇지만 최악의 경우에는 O(n^2)의 느린 속도를 보여줬는데 왜 퀵 정렬이 다른 알고리즘 보다 빠른 걸가요?</p><p>최선의 경우와 최악의 경우는 극단적인 케이스라서 실제적으로 일어나기 어려운 상황입니다.</p><p><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1fl8ud3s48pj30sj0ih0wb.jpg" alt="항상 한쪽이 적어도 1/9 이상이 되도록 분할된다면?"></p><p>현식적으로 가정했을 때, n개의 데이터가 항상 9:1로 분할 된다고 하면 한 단계 당 분할되는 시간을 구하면 항상 n이므로 전체 비교 연산은 트리의 깊이 <em> n 입니다.<br>트리는 대칭적이지 않으므로 가장 깊은 오른쪽 경로(최악의 경우)를 예로 들면 (9/10)^k </em> n = 1이 됩니다.<br>따라서 시간 복잡도 k = log9/10(n)이 됩니다.</p><p>이 예가 의미하는 것은 <strong>퀵 정렬의 성능은 파티션이 얼마나 밸런스있게 나뉘냐에 결정된다는 것입니다.</strong> 극단적인 경우만 아니라면 퀵 정렬의 시간 복잡도는 nlogn 이 되므로 실제로 상당히 빠른 정렬 방법이 됩니다.</p><p>출처 : 2015 봄학기 알고리즘 - 부경대 권오흠 교수님</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;분할정복법과-퀵-정렬-quick-sort&quot;&gt;&lt;a href=&quot;#분할정복법과-퀵-정렬-Quick-sort&quot; class=&quot;headerlink&quot; title=&quot;분할정복법과 퀵 정렬 (Quick sort)&quot;&gt;&lt;/a&gt;분할정복법과 퀵 정렬 (Quick
      
    
    </summary>
    
      <category term="Algorithm" scheme="https://jongmin92.github.io/categories/Algorithm/"/>
    
      <category term="Concept" scheme="https://jongmin92.github.io/categories/Algorithm/Concept/"/>
    
    
      <category term="Algorithm" scheme="https://jongmin92.github.io/tags/Algorithm/"/>
    
      <category term="Sort" scheme="https://jongmin92.github.io/tags/Sort/"/>
    
      <category term="Quick sort" scheme="https://jongmin92.github.io/tags/Quick-sort/"/>
    
  </entry>
  
  <entry>
    <title>합병 정렬 (Merge sort)</title>
    <link href="https://jongmin92.github.io/2017/11/06/Algorithm/Concept/merge-sort/"/>
    <id>https://jongmin92.github.io/2017/11/06/Algorithm/Concept/merge-sort/</id>
    <published>2017-11-06T08:50:00.000Z</published>
    <updated>2018-02-05T01:06:40.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="분할정복법과-합병-정렬-merge-sort"><a href="#분할정복법과-합병-정렬-Merge-sort" class="headerlink" title="분할정복법과 합병 정렬 (Merge sort)"></a>분할정복법과 합병 정렬 (Merge sort)</h3><p><strong><code>합병 정렬</code>은 앞서 알아본 선택, 삽입, 버블 정렬과는 다르게 <code>분할정복법</code>이라는 개념을 사용합니다.</strong></p><p><strong>분할정복법(Divide-And-Conquer)</strong>이라는 것은 주어진 문제를 다음과 같은 3단계의 절차를 통해 해결하는 방법입니다.</p><ol><li>분할 : 해결하고자 하는 문제를 작은 크기의 동일한 문제들로 분할한다.</li><li>정복 : 각각의 작은 문제를 순환적으로 해결한다.</li><li>합병 : 작은 문제의 해를 합하여(merge) 원래 문제에 대한 해를 구한다.</li></ol><p>그럼 이를 토대로 합병 정렬의 과정을 살펴보겠습니다.</p><p><img src="https://ws3.sinaimg.cn/large/006tKfTcgy1fl8jl4h25hj30qd0gzzpr.jpg" alt=""></p><p>합병 정렬은 여러 개의 데이터를 한 번에 정렬하는 것이 아닌 이를 계속해서 반으로 나눈 후 다시 합병하는 과정에서 정렬이 이루어집니다.</p><p>분할을 반복하다보면 마지막은 길이가 1인 구간으로 나뉘어집니다. 더이상 분할이 불가능할때 다시 합병하면서 정렬을 하는것입니다. 그렇기 때문에 합병 정렬에서 가장 중요한 부분은 실제 정렬을 수행하는 <strong>합병(merge)</strong>하는 과정입니다.</p><p>그럼 합병과정에서 정렬은 어떻게 이루어질까요? 다음 그림을 통해서 실제 정렬이 이루어지는 합병 과정을 좀 더 자세히 알아보겠습니다.</p><p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1fl8knuvjxgj30vd0e7gm6.jpg" alt=""></p><p>먼저 위 그림은 합병이 이루어 지기 위한 이미 정렬된 2개의 블록이 존재하는 모습입니다. 현재 두개의 블록은 이미 길이가 1인 구간으로 나눠진 배열부터 시작해 각각 합병 과정을 거쳐 정렬된 상태로 만들어진 배열입니다.<br><strong>이 두개의 블록을 정렬된 상태를 유지하며 합치기 위해서는 i 인덱스에 있는 값과, j 인덱스에 있는 값을 하나씩 비교한 후 <code>추가배열</code>에 저장하면 됩니다.</strong></p><p><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1fl8lrnjgylj30ux0dxt9d.jpg" alt=""></p><p>위 그림처럼 하나의 블록이 모두 합쳐 졌을 경우 나머지 블록은 순서대로 배열에 저장하면 됩니다.</p><p><img src="https://ws3.sinaimg.cn/large/006tKfTcgy1fl8ko6pwa2j30v20e1q3m.jpg" alt=""></p><p>모든 합병을 마친 후 이 추가배열의 값으로 기존 배열의 해당 구간에 복사하면 됩니다.</p><h3 id="합병-정렬-의사-코드"><a href="#합병-정렬-의사-코드" class="headerlink" title="합병 정렬 의사 코드"></a>합병 정렬 의사 코드</h3><p>의사 코드는 다음과 같습니다.<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">mergeSort(A[],p,r)&#123;</span><br><span class="line">    <span class="keyword">if</span>(p&lt;r) then&#123;</span><br><span class="line">        q &lt;- (p+r)/<span class="number">2</span>;</span><br><span class="line">        mergeSort(A,p,q);</span><br><span class="line">        mergeSort(A,q+<span class="number">1</span>,r);</span><br><span class="line">        merge(A, p, q, r);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">merge(A[], p, q, r)&#123;</span><br><span class="line">    정렬되어 있는 ㅜ 배열 A[p..q]와 A[q+<span class="number">1.</span>..r]을 합하여</span><br><span class="line">    정렬된 하나의 배열 A[p...r]을 만든다.</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="합병-정렬-c-코드"><a href="#합병-정렬-c-코드" class="headerlink" title="합병 정렬 c++ 코드"></a>합병 정렬 c++ 코드</h3><p>이제 의사 코드를 바탕으로 c++ 코드를 작성하면 다음과 같습니다.<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ITEM_SIZE 10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_arr</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> size)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; a[i] &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> left, <span class="keyword">int</span> mid, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j, k;</span><br><span class="line"></span><br><span class="line">    i = left;</span><br><span class="line">    j = mid + <span class="number">1</span>;</span><br><span class="line">    k = left;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> tmp_arr[ITEM_SIZE];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// left 부터 mid 까지의 블록과 mid + 1 부터 right 까지의 블록을 서로 비교</span></span><br><span class="line">    <span class="keyword">while</span> (i &lt;= mid &amp;&amp; j &lt;= right) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[i] &lt;= a[j]) &#123;</span><br><span class="line">            tmp_arr[k] = a[i];</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            tmp_arr[k] = a[j];</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        k++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// left 블록의 값이 다 처리되었지만, right 블록의 index가 남아 있는 경우</span></span><br><span class="line">    <span class="comment">// right 블록의 남은 부분을 순차적으로 tmp_arr에 복사</span></span><br><span class="line">    <span class="keyword">if</span> (i &gt; mid) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> m = j; m &lt;= right; m++) &#123;</span><br><span class="line">            tmp_arr[k] = a[m];</span><br><span class="line">            k++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// left 블록의 남은 부분을 순차적으로 tmp_arr에 복사</span></span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> m = i; m &lt;= mid; m++) &#123;</span><br><span class="line">            tmp_arr[k] = a[m];</span><br><span class="line">            k++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 임시 배열인 tmp_arr의 값을 원본 배열에 복사한다.</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> m = left; m &lt;= right; m++) &#123;</span><br><span class="line">        a[m] = tmp_arr[m];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge_sort</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> mid;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (left &lt; right) &#123;</span><br><span class="line">        <span class="comment">// 절반으로 나누기 위해 중간 위치 찾기</span></span><br><span class="line">        mid = (left + right) / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 분할</span></span><br><span class="line">        merge_sort(a, left, mid);</span><br><span class="line">        merge_sort(a, mid + <span class="number">1</span>, right);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 합병</span></span><br><span class="line">        merge(a, left, mid, right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a[ITEM_SIZE] = &#123; <span class="number">15</span>, <span class="number">2</span>, <span class="number">24</span>, <span class="number">18</span>, <span class="number">7</span>, <span class="number">13</span>, <span class="number">12</span>, <span class="number">4</span>, <span class="number">21</span>, <span class="number">9</span> &#125;;</span><br><span class="line">    print_arr(a, ITEM_SIZE);</span><br><span class="line">    merge_sort(a, <span class="number">0</span>, ITEM_SIZE - <span class="number">1</span>);</span><br><span class="line">    print_arr(a, ITEM_SIZE);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="합병-정렬-시간-복잡도"><a href="#합병-정렬-시간-복잡도" class="headerlink" title="합병 정렬 시간 복잡도"></a>합병 정렬 시간 복잡도</h3><p>이제 마지막으로 합병 정렬의 시간 복잡도를 알아보겠습니다. 데이터가 n개 일때 합병 정렬로 계산하는 시간을 T(n)이라고 하겠습니다.<br>정렬을 위해서 반으로 분할한 후 n/2개의 블럭에 재귀함수를 호출하면, 반으로 분할된 블럭 2개에 대한 정렬을 수행해야하므로 <strong>T(n/2) + T(n/2)</strong>의 시간이 걸립니다. 두개의 정렬된 블럭을 merge할 때 두 블럭을 한번씩 비교하므로 merge 시간은 <strong>n</strong>입니다.<br>따라서, merge sort의 시간 복잡도는 <strong>T(n) = T(n/2) + T(n/2) + n</strong>이 됩니다.</p><p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1fl8mb4xm7oj30ta0g5q4q.jpg" alt=""></p><p>결국 분할을 반복하면 위와 같은 그림의 식을 도출할 수 있고, 이 식을 수학적으로 풀어보면 <strong><code>O(nlogn)</code></strong>이 됩니다.</p><h3 id="합병-정렬과-퀵-정렬-비교"><a href="#합병-정렬과-퀵-정렬-비교" class="headerlink" title="합병 정렬과 퀵 정렬 비교"></a>합병 정렬과 퀵 정렬 비교</h3><p>아직 퀵 정렬에 대해 다루지 않았지만 합병 정렬과 퀵 정렬 모두 시간 복잡도로 <strong><code>O(nlogn)</code></strong>을 갖습니다. 그러나 퀵 정렬과 합병 정렬에는 서로 다른 특징이 있습니다.</p><p>합병 정렬은 합병 과정에서 임시적인 저장공간으로 데이터를 담고 있는 배열과 같은 크기인 <strong>추가 배열</strong>을 사용하기 때문에 <strong><code>추가적인 메모리가 필요</code></strong>합니다. 그러나 퀵 정렬은 추가 메모리를 사용하지 않고 내부 교환만으로 수행되는 차이가 있습니다.</p><p>또한 합병 정렬은 어떤 상황이라도 항상 <strong>O(nlogn)</strong>의 시간 복잡도를 갖지만 퀵 정렬의 경우 아이러니하게도 정렬하기 위해 정렬이 되어 있는 데이터를 사용할 경우 <strong>O(n^2)</strong>의 시간복잡도를 갖게 됩니다. (이 경우는 다음에 퀵 정렬에 대해 포스팅하며 알아보겠습니다.) 그러나 최악의 경우가 아닐 경우 일반적으로 퀵 정렬이 합병 정렬에 비해 빠른 성능을 보입니다.</p><p>합병 정렬은 퀵 정렬보다 성능이 전반적으로 떨어지고, 데이터 크기만한 메모리가 더 필요하지만 최대의 장점은 <strong><code>stable sort</code></strong>라는 점입니다. 퀵 정렬의 경우 만약 배열 A[25] = 100, A[33] = 100 인 정수형 배열을 정렬한다고 할 때, 33번째에 있던 100이 25번째에 있던 100보다 앞으로 오는 경우가 생길 수 있습니다. 그에 반해서 합병 정렬은 이전의 순서를 유지하면서 정렬된 상태를 만들 수 있습니다.</p><p>출처 : 2015 봄학기 알고리즘 - 부경대 권오흠 교수님</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;분할정복법과-합병-정렬-merge-sort&quot;&gt;&lt;a href=&quot;#분할정복법과-합병-정렬-Merge-sort&quot; class=&quot;headerlink&quot; title=&quot;분할정복법과 합병 정렬 (Merge sort)&quot;&gt;&lt;/a&gt;분할정복법과 합병 정렬 (M
      
    
    </summary>
    
      <category term="Algorithm" scheme="https://jongmin92.github.io/categories/Algorithm/"/>
    
      <category term="Concept" scheme="https://jongmin92.github.io/categories/Algorithm/Concept/"/>
    
    
      <category term="Algorithm" scheme="https://jongmin92.github.io/tags/Algorithm/"/>
    
      <category term="Sort" scheme="https://jongmin92.github.io/tags/Sort/"/>
    
      <category term="Merge sort" scheme="https://jongmin92.github.io/tags/Merge-sort/"/>
    
  </entry>
  
  <entry>
    <title>기본적인 정렬 알고리즘 (선택, 삽입, 버블)</title>
    <link href="https://jongmin92.github.io/2017/11/06/Algorithm/Concept/basic-sort/"/>
    <id>https://jongmin92.github.io/2017/11/06/Algorithm/Concept/basic-sort/</id>
    <published>2017-11-06T04:20:00.000Z</published>
    <updated>2018-02-05T01:06:40.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="정렬-알고리즘-종류와-특징"><a href="#정렬-알고리즘-종류와-특징" class="headerlink" title="정렬 알고리즘 종류와 특징"></a>정렬 알고리즘 종류와 특징</h2><p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1fl8gt30q6oj30k1093752.jpg" alt=""></p><h2 id="선택-정렬"><a href="#선택-정렬" class="headerlink" title="선택 정렬"></a>선택 정렬</h2><p><strong><code>선택 정렬</code>은 해당 순서에 원소를 넣을 위치는 이미 정해져 있고, 어떤 원소를 넣을지 선택한다라고 생각하면 이해하기 쉽습니다.</strong></p><p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1fl89nsw0chj30rm0hsgni.jpg" alt="선택 정렬 과정"></p><p>현재 위의 예시에서는 각 순서마다 정렬되지 않은 범위에서 가장 큰 원소를 찾아 맨 마지막 값의 자리와 변경합니다. 가장 큰값을 찾아 맨 오른쪽 원소와 변경해 오름차순으로 정렬했지만, 매 순서마다 가장 작은 값을 찾아 맨 왼쪽의 원소와 변경해주어도 오름차순 정렬을 구현할 수 있습니다.</p><p>순서를 간략히 정리하면 다음과 같습니다<br><strong>각 루프마다</strong><br>1.최대 원소를 찾는다.<br>2.최대 원소와 맨 오른쪽 원소를 교환한다.<br>3.맨 오른쪽 원소를 제외한다.<br><strong>하나의 원소만 남을 때까지 위의 루프를 반복</strong></p><p>의사 코드는 다음과 같습니다.<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">selectionSort(A[], n) &#123;</span><br><span class="line">    <span class="keyword">for</span> last &lt;- downto <span class="number">2</span> &#123;</span><br><span class="line">        A[<span class="number">1.</span>..last] 중 가장 큰 수 A[k]를 찾는다</span><br><span class="line">        A[K] &lt;-&gt; A[last]; A[k]와 A[last]값을 교환</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>시간 복잡도를 계산한다면<br>1)for 루프는 n-1번 반복 되고<br>2)가장 큰 수를 찾기 위한 비교 횟수는 n-1, n-2, … , 2, 1<br>3)교환은 상수 시간 작업이므로</p><p><strong>T(n) = (n-1) + (n-2) + … + 2 + 1 = n(n-1)/2  = O(n^2)</strong></p><p>시간 복잡도는 O(n^2)가 됩니다.</p><p>이제 마지막으로 c++ 코드로 작성하면 다음과 같습니다.<br>(위의 예시에서는 매 순서마다 가장 값이 큰 원소를 가장 오른쪽 원소와 변경함으로써 오름차순 정렬을 구현했지만, 아래의 코드에서는 매 순서마다 가장 값이 작은 원소를 가장 왼쪽의 원소와 변경함으로써 오름차순 정렬을 구현했습니다.)<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_arr</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> size)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; a[i] &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">selection_sort</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> size)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> min_idx, tmp;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        min_idx = i;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; size; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[j] &lt; a[min_idx]) &#123;</span><br><span class="line">                min_idx = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        tmp = a[min_idx];</span><br><span class="line">        a[min_idx] = a[i];</span><br><span class="line">        a[i] = tmp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a[] = &#123; <span class="number">15</span>, <span class="number">2</span>, <span class="number">24</span>, <span class="number">18</span>, <span class="number">7</span>, <span class="number">13</span>, <span class="number">12</span>, <span class="number">4</span>, <span class="number">21</span>, <span class="number">9</span> &#125;;</span><br><span class="line">    <span class="keyword">int</span> size = <span class="keyword">sizeof</span>(a) / <span class="keyword">sizeof</span>(<span class="keyword">int</span>);</span><br><span class="line">    print_arr(a, size);</span><br><span class="line">    selection_sort(a, size);</span><br><span class="line">    print_arr(a, size);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="삽입-정렬"><a href="#삽입-정렬" class="headerlink" title="삽입 정렬"></a>삽입 정렬</h2><p><strong><code>삽입 정렬</code>은 매 순서마다 해당 원소를 삽입할 수 있는 위치를 찾아 해당 위치에 넣는다고 이해하면 쉽습니다.</strong><br>(선택 정렬은 위치가 정해져있고 이 위치에 어떤 원소를 넣을지 선택하는 것이었다면, 삽입 정렬은 원소는 정해져있고 이 원소를 어디에 넣을지 선택하는 것이라고 이해하면 될 것 같습니다.)</p><p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1fl8b6zjclzj30w00hgwgi.jpg" alt="삽입 정렬 과정"></p><p>위의 그림은 삽입 정렬의 전체적인 과정을 보여주는 것이고, 아래 사진은 삽입 정렬의 전체과정 중 한 과정을 상세하게 보여주고 있습니다.</p><p><img src="https://ws3.sinaimg.cn/large/006tKfTcgy1fl8bcn4pz7j30nw0ib40g.jpg" alt=""></p><p>이번에 선택된 원소는 4이고, 이 원소를 어떤 자리에 삽입할지 탐색하는 과정을 보여줍니다.</p><p>삽입 정렬의 의사 코드는 다음과 같습니다.<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">insertionSort(A[], n)&#123;</span><br><span class="line">    <span class="keyword">for</span> i&lt;- <span class="number">2</span> to n&#123;</span><br><span class="line">        A[<span class="number">1.</span>..i]의 적당한 자리에 A[i]를 삽입한다.</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>시간 복잡도를 계산한다면<br>1)for 루프는 n-1번 반복 되고<br>2)최악의 경우 데이터 삽입을 위한 비교는 i-1번 비교</p><p>따라서 최악의 경우 <strong>T(n) = (n-1) + (n-2) + … + 2 + 1 = n(n-1)/2  = O(n^2)</strong></p><p>시간 복잡도는 O(n^2)가 됩니다.</p><p>이제 마지막으로 c++ 코드로 작성하면 다음과 같습니다.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_arr</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> size)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; a[i] &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert_sort</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> size)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> tmp;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; size; i++) &#123;</span><br><span class="line">        tmp = a[i];</span><br><span class="line">        <span class="keyword">int</span> j = i;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (j &gt; <span class="number">0</span> &amp;&amp; a[j - <span class="number">1</span>] &gt; tmp) &#123;</span><br><span class="line">            a[j] = a[j - <span class="number">1</span>];</span><br><span class="line">            j--;</span><br><span class="line">        &#125;</span><br><span class="line">        a[j] = tmp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a[] = &#123; <span class="number">15</span>, <span class="number">2</span>, <span class="number">24</span>, <span class="number">18</span>, <span class="number">7</span>, <span class="number">13</span>, <span class="number">12</span>, <span class="number">4</span>, <span class="number">21</span>, <span class="number">9</span> &#125;;</span><br><span class="line">    <span class="keyword">int</span> size = <span class="keyword">sizeof</span>(a) / <span class="keyword">sizeof</span>(<span class="keyword">int</span>);</span><br><span class="line">    print_arr(a, size);</span><br><span class="line">    insert_sort(a, size);</span><br><span class="line">    print_arr(a, size);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="버블-정렬"><a href="#버블-정렬" class="headerlink" title="버블 정렬"></a>버블 정렬</h2><p><strong><code>버블 정렬</code>은 선택 정렬과 기본 개념이 비슷합니다. 버블 정렬에서도 선택 정렬과 같이 이미 해당 순서에 원소를 넣을 위치는 정해져 있고, 어떤 원소를 넣을지 선택한다라고 생각하면 됩니다. 다만 선택 정렬과는 다르게 최대값을 찾고, 그 최대값을 맨 마지막 원소와 교환하는 과정에서 차이가 있습니다.</strong></p><p><img src="https://ws3.sinaimg.cn/large/006tKfTcgy1fl8bhflqlaj30rm0g9myd.jpg" alt="버블 정렬 과정"></p><p>버블 정렬의 의사 코드는 다음과 같습니다.<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">bubbleSort(A[], n)&#123;</span><br><span class="line">    <span class="keyword">for</span> last &lt;- downto <span class="number">2</span>&#123;</span><br><span class="line">        <span class="keyword">for</span> i &lt;- <span class="number">1</span> to last - <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span>(A[i]&gt;A[i+<span class="number">1</span>]) then A[i] &lt;-&gt; A[i+<span class="number">1</span>] <span class="comment">// 교환</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>시간 복잡도를 계산한다면<br>1)바깥 for 루프는 n-1번 반복 되고<br>2)안쪽 for 루프는 n-1, n-2, …, 2, 1번 반복<br>3)원소 교환은 상수시간 작업</p><p>따라서 T(n) = (n-1) + (n-2) + … + 2 + 1 = n(n-1)/2  = O(n^2)**</p><p>시간 복잡도는 O(n^2)가 됩니다.</p><p>이제 마지막으로 c++ 코드로 작성하면 다음과 같습니다.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_arr</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> size)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; a[i] &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">buuble_sort</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> size)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> tmp;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; size; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[i] &gt; a[j]) &#123;</span><br><span class="line">                tmp = a[i];</span><br><span class="line">                a[i] = a[j];</span><br><span class="line">                a[j] = tmp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a[] = &#123; <span class="number">15</span>, <span class="number">2</span>, <span class="number">24</span>, <span class="number">18</span>, <span class="number">7</span>, <span class="number">13</span>, <span class="number">12</span>, <span class="number">4</span>, <span class="number">21</span>, <span class="number">9</span> &#125;;</span><br><span class="line">    <span class="keyword">int</span> size = <span class="keyword">sizeof</span>(a) / <span class="keyword">sizeof</span>(<span class="keyword">int</span>);</span><br><span class="line">    print_arr(a, size);</span><br><span class="line">    buuble_sort(a, size);</span><br><span class="line">    print_arr(a, size);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>출처 : 2015 봄학기 알고리즘 - 부경대 권오흠 교수님</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;정렬-알고리즘-종류와-특징&quot;&gt;&lt;a href=&quot;#정렬-알고리즘-종류와-특징&quot; class=&quot;headerlink&quot; title=&quot;정렬 알고리즘 종류와 특징&quot;&gt;&lt;/a&gt;정렬 알고리즘 종류와 특징&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://ws2.
      
    
    </summary>
    
      <category term="Algorithm" scheme="https://jongmin92.github.io/categories/Algorithm/"/>
    
      <category term="Concept" scheme="https://jongmin92.github.io/categories/Algorithm/Concept/"/>
    
    
      <category term="Algorithm" scheme="https://jongmin92.github.io/tags/Algorithm/"/>
    
      <category term="Sort" scheme="https://jongmin92.github.io/tags/Sort/"/>
    
      <category term="Bubble sort" scheme="https://jongmin92.github.io/tags/Bubble-sort/"/>
    
      <category term="Insert sort" scheme="https://jongmin92.github.io/tags/Insert-sort/"/>
    
      <category term="Slection sort" scheme="https://jongmin92.github.io/tags/Slection-sort/"/>
    
  </entry>
  
  <entry>
    <title>소수 구하기 (에라토스테네스의 체)</title>
    <link href="https://jongmin92.github.io/2017/11/05/Algorithm/Concept/prime/"/>
    <id>https://jongmin92.github.io/2017/11/05/Algorithm/Concept/prime/</id>
    <published>2017-11-05T09:40:00.000Z</published>
    <updated>2018-02-05T01:06:40.000Z</updated>
    
    <content type="html"><![CDATA[<p><code>소수(Prime Number)</code>는 <strong>약수로 1과 자기 자신만을 가지는 정수입니다.</strong> 정수론의 기본 정리에 의해 <strong>모든 자연수는 단 하나의 소수들의 곱으로 표현됩니다.</strong></p><h2 id="소수-구하는-알고리즘"><a href="#소수-구하는-알고리즘" class="headerlink" title="소수 구하는 알고리즘"></a>소수 구하는 알고리즘</h2><h3 id="1-기본적인-접근"><a href="#1-기본적인-접근" class="headerlink" title="1. 기본적인 접근"></a>1. 기본적인 접근</h3><p>소수는 1과 N만을 약수로 가진다. 그럼 2부터 N-1까지의 수로는 나눠져서는 안된다.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> num;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"소수를 구할 수를 입력하세요 : "</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; num;</span><br><span class="line">    <span class="keyword">bool</span> isPrime = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2부터 N-1의 수로 나눠서 나눠지는 수가 있으면 반복문 종료</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">2</span>; i&lt;num; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (num % i == <span class="number">0</span>) &#123;</span><br><span class="line">            isPrime = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(isPrime) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; num &lt;&lt; <span class="string">"은 소수입니다."</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; num &lt;&lt; <span class="string">"은 소수가 아닙니다."</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>연산 횟수 : N-2번</strong></p><h3 id="2-에라토스테네스의-접근"><a href="#2-에라토스테네스의-접근" class="headerlink" title="2. 에라토스테네스의 접근"></a>2. 에라토스테네스의 접근</h3><p>주어진 자연수 N이 소수이기 위한 필요충분 조건은 N이 N의 제곱근보다 크지 않은 어떤 소수로도 나눠지지 않는다. 수가 수를 나누면 몫이 발생하게 되는데 몫과 나누는 수, 둘 중 하나는 반드시 N의 제곱근 이하이기 때문이다.</p><p>즉, 2부터 N의 제곱근 까지 나눠보면 됩니다.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> num;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"소수를 구할 수를 입력하세요 : "</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; num;</span><br><span class="line">    <span class="keyword">bool</span> isPrime = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2부터 N의 제곱근까지의 수로 나눠서 나눠지는 수가 있으면 반복문 종료</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">2</span>; i&lt;=<span class="built_in">sqrt</span>(num); i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (num % i == <span class="number">0</span>) &#123;</span><br><span class="line">            isPrime = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(isPrime) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; num &lt;&lt; <span class="string">"은 소수입니다."</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; num &lt;&lt; <span class="string">"은 소수가 아닙니다."</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>연산 횟수 : 루트(N-2) 번</strong></p><h3 id="3-에라토스테네스의-체"><a href="#3-에라토스테네스의-체" class="headerlink" title="3. 에라토스테네스의 체"></a>3. 에라토스테네스의 체</h3><p>에라토스테네스의 체는 매우 간단한 아이디어입니다. 위에서 모든 자연수는 소수들의 곱으로 표현이 된다고 했습니다. 제일 작은 소수 2부터 시작합니다. 2부터 N-1까지의 수 중에서 2의 배수를 모두 체로 거르고 남은 숫자들 중에서 3의 배수로 거르고를 반복해서 제곱근N 까지 나눠서 걸러지지 않고 남은 수들이 모두 소수가 됩니다.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> num;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"소수를 구할 수를 입력하세요 : "</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; num;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">bool</span>* prime = <span class="keyword">new</span> <span class="keyword">bool</span>[num+<span class="number">1</span>];</span><br><span class="line">  <span class="built_in">memset</span>(prime, <span class="number">0</span>, <span class="keyword">sizeof</span>(<span class="keyword">bool</span>) * (num + <span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">2</span>; i&lt;=num; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (prime[i] == <span class="literal">false</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=i*<span class="number">2</span>; j&lt;=num; j+=i) &#123;</span><br><span class="line">                prime[j] = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=num; i++) &#123;</span><br><span class="line">        prime[i] = !prime[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(prime[num]) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; num &lt;&lt; <span class="string">"은 소수입니다."</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; num &lt;&lt; <span class="string">"은 소수가 아닙니다."</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>주어진 수가 소수인지 아닌지 판별만 할 경우는 2번째 방법을 사용하는 것이 좋습니다.</strong><br><strong>그러나 다음 <a href="https://www.acmicpc.net/problem/1963" target="_blank" rel="noopener">문제</a>처럼 주어진 수 까지의 모든 소수를 구하기 위해서는 에라토스테네스의 체를 사용합니다.</strong></p><p>다시 한번 간단하게 에라토스테네스의 체를 정리하며 마무리 하겠습니다.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">prime[<span class="number">10000</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">if</span> (prime[i] == <span class="literal">false</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = i*<span class="number">2</span>; j &lt; <span class="number">10000</span>; j += i) &#123;</span><br><span class="line">      prime[j] = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">  prime[i] = !prime[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>참고 : <a href="https://ko.wikipedia.org/wiki/%EC%97%90%EB%9D%BC%ED%86%A0%EC%8A%A4%ED%85%8C%EB%84%A4%EC%8A%A4%EC%9D%98_%EC%B2%B4" target="_blank" rel="noopener">에라토스테네스의 체 - 위키백과</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;code&gt;소수(Prime Number)&lt;/code&gt;는 &lt;strong&gt;약수로 1과 자기 자신만을 가지는 정수입니다.&lt;/strong&gt; 정수론의 기본 정리에 의해 &lt;strong&gt;모든 자연수는 단 하나의 소수들의 곱으로 표현됩니다.&lt;/strong&gt;&lt;/
      
    
    </summary>
    
      <category term="Algorithm" scheme="https://jongmin92.github.io/categories/Algorithm/"/>
    
      <category term="Concept" scheme="https://jongmin92.github.io/categories/Algorithm/Concept/"/>
    
    
      <category term="Algorithm" scheme="https://jongmin92.github.io/tags/Algorithm/"/>
    
      <category term="Prime" scheme="https://jongmin92.github.io/tags/Prime/"/>
    
      <category term="소수 구하기" scheme="https://jongmin92.github.io/tags/%EC%86%8C%EC%88%98-%EA%B5%AC%ED%95%98%EA%B8%B0/"/>
    
      <category term="에라토스테네스의 체" scheme="https://jongmin92.github.io/tags/%EC%97%90%EB%9D%BC%ED%86%A0%EC%8A%A4%ED%85%8C%EB%84%A4%EC%8A%A4%EC%9D%98-%EC%B2%B4/"/>
    
  </entry>
  
  <entry>
    <title>이진 탐색 (Binary Search)</title>
    <link href="https://jongmin92.github.io/2017/10/23/Algorithm/Concept/binary-search/"/>
    <id>https://jongmin92.github.io/2017/10/23/Algorithm/Concept/binary-search/</id>
    <published>2017-10-23T04:25:00.000Z</published>
    <updated>2018-02-05T01:06:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>주어진 배열에서 <strong>특정한 요소(target)</strong> 을 찾아내는 상황을 가정해 봅시다. 가장 쉬운 방법은 각각의 배열 요소와 target 값을 같은지 순차적으로 모두 비교하는 것입니다. 만약 배열의 크기가 n이라고 했을때, 이 알고리즘의 시간복잡도를 Big-O notation을 이용해 나타낸다면 <strong><code>O(n)</code></strong>이 될 것 입니다.<br>그러나 더 효율적이고 빠르게 target 을 찾아내는 방법이 있습니다. 이 방법은 매 탐색마다 target을 찾기위한 배열의 크기를 절반으로 줄여가면서 탐색을 하는 것입니다. 정확히는 기존의 배열은 유지하지만 탐색해야하는 범위를 계속 절반으로 줄이는 것입니다. 이런식으로 탐색하는 방법이 바로 이진 탐색(Binary Search) 알고리즘입니다. 다만 이진 탐색 알고리즘은 순차 탐색과는 달리 <strong><code>배열의 데이터들이 정렬된 상태에서만 적용할 수 있다는 특징이 있습니다.</code></strong> 정렬이 되지 않은 데이터는 이진 탐색을 적용할 수 없습니다.<br>쉽게 생각해보면 만약 배열의 요소들이 정렬되지 않은 상태라면, 매 탐색마다 target을 찾기 위해 검사해야하는 배열의 범위를 줄이지 못할 것입니다. (정렬되어 있다 라는 기준이 없기 때문에 탐색해야 하는 배열의 시작과 끝 범위를 정할 수 있는 근거가 없기 때문입니다.)</p><h3 id="이진-탐색-절차"><a href="#이진-탐색-절차" class="headerlink" title="이진 탐색 절차"></a>이진 탐색 절차</h3><p>크기가 n인 리스트 data에서 target 이라는 특정 요소를 찾아낸다고 가정했을 때, 이진 탐색의 절차는 다음과 같습니다. (리스트는 오름차순으로 정렬되어 있습니다.)</p><ol><li>begin = 0, end = n − 1 로 초기화 합니다.</li><li>mid 는 (begin + end) 를 2 로 나눈 몫으로 결정합니다.</li><li>data[mid] 와 target 이 서로 같으면 목적을 달성했으므로 탐색을 종료합니다.</li><li>만약 target &lt; data[mid] 이면 end = mid-1 로 업데이트 한 후, 2번으로 돌아갑니다. 만약 target &gt; data[mid] 라면 begin = mid+1 로 업데이트 한 후, 2번으로 돌아갑니다.</li></ol><p>위 과정에서 begin, end, mid는 리스트의 index를 의미합니다. 또한 target과 data[mid]의 대소관계에 따라 다음 탐색 방향을 선택하게 됩니다. 이 과정은 리스트의 요소가 오름차순인지 내림차순인지에 따라 다르게 구현됩니다.</p><p>먼저 코드를 작성하기 전에 그림과 함께 과정을 살펴보겠습니다.</p><p><img src="/images/post/2017-10-23/step_1.png" alt=""><br>위의 리스트에서 15라는 데이터를 탐색하겠습니다. 먼저 첫번째 과정으로 데이터 집합의 중앙 요소를 선택합니다.</p><p><img src="/images/post/2017-10-23/step_2.png" alt=""><br>두번째 과정으로는 중앙 요소의 값과 찾으려는 값을 서로 비교하게 되는데, 만약 찾으려는 값이 중앙 요소의 값보다 작다면 중앙 요소의 왼편에서 중앙 요소를 다시 선택하고, 반대로 찾으려는 값이 중앙 요소의 값보다 크다면 오른편에서 중앙 요소를 다시 선택합니다. 그리고 다시 이 과정을 반복하는 것입니다. 위의 경우에는 찾으려는 값인 15가 중앙값 9보다 크기 때문에 중앙값 왼편은 탐색할 필요가 없습니다. 따라서 중앙 요소의 오른편에서 다시 중앙값을 선택합니다.</p><p><img src="/images/post/2017-10-23/step_3.png" alt=""><br>이제는 중앙값이 17입니다. 중앙값이 찾고자 하는 값인 15보다 크기 때문에 중앙값 왼편에서 다시 테이터를 탐색합니다.</p><p><img src="/images/post/2017-10-23/step_4.png" alt=""><br>왼편에서 중앙값을 택합니다. 이제 중앙값과 찾고자 하는 데이터가 같기 때문에 탐색을 종료합니다.</p><h3 id="이진-탐색-성능"><a href="#이진-탐색-성능" class="headerlink" title="이진 탐색 성능"></a>이진 탐색 성능</h3><p><strong>이진 탐색은 한번 비교를 할때마다, 탐색의 범위가 반으로 줄어듭니다. 데이터 리스트의 크기를 n이라 하고, 반복 횟수를 k라고 한다면 다음과 같은 수식이 만들어 집니다.</strong><br><img src="/images/post/2017-10-23/result.png" alt=""><br>위는 데이터 리스트의 크기인 n을 2로 몇번을 나누어야 1이 되는지 말해주는 식으로, 위 수식을 정리하면 k=log2(n)이 되는 것입니다. 위 수식을 통해 데이터 리스트의 크기가 500만개라면 최대 22회, 1000만개라면 최대 23회의 탐색으로 데이터를 찾아낼 수 있다는 것입니다.</p><h3 id="의사-코드-수도-코드"><a href="#의사-코드-수도-코드" class="headerlink" title="의사 코드 (수도 코드)"></a>의사 코드 (수도 코드)</h3><p>먼저 의사 코드를 살펴보겠습니다.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">BinarySearch(A[0...N-1], target, begin, end) &#123;</span><br><span class="line">    if (begin &gt; end)</span><br><span class="line">        return -1 // not found</span><br><span class="line">    mid = (begin + end) / 2</span><br><span class="line">    if (A[mid] &lt; target)</span><br><span class="line">        return BinarySearch(A, target, mid+1, end)</span><br><span class="line">    else if (A[mid] &gt; target)</span><br><span class="line">        return BinarySearch(A, target, begin, mid-1)</span><br><span class="line">    else</span><br><span class="line">        return mid // found</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>출처 : <a href="https://ko.wikipedia.org/wiki/%EC%9D%B4%EC%A7%84_%EA%B2%80%EC%83%89_%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98" target="_blank" rel="noopener">위키백과 - 이진 검색 알고리즘</a></p><h3 id="c-코드"><a href="#C-코드" class="headerlink" title="C++ 코드"></a>C++ 코드</h3><p>위의 의사 코드를 C++ 코드로 다시 작성하면 다음과 같습니다.<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">BinarySearch</span><span class="params">(<span class="keyword">int</span> A[], <span class="keyword">int</span> target, <span class="keyword">int</span> begin, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (begin &gt; end)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    mid = (begin + end) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (A[mid] &lt; target)</span><br><span class="line">        <span class="keyword">return</span> BinarySearch(A, target, mid + <span class="number">1</span>, end);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (A[mid] &gt; target)</span><br><span class="line">        <span class="keyword">return</span> BinarySearch(A, target, begin, mid + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> mid;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;주어진 배열에서 &lt;strong&gt;특정한 요소(target)&lt;/strong&gt; 을 찾아내는 상황을 가정해 봅시다. 가장 쉬운 방법은 각각의 배열 요소와 target 값을 같은지 순차적으로 모두 비교하는 것입니다. 만약 배열의 크기가 n이라고 했을때, 
      
    
    </summary>
    
      <category term="Algorithm" scheme="https://jongmin92.github.io/categories/Algorithm/"/>
    
      <category term="Concept" scheme="https://jongmin92.github.io/categories/Algorithm/Concept/"/>
    
    
      <category term="Algorithm" scheme="https://jongmin92.github.io/tags/Algorithm/"/>
    
      <category term="Search" scheme="https://jongmin92.github.io/tags/Search/"/>
    
  </entry>
  
  <entry>
    <title>&lt;12100&gt; 2048 (Easy)</title>
    <link href="https://jongmin92.github.io/2017/10/12/Algorithm/boj-12100/"/>
    <id>https://jongmin92.github.io/2017/10/12/Algorithm/boj-12100/</id>
    <published>2017-10-12T14:15:00.000Z</published>
    <updated>2018-02-05T01:06:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>문제 : <a href="https://www.acmicpc.net/problem/12100" target="_blank" rel="noopener">https://www.acmicpc.net/problem/12100</a></p><p><strong>째로탈출2</strong>처럼 코드가 깁니다… 째로탈출2와 마찬가지로 2차원 배열을 조작하는 부분에서 코드가 많이 길어지게 되는데 더 간결하게 만들 수 있도록 연습을 해야할 것 같습니다.<br>구현은 <code>combine_map</code>함수를 통해서 방향에 맞게 같은 숫자를 합쳐주고 <code>move_map</code>함수를 통해 빈공간을 제거하는것을 반복하도록 구현했습니다. Easy의 경우 5회 반복이기 때문에 대부분 시간초과 경우는 없을 것 입니다.<br>(테스트 케이스가 문제에 1개 밖에 없다보니 힘들었습니다… 테스트 케이스가 부족하신 분들은 문제 게시판에 가시면 더 찾아보실 수 있습니다.)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAP_MAX_SIZE 20</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> <span class="built_in">map</span>[MAP_MAX_SIZE][MAP_MAX_SIZE];</span><br><span class="line"><span class="keyword">int</span> N;</span><br><span class="line"><span class="keyword">int</span> max_dp[<span class="number">6</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init_map</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; N; j++) &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; <span class="built_in">map</span>[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void copy_map(int(*map)[MAP_MAX_SIZE], int(*tmp_map)[MAP_MAX_SIZE]) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; N; j++) &#123;</span><br><span class="line">            tmp_map[i][j] = <span class="built_in">map</span>[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void recovery_map(int(*map)[MAP_MAX_SIZE], int(*tmp_map)[MAP_MAX_SIZE]) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; N; j++) &#123;</span><br><span class="line">            <span class="built_in">map</span>[i][j] = tmp_map[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">combine_map</span><span class="params">(<span class="keyword">int</span> dir)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 상</span></span><br><span class="line">    <span class="keyword">if</span> (dir == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> c = <span class="number">0</span>; c &lt; N; c++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> r = <span class="number">0</span>; r &lt; N - <span class="number">1</span>; r++) &#123;</span><br><span class="line">                <span class="keyword">int</span> data1 = <span class="built_in">map</span>[r][c];</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (data1 == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = r + <span class="number">1</span>; k &lt; N; k++) &#123;</span><br><span class="line">                    <span class="keyword">int</span> data2 = <span class="built_in">map</span>[k][c];</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (data2 == <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">if</span> (data1 == data2) &#123;</span><br><span class="line">                            <span class="built_in">map</span>[r][c] *= <span class="number">2</span>;</span><br><span class="line">                            <span class="built_in">map</span>[k][c] = <span class="number">0</span>;</span><br><span class="line">                            r = k;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 하</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (dir == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> c = <span class="number">0</span>; c &lt; N; c++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> r = N<span class="number">-1</span>; r &gt; <span class="number">0</span>; r--) &#123;</span><br><span class="line">                <span class="keyword">int</span> data1 = <span class="built_in">map</span>[r][c];</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (data1 == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = r - <span class="number">1</span>; k &gt;= <span class="number">0</span>; k--) &#123;</span><br><span class="line">                    <span class="keyword">int</span> data2 = <span class="built_in">map</span>[k][c];</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (data2 == <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">if</span> (data1 == data2) &#123;</span><br><span class="line">                            <span class="built_in">map</span>[r][c] *= <span class="number">2</span>;</span><br><span class="line">                            <span class="built_in">map</span>[k][c] = <span class="number">0</span>;</span><br><span class="line">                            r = k;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 좌</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (dir == <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> r = <span class="number">0</span>; r &lt; N; r++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> c = <span class="number">0</span>; c &lt; N - <span class="number">1</span>; c++) &#123;</span><br><span class="line">                <span class="keyword">int</span> data1 = <span class="built_in">map</span>[r][c];</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (data1 == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = c + <span class="number">1</span>; k &lt; N; k++) &#123;</span><br><span class="line">                    <span class="keyword">int</span> data2 = <span class="built_in">map</span>[r][k];</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (data2 == <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">if</span> (data1 == data2) &#123;</span><br><span class="line">                            <span class="built_in">map</span>[r][c] *= <span class="number">2</span>;</span><br><span class="line">                            <span class="built_in">map</span>[r][k] = <span class="number">0</span>;</span><br><span class="line">                            c = k;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 우</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (dir == <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> r = <span class="number">0</span>; r &lt; N; r++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> c = N<span class="number">-1</span>; c &gt; <span class="number">0</span>; c--) &#123;</span><br><span class="line">                <span class="keyword">int</span> data1 = <span class="built_in">map</span>[r][c];</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (data1 == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = c - <span class="number">1</span>; k &gt;= <span class="number">0</span>; k--) &#123;</span><br><span class="line">                    <span class="keyword">int</span> data2 = <span class="built_in">map</span>[r][k];</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (data2 == <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">if</span> (data1 == data2) &#123;</span><br><span class="line">                            <span class="built_in">map</span>[r][c] *= <span class="number">2</span>;</span><br><span class="line">                            <span class="built_in">map</span>[r][k] = <span class="number">0</span>;</span><br><span class="line">                            c = k;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">move_map</span><span class="params">(<span class="keyword">int</span> dir)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> max_value = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 상</span></span><br><span class="line">    <span class="keyword">if</span> (dir == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> c = <span class="number">0</span>; c &lt; N; c++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> r = <span class="number">0</span>; r &lt; N; r++) &#123;</span><br><span class="line">                max_value = max(max_value, <span class="built_in">map</span>[r][c]);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">map</span>[r][c] == <span class="number">0</span> &amp;&amp; r != N - <span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> k = r+<span class="number">1</span>; k &lt; N; k++) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (<span class="built_in">map</span>[k][c] != <span class="number">0</span>) &#123;</span><br><span class="line">                            <span class="built_in">map</span>[r][c] = <span class="built_in">map</span>[k][c];</span><br><span class="line">                            <span class="built_in">map</span>[k][c] = <span class="number">0</span>;</span><br><span class="line">                            max_value = max(max_value, <span class="built_in">map</span>[r][c]);</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 하</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (dir == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> c = <span class="number">0</span>; c &lt; N; c++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> r = N<span class="number">-1</span>; r &gt;= <span class="number">0</span>; r--) &#123;</span><br><span class="line">                max_value = max(max_value, <span class="built_in">map</span>[r][c]);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">map</span>[r][c] == <span class="number">0</span> &amp;&amp; r != <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> k = r - <span class="number">1</span>; k &gt;= <span class="number">0</span>; k--) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (<span class="built_in">map</span>[k][c] != <span class="number">0</span>) &#123;</span><br><span class="line">                            <span class="built_in">map</span>[r][c] = <span class="built_in">map</span>[k][c];</span><br><span class="line">                            <span class="built_in">map</span>[k][c] = <span class="number">0</span>;</span><br><span class="line">                            max_value = max(max_value, <span class="built_in">map</span>[r][c]);</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//좌</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (dir == <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> r = <span class="number">0</span>; r &lt; N; r++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> c = <span class="number">0</span>; c &lt; N; c++) &#123;</span><br><span class="line">                max_value = max(max_value, <span class="built_in">map</span>[r][c]);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">map</span>[r][c] == <span class="number">0</span> &amp;&amp; c != N<span class="number">-1</span>) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> k = c + <span class="number">1</span>; k &lt; N; k++) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (<span class="built_in">map</span>[r][k] != <span class="number">0</span>) &#123;</span><br><span class="line">                            <span class="built_in">map</span>[r][c] = <span class="built_in">map</span>[r][k];</span><br><span class="line">                            <span class="built_in">map</span>[r][k] = <span class="number">0</span>;</span><br><span class="line">                            max_value = max(max_value, <span class="built_in">map</span>[r][c]);</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//우</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (dir == <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> r = <span class="number">0</span>; r &lt; N; r++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> c = N<span class="number">-1</span>; c &gt;= <span class="number">0</span>; c--) &#123;</span><br><span class="line">                max_value = max(max_value, <span class="built_in">map</span>[r][c]);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">map</span>[r][c] == <span class="number">0</span> &amp;&amp; c != <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> k = c - <span class="number">1</span>; k &gt;= <span class="number">0</span>; k--) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (<span class="built_in">map</span>[r][k] != <span class="number">0</span>) &#123;</span><br><span class="line">                            <span class="built_in">map</span>[r][c] = <span class="built_in">map</span>[r][k];</span><br><span class="line">                            <span class="built_in">map</span>[r][k] = <span class="number">0</span>;</span><br><span class="line">                            max_value = max(max_value, <span class="built_in">map</span>[r][c]);</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> max_value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> cnt, <span class="keyword">int</span> max_value)</span> </span>&#123;</span><br><span class="line">    max_dp[cnt] = max(max_dp[cnt], max_value);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (cnt &gt;= <span class="number">5</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 상, 하, 좌, 우</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> dir = <span class="number">0</span>; dir &lt; <span class="number">4</span>; dir++) &#123;</span><br><span class="line">        <span class="keyword">int</span> tmp_map[MAP_MAX_SIZE][MAP_MAX_SIZE];</span><br><span class="line">        copy_map(<span class="built_in">map</span>, tmp_map);</span><br><span class="line"></span><br><span class="line">        combine_map(dir);                  <span class="comment">// 기울인 방향으로 합치기</span></span><br><span class="line">        <span class="keyword">int</span> value = move_map(dir);      <span class="comment">// 빈칸 땡기기 &amp; 현재 최대값 반환</span></span><br><span class="line">        dfs(cnt + <span class="number">1</span>, value);</span><br><span class="line"></span><br><span class="line">        recovery_map(<span class="built_in">map</span>, tmp_map);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; N;</span><br><span class="line"></span><br><span class="line">    init_map();</span><br><span class="line">    dfs(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; max_dp[<span class="number">5</span>] &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;문제 : &lt;a href=&quot;https://www.acmicpc.net/problem/12100&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.acmicpc.net/problem/12100&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;str
      
    
    </summary>
    
      <category term="Algorithm" scheme="https://jongmin92.github.io/categories/Algorithm/"/>
    
      <category term="BOJ" scheme="https://jongmin92.github.io/categories/Algorithm/BOJ/"/>
    
    
      <category term="Algorithm" scheme="https://jongmin92.github.io/tags/Algorithm/"/>
    
      <category term="BOJ" scheme="https://jongmin92.github.io/tags/BOJ/"/>
    
      <category term="백준" scheme="https://jongmin92.github.io/tags/%EB%B0%B1%EC%A4%80/"/>
    
  </entry>
  
  <entry>
    <title>&lt;13460&gt; 째로탈출 2</title>
    <link href="https://jongmin92.github.io/2017/10/11/Algorithm/boj-13460/"/>
    <id>https://jongmin92.github.io/2017/10/11/Algorithm/boj-13460/</id>
    <published>2017-10-11T06:51:00.000Z</published>
    <updated>2018-02-05T01:06:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>문제 : <a href="https://www.acmicpc.net/problem/13460" target="_blank" rel="noopener">https://www.acmicpc.net/problem/13460</a></p><p>처음 풀이 방향을 잘못 잡고, 풀이시 여러 예외 사향을 잘못 생각하는 바람에 시간이 오래 걸렸습니다.<br>코드가 조금 긴 편입니다… 저는 dfs를 활용해서 풀었습니다. 주의해야 할 사항이 몇가지 있었는데,<br><strong>1. 이미 기울였던 방향과 그 반대방향으로 다시 기울여서는 안된다.</strong> (이미 기울였던 방향으로 다시 기울이게 된다면 결과는 같을 것 입니다. 또한 방금 기울였던 방향의 반대로 기울인다면 이전과 같은 상태로 돌아가게 됩니다.)<br><strong>2. 기울인 후 파란공과 빨간공의 위치가 겹친다면 기울이기 전의  (1) 기울인 방향, (2) 파란공 위치, (3) 빨간공 위치 를 고려하여 다시 위치를 변경</strong>해주어야 한다.</p><p>위의 2가지 주의사항을 고려해서 푼다면 큰 문제 없이 풀 수 있을것 입니다.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAP_MAX_SIZE 10</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ANS_MAX 11</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> <span class="built_in">map</span>[MAP_MAX_SIZE][MAP_MAX_SIZE];</span><br><span class="line"><span class="keyword">int</span> N, M;</span><br><span class="line"><span class="keyword">int</span> ans = ANS_MAX;</span><br><span class="line"><span class="keyword">int</span> rx, ry, bx, by, hx, hy;</span><br><span class="line"><span class="keyword">bool</span> is_r_hall_in, is_b_hall_in;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init_map</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; M; j++) &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; c;</span><br><span class="line">            <span class="built_in">map</span>[i][j] = c;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (c == <span class="string">'R'</span>) &#123;</span><br><span class="line">                rx = i;</span><br><span class="line">                ry = j;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">'B'</span>) &#123;</span><br><span class="line">                bx = i;</span><br><span class="line">                by = j;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">'O'</span>) &#123;</span><br><span class="line">                hx = i;</span><br><span class="line">                hy = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_deposit_dir</span><span class="params">(<span class="keyword">int</span> dir)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (dir == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (dir == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (dir == <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (dir == <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_priority</span><span class="params">(<span class="keyword">int</span> dir)</span> </span>&#123; <span class="comment">// 0 = 빨간공, 1 = 파란공</span></span><br><span class="line">    <span class="keyword">int</span> priority = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 상</span></span><br><span class="line">    <span class="keyword">if</span> (dir == <span class="number">0</span>) &#123;</span><br><span class="line">        priority = bx &lt; rx;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 하</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (dir == <span class="number">1</span>) &#123;</span><br><span class="line">        priority = bx &gt; rx;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 좌</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (dir == <span class="number">2</span>) &#123;</span><br><span class="line">        priority = by &lt; ry;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 우</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (dir == <span class="number">3</span>) &#123;</span><br><span class="line">        priority = by &gt; ry;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> priority;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">move_x</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> dir)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> nx = x;</span><br><span class="line">    <span class="keyword">char</span> type;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (dir == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = x - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">            type = <span class="built_in">map</span>[i][y];</span><br><span class="line">            <span class="keyword">if</span> (type == <span class="string">'#'</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (type == <span class="string">'O'</span>) &#123;</span><br><span class="line">                nx = i;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                nx = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = x + <span class="number">1</span>; i &lt; N - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            type = <span class="built_in">map</span>[i][y];</span><br><span class="line">            <span class="keyword">if</span> (type == <span class="string">'#'</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (type == <span class="string">'O'</span>) &#123;</span><br><span class="line">                nx = i;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                nx = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> nx;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">move_y</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> dir)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ny = y;</span><br><span class="line">    <span class="keyword">char</span> type;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (dir == <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = y - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">            type = <span class="built_in">map</span>[x][i];</span><br><span class="line">            <span class="keyword">if</span> (type == <span class="string">'#'</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (type == <span class="string">'O'</span>) &#123;</span><br><span class="line">                ny = i;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                ny = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = y + <span class="number">1</span>; i &lt; M - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            type = <span class="built_in">map</span>[x][i];</span><br><span class="line">            <span class="keyword">if</span> (type == <span class="string">'#'</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (type == <span class="string">'O'</span>) &#123;</span><br><span class="line">                ny = i;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                ny = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ny;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">move</span><span class="params">(<span class="keyword">int</span> dir)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (dir == <span class="number">0</span> || dir == <span class="number">1</span>) &#123; <span class="comment">// 상, 하</span></span><br><span class="line">        rx = move_x(rx, ry, dir);</span><br><span class="line">        bx = move_x(bx, by, dir);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123; <span class="comment">// 좌, 우</span></span><br><span class="line">        ry = move_y(rx, ry, dir);</span><br><span class="line">        by = move_y(bx, by, dir);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">check_hall_in</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (bx == hx &amp;&amp; by == hy) &#123;</span><br><span class="line">        is_b_hall_in = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (rx == hx &amp;&amp; ry == hy) &#123;</span><br><span class="line">        is_r_hall_in = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">priority_move</span><span class="params">(<span class="keyword">int</span> priority, <span class="keyword">int</span> dir)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (dir == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (priority == <span class="number">0</span>) &#123;</span><br><span class="line">            bx = bx + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            rx = rx + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (dir == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (priority == <span class="number">0</span>) &#123;</span><br><span class="line">            bx = bx - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            rx = rx - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (dir == <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (priority == <span class="number">0</span>) &#123;</span><br><span class="line">            by = by + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            ry = ry + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (dir == <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (priority == <span class="number">0</span>) &#123;</span><br><span class="line">            by = by - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            ry = ry - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> pre_dir, <span class="keyword">int</span> cnt)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (cnt &gt; <span class="number">10</span>) &#123;</span><br><span class="line">        is_b_hall_in = <span class="literal">false</span>;</span><br><span class="line">        is_r_hall_in = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (is_b_hall_in) &#123;</span><br><span class="line">        is_b_hall_in = <span class="literal">false</span>;</span><br><span class="line">        is_r_hall_in = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (is_r_hall_in) &#123;</span><br><span class="line">            is_b_hall_in = <span class="literal">false</span>;</span><br><span class="line">            is_r_hall_in = <span class="literal">false</span>;</span><br><span class="line">            ans = min(ans, cnt);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> brx = rx;</span><br><span class="line">    <span class="keyword">int</span> bry = ry;</span><br><span class="line">    <span class="keyword">int</span> bbx = bx;</span><br><span class="line">    <span class="keyword">int</span> bby = by;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 상, 하, 좌, 우</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> dir = <span class="number">0</span>; dir &lt; <span class="number">4</span>; dir++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (dir == pre_dir || dir == get_deposit_dir(pre_dir)) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> priority = get_priority(dir);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 이동 &amp; 홀 인 체크</span></span><br><span class="line">        move(dir);</span><br><span class="line">        check_hall_in();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 공이 겹칠 경우, 우선순위에 따라 이동</span></span><br><span class="line">        <span class="keyword">if</span> (rx == bx &amp;&amp; ry == by) &#123;</span><br><span class="line">            priority_move(priority, dir);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (brx != rx || bry != ry || bbx != bx || bby != by) &#123;</span><br><span class="line">            dfs(dir, cnt + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        rx = brx;</span><br><span class="line">        ry = bry;</span><br><span class="line">        bx = bbx;</span><br><span class="line">        by = bby;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; N &gt;&gt; M;</span><br><span class="line"></span><br><span class="line">    init_map();</span><br><span class="line">    dfs(<span class="number">-1</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ans == ANS_MAX) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="number">-1</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;문제 : &lt;a href=&quot;https://www.acmicpc.net/problem/13460&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.acmicpc.net/problem/13460&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;처음 풀
      
    
    </summary>
    
      <category term="Algorithm" scheme="https://jongmin92.github.io/categories/Algorithm/"/>
    
      <category term="BOJ" scheme="https://jongmin92.github.io/categories/Algorithm/BOJ/"/>
    
    
      <category term="Algorithm" scheme="https://jongmin92.github.io/tags/Algorithm/"/>
    
      <category term="BOJ" scheme="https://jongmin92.github.io/tags/BOJ/"/>
    
      <category term="백준" scheme="https://jongmin92.github.io/tags/%EB%B0%B1%EC%A4%80/"/>
    
  </entry>
  
  <entry>
    <title>&lt;11054&gt; 가장 긴 바이토닉 부분 수열</title>
    <link href="https://jongmin92.github.io/2017/10/02/Algorithm/boj-11054/"/>
    <id>https://jongmin92.github.io/2017/10/02/Algorithm/boj-11054/</id>
    <published>2017-10-02T14:00:00.000Z</published>
    <updated>2018-02-05T01:06:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>문제 : <a href="https://www.acmicpc.net/problem/11054" target="_blank" rel="noopener">https://www.acmicpc.net/problem/11054</a></p><p>먼저 <strong>증가하는 수열의 최대 길이</strong>와 <strong>감소하는 수열의 최대 길이</strong>를 구해주었습니다.<br>그 후 각 자리의 최대 길이를 서로 더해준 후 max 값을 비교하여 해결했습니다.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> max_value = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a(n);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; plus(n); <span class="comment">// 증가하는 수열의 최대 길이</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; minus(n); <span class="comment">// 감소하는 수열의 최대 길이</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        plus[i] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[j] &lt; a[i] &amp;&amp; plus[i] &lt; plus[j] + <span class="number">1</span>) &#123;</span><br><span class="line">                plus[i] = plus[j] + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = n<span class="number">-1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        minus[i] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = n<span class="number">-1</span>; j &gt; i; j--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[j] &lt; a[i] &amp;&amp; minus[i] &lt; minus[j] + <span class="number">1</span>) &#123;</span><br><span class="line">                minus[i] = minus[j] + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        max_value = max(max_value, plus[i] + minus[i] - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; max_value &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;문제 : &lt;a href=&quot;https://www.acmicpc.net/problem/11054&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.acmicpc.net/problem/11054&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;먼저 &lt;
      
    
    </summary>
    
      <category term="Algorithm" scheme="https://jongmin92.github.io/categories/Algorithm/"/>
    
      <category term="BOJ" scheme="https://jongmin92.github.io/categories/Algorithm/BOJ/"/>
    
    
      <category term="Algorithm" scheme="https://jongmin92.github.io/tags/Algorithm/"/>
    
      <category term="BOJ" scheme="https://jongmin92.github.io/tags/BOJ/"/>
    
      <category term="백준" scheme="https://jongmin92.github.io/tags/%EB%B0%B1%EC%A4%80/"/>
    
  </entry>
  
  <entry>
    <title>&lt;2632&gt; 피자판매</title>
    <link href="https://jongmin92.github.io/2017/10/02/Algorithm/boj-2632/"/>
    <id>https://jongmin92.github.io/2017/10/02/Algorithm/boj-2632/</id>
    <published>2017-10-02T11:00:00.000Z</published>
    <updated>2018-02-05T01:06:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>문제 : <a href="https://www.acmicpc.net/problem/2632" target="_blank" rel="noopener">https://www.acmicpc.net/problem/2632</a></p><p>피자가 붙어있어야 한다는 조건 때문에 정렬을 할수가 없었습니다. 먼저 A와 B 각각의 피자판에서 만들어 질 수 있는 모든 합의 경우를 map을 사용해 저장한 후 목표하는 크기의 피자를 만들 수 있는 경우를 출력하는식으로 문제를 해결했습니다.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_SIZE 1000</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> target;</span><br><span class="line"><span class="keyword">int</span> m, n;</span><br><span class="line"><span class="keyword">int</span> a[MAX_SIZE], b[MAX_SIZE];</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; a_sum, b_sum;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_all_sum</span><span class="params">(<span class="keyword">int</span>* arr, <span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&amp; sum_map, <span class="keyword">int</span> size)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; size; i++) &#123; <span class="comment">// 1개~suze-1개로 만들 수 있는 경우 모두 구하기</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; size; j++) &#123; <span class="comment">// 시작하는 피자 순서</span></span><br><span class="line">            <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= i; k++) &#123; <span class="comment">// j번째 피자부터 i개 만큼 더하기</span></span><br><span class="line">                <span class="keyword">if</span> (j+k<span class="number">-1</span> &lt; size) &#123;</span><br><span class="line">                    sum += arr[j+k<span class="number">-1</span>];</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    sum += arr[j+k<span class="number">-1</span>-size];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            sum_map[sum] = sum_map[sum] + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123; <span class="comment">// 피자의 모든 조각(size) 합</span></span><br><span class="line">        sum += arr[i];</span><br><span class="line">    &#125;</span><br><span class="line">    sum_map[sum] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios_base::sync_with_stdio (<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; target &gt;&gt; m &gt;&gt; n;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; b[j];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    get_all_sum(a, a_sum, m);</span><br><span class="line">    get_all_sum(b, b_sum, n);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> cnt = a_sum[target] + b_sum[target]; <span class="comment">// a와 b 각각의 피자만 사용해서 만드는 경우</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; target; i++) &#123; <span class="comment">// a와 b피자 같이 사용해서 만드는 경우</span></span><br><span class="line">        <span class="keyword">if</span> (a_sum[i] &amp;&amp; b_sum[target-i]) &#123;</span><br><span class="line">            cnt += (a_sum[i] * b_sum[target-i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; cnt &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;문제 : &lt;a href=&quot;https://www.acmicpc.net/problem/2632&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.acmicpc.net/problem/2632&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;피자가 붙어
      
    
    </summary>
    
      <category term="Algorithm" scheme="https://jongmin92.github.io/categories/Algorithm/"/>
    
      <category term="BOJ" scheme="https://jongmin92.github.io/categories/Algorithm/BOJ/"/>
    
    
      <category term="Algorithm" scheme="https://jongmin92.github.io/tags/Algorithm/"/>
    
      <category term="BOJ" scheme="https://jongmin92.github.io/tags/BOJ/"/>
    
      <category term="백준" scheme="https://jongmin92.github.io/tags/%EB%B0%B1%EC%A4%80/"/>
    
  </entry>
  
  <entry>
    <title>&lt;5014&gt; 스타트링크</title>
    <link href="https://jongmin92.github.io/2017/10/01/Algorithm/boj-5014/"/>
    <id>https://jongmin92.github.io/2017/10/01/Algorithm/boj-5014/</id>
    <published>2017-10-01T06:00:00.000Z</published>
    <updated>2018-02-05T01:06:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>문제 : <a href="https://www.acmicpc.net/problem/5014" target="_blank" rel="noopener">https://www.acmicpc.net/problem/5014</a></p><p>BFS를 사용해 쉽게 해결할 수 있습니다. 다만 if 문에서 visit 배열로 층의 방문 여부를 체크하기전에 배열의 index가 유효한 범위에 속해있는지 확인을 먼저해주어야 합니다.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_SIZE 1000001</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> visit[MAX_SIZE];</span><br><span class="line"><span class="keyword">int</span> cnt[MAX_SIZE];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> f, s, g, u, d; <span class="comment">// 전체 층, 현재 층, 목표 층, 업 층, 다운 층</span></span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; f &gt;&gt; s &gt;&gt; g &gt;&gt; u &gt;&gt; d;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q; <span class="comment">// 층수</span></span><br><span class="line">    visit[s] = <span class="literal">true</span>;</span><br><span class="line">    cnt[s] = <span class="number">0</span>;</span><br><span class="line">    q.push(s);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(!q.empty()) &#123;</span><br><span class="line">        <span class="keyword">int</span> now_floor = q.front();</span><br><span class="line">        <span class="keyword">int</span> now_cnt = cnt[now_floor];</span><br><span class="line">        q.pop();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> next1 = now_floor + u;</span><br><span class="line">        <span class="keyword">int</span> next2 = now_floor - d;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (next1 &lt; MAX_SIZE &amp;&amp; visit[next1] == <span class="literal">false</span>) &#123;</span><br><span class="line">            q.push(next1);</span><br><span class="line">            visit[next1] = <span class="literal">true</span>;</span><br><span class="line">            cnt[next1] = now_cnt + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (next2 &gt; <span class="number">0</span> &amp;&amp; visit[next2] == <span class="literal">false</span>)  &#123;</span><br><span class="line">            q.push(next2);</span><br><span class="line">            visit[next2] = <span class="literal">true</span>;</span><br><span class="line">            cnt[next2] = now_cnt + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (visit[g] == <span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; cnt[g] &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"use the stairs"</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;문제 : &lt;a href=&quot;https://www.acmicpc.net/problem/5014&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.acmicpc.net/problem/5014&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;BFS를 사
      
    
    </summary>
    
      <category term="Algorithm" scheme="https://jongmin92.github.io/categories/Algorithm/"/>
    
      <category term="BOJ" scheme="https://jongmin92.github.io/categories/Algorithm/BOJ/"/>
    
    
      <category term="Algorithm" scheme="https://jongmin92.github.io/tags/Algorithm/"/>
    
      <category term="BOJ" scheme="https://jongmin92.github.io/tags/BOJ/"/>
    
      <category term="백준" scheme="https://jongmin92.github.io/tags/%EB%B0%B1%EC%A4%80/"/>
    
  </entry>
  
</feed>
