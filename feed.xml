<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>92Hz</title>
  <icon>https://www.gravatar.com/avatar/8b7f06e12e9f3c555a0587f51748ac7f</icon>
  <subtitle>To Be A Lean Developer!</subtitle>
  <link href="/feed.xml" rel="self"/>
  
  <link href="https://jongmin92.github.io/"/>
  <updated>2019-04-30T11:25:50.378Z</updated>
  <id>https://jongmin92.github.io/</id>
  
  <author>
    <name>KimJongMin</name>
    <email>kdhx92@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>@Bean Lite Mode &amp; inter-bean references</title>
    <link href="https://jongmin92.github.io/2019/04/30/Spring/spring-bean-lite-mode/"/>
    <id>https://jongmin92.github.io/2019/04/30/Spring/spring-bean-lite-mode/</id>
    <published>2019-04-30T10:15:00.000Z</published>
    <updated>2019-04-30T11:25:50.378Z</updated>
    
    <content type="html"><![CDATA[<h1 id="bean-methods-in-configuration-classes"><a href="#Bean-Methods-in-Configuration-Classes" class="headerlink" title="@Bean Methods in @Configuration Classes"></a>@Bean Methods in @Configuration Classes</h1><p>일반적으로 <strong><code>@Bean</code></strong> 어노테이션은 <strong><code>@Configuration</code></strong> 어노테이션이 사용된 클래스 내의 메서드에 선언이 됩니다. 이 경우 <strong>@Bean 어노테이션을 사용하는 메서드는 같은 클래스의 다른 @Bean 메소드를 직접 호출하여 참조할 수 있습니다. 이렇게하면 bean 간의 참조(reference)가 강하게 만들어집니다.</strong></p><p>아래 코드의 실행 후 로그를 통해 a() 메서드의 결과로 생성되는 A 클래스의 빈은 b() 와 c() 메서드에서 a() 메서드를 직접 호출해 참조가 되는 것을 확인할 수 있습니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ApplicationContext context;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ApplicationContext context = SpringApplication.run(TestApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Configuration</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">TestConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Bean</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> A <span class="title">a</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> A();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Bean</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> B <span class="title">b</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            A a = a();</span><br><span class="line">            System.out.println(a);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> B();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Bean</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> C <span class="title">c</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            A a = a();</span><br><span class="line">            System.out.println(a);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> C();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">B</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">C</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 샐행 결과</span></span><br><span class="line"><span class="number">2019</span>-<span class="number">04</span>-<span class="number">30</span> <span class="number">19</span>:<span class="number">41</span>:<span class="number">04.837</span>  INFO <span class="number">24509</span> --- [           main] com.example.test.TestApplication         : Starting TestApplication on AL01297960.local with PID <span class="number">24509</span> (/Users/user/work/test/build/classes/java/main started by user in /Users/user/work/test)</span><br><span class="line"><span class="number">2019</span>-<span class="number">04</span>-<span class="number">30</span> <span class="number">19</span>:<span class="number">41</span>:<span class="number">04.841</span>  INFO <span class="number">24509</span> --- [           main] com.example.test.TestApplication         : No active profile set, falling back to <span class="keyword">default</span> profiles: <span class="keyword">default</span></span><br><span class="line"><span class="number">2019</span>-<span class="number">04</span>-<span class="number">30</span> <span class="number">19</span>:<span class="number">41</span>:<span class="number">06.229</span>  INFO <span class="number">24509</span> --- [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : <span class="function">Tomcat initialized with <span class="title">port</span><span class="params">(s)</span>: 8080 <span class="params">(http)</span></span></span><br><span class="line"><span class="function">2019-04-30 19:41:06.262  INFO 24509 --- [           main] o.apache.catalina.core.StandardService   : Starting service [Tomcat]</span></span><br><span class="line"><span class="function">2019-04-30 19:41:06.262  INFO 24509 --- [           main] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.17]</span></span><br><span class="line"><span class="function">2019-04-30 19:41:06.353  INFO 24509 --- [           main] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext</span></span><br><span class="line"><span class="function">2019-04-30 19:41:06.353  INFO 24509 --- [           main] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 1441 ms</span></span><br><span class="line"><span class="function">com.example.test.TestApplication$A@42163c37</span></span><br><span class="line"><span class="function">com.example.test.TestApplication$A@42163c37</span></span><br><span class="line"><span class="function">2019-04-30 19:41:06.620  INFO 24509 --- [           main] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'</span></span><br><span class="line"><span class="function">2019-04-30 19:41:06.846  INFO 24509 --- [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on <span class="title">port</span><span class="params">(s)</span>: 8080 <span class="params">(http)</span> with context path ''</span></span><br><span class="line"><span class="function">2019-04-30 19:41:06.850  INFO 24509 --- [           main] com.example.test.TestApplication         : Started TestApplication in 2.489 <span class="title">seconds</span> <span class="params">(JVM running <span class="keyword">for</span> <span class="number">3.45</span>)</span></span></span><br></pre></td></tr></table></figure><p>이러한 관계를 <strong><code>빈 간의 참조(inter-bean references)</code></strong>라 부릅니다. 이러한 빈 간의 참조는 @Configuration 클래스의 @Bean이 cglib wrapper에 의해 래핑되기 때문에 동작하게 됩니다.(@Bean 메서드에 대한 호출을 가로채고 Bean 인스턴스를 컨텍스트에서 반환하게 됩니다.)</p><h1 id="bean-lite-mode"><a href="#Bean-Lite-Mode" class="headerlink" title="@Bean Lite Mode"></a>@Bean Lite Mode</h1><p>처음 알게된 분도 계실 수 있을텐데요, <strong>@Bean 메소드는 @Configuration으로 주석을 달지 않은 클래스 내에서도 선언 될 수도 있습니다.</strong> 이런 경우, @Bean 메서드는 <strong><code>lite mode</code></strong>로 처리됩니다.</p><p><strong>lite mode의 Bean 메서드는 스프링 컨테이너에 의해 일반 팩토리 메서드로 처리됩니다. 그렇기 때문에, lite mode에서는 빈 간의 참조가 지원되지 않습니다.</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ApplicationContext context;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ApplicationContext context = SpringApplication.run(TestApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Configuration</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">TestConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> A <span class="title">a</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> A();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Bean</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> B <span class="title">b</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            A a = a();</span><br><span class="line">            System.out.println(a);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> B();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Bean</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> C <span class="title">c</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            A a = a();</span><br><span class="line">            System.out.println(a);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> C();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">B</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">C</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 실행 결과</span></span><br><span class="line">```java</span><br><span class="line"><span class="number">2019</span>-<span class="number">04</span>-<span class="number">30</span> <span class="number">20</span>:<span class="number">02</span>:<span class="number">17.530</span>  INFO <span class="number">65524</span> --- [           main] com.example.test.TestApplication         : Starting TestApplication on AL01297960.local with PID <span class="number">65524</span> (/Users/user/work/test/build/classes/java/main started by user in /Users/user/work/test)</span><br><span class="line"><span class="number">2019</span>-<span class="number">04</span>-<span class="number">30</span> <span class="number">20</span>:<span class="number">02</span>:<span class="number">17.534</span>  INFO <span class="number">65524</span> --- [           main] com.example.test.TestApplication         : No active profile set, falling back to <span class="keyword">default</span> profiles: <span class="keyword">default</span></span><br><span class="line"><span class="number">2019</span>-<span class="number">04</span>-<span class="number">30</span> <span class="number">20</span>:<span class="number">02</span>:<span class="number">18.857</span>  INFO <span class="number">65524</span> --- [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : <span class="function">Tomcat initialized with <span class="title">port</span><span class="params">(s)</span>: 8080 <span class="params">(http)</span></span></span><br><span class="line"><span class="function">2019-04-30 20:02:18.891  INFO 65524 --- [           main] o.apache.catalina.core.StandardService   : Starting service [Tomcat]</span></span><br><span class="line"><span class="function">2019-04-30 20:02:18.891  INFO 65524 --- [           main] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.17]</span></span><br><span class="line"><span class="function">2019-04-30 20:02:18.973  INFO 65524 --- [           main] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext</span></span><br><span class="line"><span class="function">2019-04-30 20:02:18.973  INFO 65524 --- [           main] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 1368 ms</span></span><br><span class="line"><span class="function">com.example.test.TestApplication$A@919d542c</span></span><br><span class="line"><span class="function">com.example.test.TestApplication$A@414fc49c</span></span><br><span class="line"><span class="function">2019-04-30 20:02:19.240  INFO 65524 --- [           main] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'</span></span><br><span class="line"><span class="function">2019-04-30 20:02:19.471  INFO 65524 --- [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on <span class="title">port</span><span class="params">(s)</span>: 8080 <span class="params">(http)</span> with context path ''</span></span><br><span class="line"><span class="function">2019-04-30 20:02:19.474  INFO 65524 --- [           main] com.example.test.TestApplication         : Started TestApplication in 2.406 <span class="title">seconds</span> <span class="params">(JVM running <span class="keyword">for</span> <span class="number">3.2</span>)</span></span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;bean-methods-in-configuration-classes&quot;&gt;&lt;a href=&quot;#Bean-Methods-in-Configuration-Classes&quot; class=&quot;headerlink&quot; title=&quot;@Bean Methods in @
      
    
    </summary>
    
      <category term="Programming" scheme="https://jongmin92.github.io/categories/Programming/"/>
    
      <category term="Spring" scheme="https://jongmin92.github.io/categories/Programming/Spring/"/>
    
    
      <category term="Java" scheme="https://jongmin92.github.io/tags/Java/"/>
    
      <category term="Spring" scheme="https://jongmin92.github.io/tags/Spring/"/>
    
      <category term="@Configuration" scheme="https://jongmin92.github.io/tags/Configuration/"/>
    
      <category term="@Bean" scheme="https://jongmin92.github.io/tags/Bean/"/>
    
      <category term="Bean references" scheme="https://jongmin92.github.io/tags/Bean-references/"/>
    
  </entry>
  
  <entry>
    <title>AsyncRestTemplate의 콜백 헬과 중복 작업 문제</title>
    <link href="https://jongmin92.github.io/2019/04/26/Java/java-async-3/"/>
    <id>https://jongmin92.github.io/2019/04/26/Java/java-async-3/</id>
    <published>2019-04-25T15:30:00.000Z</published>
    <updated>2019-04-30T10:11:37.291Z</updated>
    
    <content type="html"><![CDATA[<p>해당 포스팅은 토비님의 <strong><a href="https://www.youtube.com/watch?v=Tb43EyWTSlQ" target="_blank" rel="noopener">토비의 봄 TV 10회 스프링 리액티브 프로그래밍 (6) AsyncRestTemplate의 콜백 헬과 중복 작업 문제</a></strong> 라이브 코딩을 보며 따라했던 실습 내용을 바탕으로 정리한 글입니다.</p><p>실습 코드들은 IntelliJ를 이용해 <strong>SpringBoot 2.1.3.RELEASE 버전</strong> 기반으로 프로젝트를 생성 후(web, lombok 포함) 진행했습니다.</p><p>이번에는 포스팅에서는 지난번 ListenableFuture를 사용하면서 발생한 콜백헬을 어떻게 개선할지에 대해서 이야기합니다. <strong>ListenableFuture를 Wrapping 하는 Completion이라는 클래스를 만들어, chainable하게 사용할 수 있는 방식으로 코드를 만들어봅니다.</strong><br>콜백헬의 문제로는 에러를 처리하는 코드가 중복이 된다는 것도 있는데, 이 부분도 해결해봅니다.</p><h1 id="completion-클래스-추가"><a href="#Completion-클래스-추가" class="headerlink" title="Completion 클래스 추가"></a>Completion 클래스 추가</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableAsync</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudyApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RestController</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyController</span> </span>&#123;</span><br><span class="line">        AsyncRestTemplate rt = <span class="keyword">new</span> AsyncRestTemplate(<span class="keyword">new</span> Netty4ClientHttpRequestFactory(<span class="keyword">new</span> NioEventLoopGroup(<span class="number">1</span>)));</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Autowired</span></span><br><span class="line">        MyService myService;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> String URL1 = <span class="string">"http://localhost:8081/service?req=&#123;req&#125;"</span>;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> String URL2 = <span class="string">"http://localhost:8081/service2?req=&#123;req&#125;"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@GetMapping</span>(<span class="string">"/rest"</span>)</span><br><span class="line">        <span class="function"><span class="keyword">public</span> DeferredResult&lt;String&gt; <span class="title">rest</span><span class="params">(<span class="keyword">int</span> idx)</span> </span>&#123;</span><br><span class="line">            DeferredResult&lt;String&gt; dr = <span class="keyword">new</span> DeferredResult&lt;&gt;();</span><br><span class="line"></span><br><span class="line">            Completion</span><br><span class="line">                    .from(rt.getForEntity(URL1, String.class, <span class="string">"hello"</span> + idx))</span><br><span class="line">                    .andAccept(s -&gt; dr.setResult(s.getBody()));</span><br><span class="line"></span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            ListenableFuture&lt;ResponseEntity&lt;String&gt;&gt; f1 = rt.getForEntity("http://localhost:8081/service?req=&#123;req&#125;", String.class, "hello" + idx);</span></span><br><span class="line"><span class="comment">            f1.addCallback(s -&gt; &#123;</span></span><br><span class="line"><span class="comment">                ListenableFuture&lt;ResponseEntity&lt;String&gt;&gt; f2 = rt.getForEntity("http://localhost:8081/service2?req=&#123;req&#125;", String.class, s.getBody());</span></span><br><span class="line"><span class="comment">                f2.addCallback(s2 -&gt; &#123;</span></span><br><span class="line"><span class="comment">                    ListenableFuture&lt;String&gt; f3 = myService.work(s2.getBody());</span></span><br><span class="line"><span class="comment">                    f3.addCallback(s3 -&gt; &#123;</span></span><br><span class="line"><span class="comment">                        dr.setResult(s3);</span></span><br><span class="line"><span class="comment">                    &#125;, e -&gt; &#123;</span></span><br><span class="line"><span class="comment">                        dr.setErrorResult(e.getMessage());</span></span><br><span class="line"><span class="comment">                    &#125;);</span></span><br><span class="line"><span class="comment">                &#125;, e -&gt; &#123;</span></span><br><span class="line"><span class="comment">                    dr.setErrorResult(e.getMessage());</span></span><br><span class="line"><span class="comment">                &#125;);</span></span><br><span class="line"><span class="comment">            &#125;, e -&gt; &#123;</span></span><br><span class="line"><span class="comment">                dr.setErrorResult(e.getMessage());</span></span><br><span class="line"><span class="comment">            &#125;);</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> dr;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Completion</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Consumer&lt;ResponseEntity&lt;String&gt;&gt; con;</span><br><span class="line"></span><br><span class="line">        Completion next;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Completion</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Completion</span><span class="params">(Consumer&lt;ResponseEntity&lt;String&gt;&gt; con)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.con = con;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Completion <span class="title">from</span><span class="params">(ListenableFuture&lt;ResponseEntity&lt;String&gt;&gt; lf)</span> </span>&#123;</span><br><span class="line">            Completion c = <span class="keyword">new</span> Completion();</span><br><span class="line">            lf.addCallback(s -&gt; &#123;</span><br><span class="line">                c.complete(s);</span><br><span class="line">            &#125;, e -&gt; &#123;</span><br><span class="line">                c.error(e);</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="keyword">return</span> c;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">andAccept</span><span class="params">(Consumer&lt;ResponseEntity&lt;String&gt;&gt; con)</span> </span>&#123;</span><br><span class="line">            Completion c = <span class="keyword">new</span> Completion(con);</span><br><span class="line">            <span class="keyword">this</span>.next = c;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">complete</span><span class="params">(ResponseEntity&lt;String&gt; s)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (next != <span class="keyword">null</span>) next.run(s);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(ResponseEntity&lt;String&gt; value)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (con != <span class="keyword">null</span>) con.accept(value);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">error</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Service</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyService</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Async</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> ListenableFuture&lt;String&gt; <span class="title">work</span><span class="params">(String req)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> AsyncResult&lt;&gt;(req + <span class="string">"/asyncwork"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ThreadPoolTaskExecutor <span class="title">myThreadPool</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ThreadPoolTaskExecutor te = <span class="keyword">new</span> ThreadPoolTaskExecutor();</span><br><span class="line">        te.setCorePoolSize(<span class="number">1</span>);</span><br><span class="line">        te.setMaxPoolSize(<span class="number">1</span>);</span><br><span class="line">        te.initialize();</span><br><span class="line">        <span class="keyword">return</span> te;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(StudyApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="andapply-메서드-추가"><a href="#andApply-메서드-추가" class="headerlink" title="andApply 메서드 추가"></a>andApply 메서드 추가</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableAsync</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudyApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RestController</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyController</span> </span>&#123;</span><br><span class="line">        AsyncRestTemplate rt = <span class="keyword">new</span> AsyncRestTemplate(<span class="keyword">new</span> Netty4ClientHttpRequestFactory(<span class="keyword">new</span> NioEventLoopGroup(<span class="number">1</span>)));</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Autowired</span></span><br><span class="line">        MyService myService;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> String URL1 = <span class="string">"http://localhost:8081/service?req=&#123;req&#125;"</span>;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> String URL2 = <span class="string">"http://localhost:8081/service2?req=&#123;req&#125;"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@GetMapping</span>(<span class="string">"/rest"</span>)</span><br><span class="line">        <span class="function"><span class="keyword">public</span> DeferredResult&lt;String&gt; <span class="title">rest</span><span class="params">(<span class="keyword">int</span> idx)</span> </span>&#123;</span><br><span class="line">            DeferredResult&lt;String&gt; dr = <span class="keyword">new</span> DeferredResult&lt;&gt;();</span><br><span class="line"></span><br><span class="line">            Completion</span><br><span class="line">                    .from(rt.getForEntity(URL1, String.class, <span class="string">"hello"</span> + idx))</span><br><span class="line">                    .andApply(s -&gt; rt.getForEntity(URL2, String.class, s.getBody()))</span><br><span class="line">                    .andAccept(s -&gt; dr.setResult(s.getBody()));</span><br><span class="line"></span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            ListenableFuture&lt;ResponseEntity&lt;String&gt;&gt; f1 = rt.getForEntity("http://localhost:8081/service?req=&#123;req&#125;", String.class, "hello" + idx);</span></span><br><span class="line"><span class="comment">            f1.addCallback(s -&gt; &#123;</span></span><br><span class="line"><span class="comment">                ListenableFuture&lt;ResponseEntity&lt;String&gt;&gt; f2 = rt.getForEntity("http://localhost:8081/service2?req=&#123;req&#125;", String.class, s.getBody());</span></span><br><span class="line"><span class="comment">                f2.addCallback(s2 -&gt; &#123;</span></span><br><span class="line"><span class="comment">                    ListenableFuture&lt;String&gt; f3 = myService.work(s2.getBody());</span></span><br><span class="line"><span class="comment">                    f3.addCallback(s3 -&gt; &#123;</span></span><br><span class="line"><span class="comment">                        dr.setResult(s3);</span></span><br><span class="line"><span class="comment">                    &#125;, e -&gt; &#123;</span></span><br><span class="line"><span class="comment">                        dr.setErrorResult(e.getMessage());</span></span><br><span class="line"><span class="comment">                    &#125;);</span></span><br><span class="line"><span class="comment">                &#125;, e -&gt; &#123;</span></span><br><span class="line"><span class="comment">                    dr.setErrorResult(e.getMessage());</span></span><br><span class="line"><span class="comment">                &#125;);</span></span><br><span class="line"><span class="comment">            &#125;, e -&gt; &#123;</span></span><br><span class="line"><span class="comment">                dr.setErrorResult(e.getMessage());</span></span><br><span class="line"><span class="comment">            &#125;);</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> dr;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Completion</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Consumer&lt;ResponseEntity&lt;String&gt;&gt; con;</span><br><span class="line"></span><br><span class="line">        Function&lt;ResponseEntity&lt;String&gt;, ListenableFuture&lt;ResponseEntity&lt;String&gt;&gt;&gt; fn;</span><br><span class="line"></span><br><span class="line">        Completion next;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Completion</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Completion</span><span class="params">(Consumer&lt;ResponseEntity&lt;String&gt;&gt; con)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.con = con;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Completion</span><span class="params">(Function&lt;ResponseEntity&lt;String&gt;, ListenableFuture&lt;ResponseEntity&lt;String&gt;&gt;&gt; fn)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.fn = fn;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Completion <span class="title">from</span><span class="params">(ListenableFuture&lt;ResponseEntity&lt;String&gt;&gt; lf)</span> </span>&#123;</span><br><span class="line">            Completion c = <span class="keyword">new</span> Completion();</span><br><span class="line">            lf.addCallback(s -&gt; &#123;</span><br><span class="line">                c.complete(s);</span><br><span class="line">            &#125;, e -&gt; &#123;</span><br><span class="line">                c.error(e);</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="keyword">return</span> c;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Completion <span class="title">andApply</span><span class="params">(Function&lt;ResponseEntity&lt;String&gt;, ListenableFuture&lt;ResponseEntity&lt;String&gt;&gt;&gt; fn)</span> </span>&#123;</span><br><span class="line">            Completion c = <span class="keyword">new</span> Completion(fn);</span><br><span class="line">            <span class="keyword">this</span>.next = c;</span><br><span class="line">            <span class="keyword">return</span> c;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">andAccept</span><span class="params">(Consumer&lt;ResponseEntity&lt;String&gt;&gt; con)</span> </span>&#123;</span><br><span class="line">            Completion c = <span class="keyword">new</span> Completion(con);</span><br><span class="line">            <span class="keyword">this</span>.next = c;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">complete</span><span class="params">(ResponseEntity&lt;String&gt; s)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (next != <span class="keyword">null</span>) next.run(s);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(ResponseEntity&lt;String&gt; value)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (con != <span class="keyword">null</span>) con.accept(value);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (fn != <span class="keyword">null</span>) &#123;</span><br><span class="line">                ListenableFuture&lt;ResponseEntity&lt;String&gt;&gt; lf = fn.apply(value);</span><br><span class="line">                lf.addCallback(s -&gt; complete(s), e -&gt; error(e));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">error</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Service</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyService</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Async</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> ListenableFuture&lt;String&gt; <span class="title">work</span><span class="params">(String req)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> AsyncResult&lt;&gt;(req + <span class="string">"/asyncwork"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ThreadPoolTaskExecutor <span class="title">myThreadPool</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ThreadPoolTaskExecutor te = <span class="keyword">new</span> ThreadPoolTaskExecutor();</span><br><span class="line">        te.setCorePoolSize(<span class="number">1</span>);</span><br><span class="line">        te.setMaxPoolSize(<span class="number">1</span>);</span><br><span class="line">        te.initialize();</span><br><span class="line">        <span class="keyword">return</span> te;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(StudyApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="acceptcompletion-asynccompletion-클래스-추가"><a href="#AcceptCompletion-AsyncCompletion-클래스-추가" class="headerlink" title="AcceptCompletion, AsyncCompletion 클래스 추가"></a>AcceptCompletion, AsyncCompletion 클래스 추가</h1><p>Completion을 결과를 받아서 사용만 하고 끝나는 Accept 처리를 하는 Completion과, 결과를 받아서 또 다른 비동기 작업을 수행하고 그 결과를 반환하는 Apply 용 Completion으로 분리합니다.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableAsync</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudyApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RestController</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyController</span> </span>&#123;</span><br><span class="line">        AsyncRestTemplate rt = <span class="keyword">new</span> AsyncRestTemplate(<span class="keyword">new</span> Netty4ClientHttpRequestFactory(<span class="keyword">new</span> NioEventLoopGroup(<span class="number">1</span>)));</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Autowired</span></span><br><span class="line">        MyService myService;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> String URL1 = <span class="string">"http://localhost:8081/service?req=&#123;req&#125;"</span>;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> String URL2 = <span class="string">"http://localhost:8081/service2?req=&#123;req&#125;"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@GetMapping</span>(<span class="string">"/rest"</span>)</span><br><span class="line">        <span class="function"><span class="keyword">public</span> DeferredResult&lt;String&gt; <span class="title">rest</span><span class="params">(<span class="keyword">int</span> idx)</span> </span>&#123;</span><br><span class="line">            DeferredResult&lt;String&gt; dr = <span class="keyword">new</span> DeferredResult&lt;&gt;();</span><br><span class="line"></span><br><span class="line">            Completion</span><br><span class="line">                    .from(rt.getForEntity(URL1, String.class, <span class="string">"hello"</span> + idx))</span><br><span class="line">                    .andApply(s -&gt; rt.getForEntity(URL2, String.class, s.getBody()))</span><br><span class="line">                    .andAccept(s -&gt; dr.setResult(s.getBody()));</span><br><span class="line"></span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            ListenableFuture&lt;ResponseEntity&lt;String&gt;&gt; f1 = rt.getForEntity("http://localhost:8081/service?req=&#123;req&#125;", String.class, "hello" + idx);</span></span><br><span class="line"><span class="comment">            f1.addCallback(s -&gt; &#123;</span></span><br><span class="line"><span class="comment">                ListenableFuture&lt;ResponseEntity&lt;String&gt;&gt; f2 = rt.getForEntity("http://localhost:8081/service2?req=&#123;req&#125;", String.class, s.getBody());</span></span><br><span class="line"><span class="comment">                f2.addCallback(s2 -&gt; &#123;</span></span><br><span class="line"><span class="comment">                    ListenableFuture&lt;String&gt; f3 = myService.work(s2.getBody());</span></span><br><span class="line"><span class="comment">                    f3.addCallback(s3 -&gt; &#123;</span></span><br><span class="line"><span class="comment">                        dr.setResult(s3);</span></span><br><span class="line"><span class="comment">                    &#125;, e -&gt; &#123;</span></span><br><span class="line"><span class="comment">                        dr.setErrorResult(e.getMessage());</span></span><br><span class="line"><span class="comment">                    &#125;);</span></span><br><span class="line"><span class="comment">                &#125;, e -&gt; &#123;</span></span><br><span class="line"><span class="comment">                    dr.setErrorResult(e.getMessage());</span></span><br><span class="line"><span class="comment">                &#125;);</span></span><br><span class="line"><span class="comment">            &#125;, e -&gt; &#123;</span></span><br><span class="line"><span class="comment">                dr.setErrorResult(e.getMessage());</span></span><br><span class="line"><span class="comment">            &#125;);</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> dr;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">AcceptCompletion</span> <span class="keyword">extends</span> <span class="title">Completion</span> </span>&#123;</span><br><span class="line">        Consumer&lt;ResponseEntity&lt;String&gt;&gt; con;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">AcceptCompletion</span><span class="params">(Consumer&lt;ResponseEntity&lt;String&gt;&gt; con)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.con = con;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(ResponseEntity&lt;String&gt; value)</span> </span>&#123;</span><br><span class="line">            con.accept(value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">AsyncCompletion</span> <span class="keyword">extends</span> <span class="title">Completion</span> </span>&#123;</span><br><span class="line">        Function&lt;ResponseEntity&lt;String&gt;, ListenableFuture&lt;ResponseEntity&lt;String&gt;&gt;&gt; fn;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">AsyncCompletion</span><span class="params">(Function&lt;ResponseEntity&lt;String&gt;, ListenableFuture&lt;ResponseEntity&lt;String&gt;&gt;&gt; fn)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.fn = fn;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(ResponseEntity&lt;String&gt; value)</span> </span>&#123;</span><br><span class="line">            ListenableFuture&lt;ResponseEntity&lt;String&gt;&gt; lf = fn.apply(value);</span><br><span class="line">            lf.addCallback(s -&gt; complete(s), e -&gt; error(e));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Completion</span> </span>&#123;</span><br><span class="line">        Completion next;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Completion <span class="title">from</span><span class="params">(ListenableFuture&lt;ResponseEntity&lt;String&gt;&gt; lf)</span> </span>&#123;</span><br><span class="line">            Completion c = <span class="keyword">new</span> Completion();</span><br><span class="line">            lf.addCallback(s -&gt; &#123;</span><br><span class="line">                c.complete(s);</span><br><span class="line">            &#125;, e -&gt; &#123;</span><br><span class="line">                c.error(e);</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="keyword">return</span> c;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Completion <span class="title">andApply</span><span class="params">(Function&lt;ResponseEntity&lt;String&gt;, ListenableFuture&lt;ResponseEntity&lt;String&gt;&gt;&gt; fn)</span> </span>&#123;</span><br><span class="line">            Completion c = <span class="keyword">new</span> AsyncCompletion(fn);</span><br><span class="line">            <span class="keyword">this</span>.next = c;</span><br><span class="line">            <span class="keyword">return</span> c;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">andAccept</span><span class="params">(Consumer&lt;ResponseEntity&lt;String&gt;&gt; con)</span> </span>&#123;</span><br><span class="line">            Completion c = <span class="keyword">new</span> AcceptCompletion(con);</span><br><span class="line">            <span class="keyword">this</span>.next = c;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">complete</span><span class="params">(ResponseEntity&lt;String&gt; s)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (next != <span class="keyword">null</span>) next.run(s);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(ResponseEntity&lt;String&gt; value)</span> </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">error</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Service</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyService</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Async</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> ListenableFuture&lt;String&gt; <span class="title">work</span><span class="params">(String req)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> AsyncResult&lt;&gt;(req + <span class="string">"/asyncwork"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ThreadPoolTaskExecutor <span class="title">myThreadPool</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ThreadPoolTaskExecutor te = <span class="keyword">new</span> ThreadPoolTaskExecutor();</span><br><span class="line">        te.setCorePoolSize(<span class="number">1</span>);</span><br><span class="line">        te.setMaxPoolSize(<span class="number">1</span>);</span><br><span class="line">        te.initialize();</span><br><span class="line">        <span class="keyword">return</span> te;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(StudyApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="errorcompletion-클래스-추가"><a href="#ErrorCompletion-클래스-추가" class="headerlink" title="ErrorCompletion 클래스 추가"></a>ErrorCompletion 클래스 추가</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableAsync</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudyApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RestController</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyController</span> </span>&#123;</span><br><span class="line">        AsyncRestTemplate rt = <span class="keyword">new</span> AsyncRestTemplate(<span class="keyword">new</span> Netty4ClientHttpRequestFactory(<span class="keyword">new</span> NioEventLoopGroup(<span class="number">1</span>)));</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Autowired</span></span><br><span class="line">        MyService myService;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> String URL1 = <span class="string">"http://localhost:8081/service?req=&#123;req&#125;"</span>;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> String URL2 = <span class="string">"http://localhost:8081/service2?req=&#123;req&#125;"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@GetMapping</span>(<span class="string">"/rest"</span>)</span><br><span class="line">        <span class="function"><span class="keyword">public</span> DeferredResult&lt;String&gt; <span class="title">rest</span><span class="params">(<span class="keyword">int</span> idx)</span> </span>&#123;</span><br><span class="line">            DeferredResult&lt;String&gt; dr = <span class="keyword">new</span> DeferredResult&lt;&gt;();</span><br><span class="line"></span><br><span class="line">            Completion</span><br><span class="line">                    .from(rt.getForEntity(URL1, String.class, <span class="string">"hello"</span> + idx))</span><br><span class="line">                    .andApply(s -&gt; rt.getForEntity(URL2, String.class, s.getBody()))</span><br><span class="line">                    .andError(e -&gt; dr.setErrorResult(e))</span><br><span class="line">                    .andAccept(s -&gt; dr.setResult(s.getBody()));</span><br><span class="line"></span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            ListenableFuture&lt;ResponseEntity&lt;String&gt;&gt; f1 = rt.getForEntity("http://localhost:8081/service?req=&#123;req&#125;", String.class, "hello" + idx);</span></span><br><span class="line"><span class="comment">            f1.addCallback(s -&gt; &#123;</span></span><br><span class="line"><span class="comment">                ListenableFuture&lt;ResponseEntity&lt;String&gt;&gt; f2 = rt.getForEntity("http://localhost:8081/service2?req=&#123;req&#125;", String.class, s.getBody());</span></span><br><span class="line"><span class="comment">                f2.addCallback(s2 -&gt; &#123;</span></span><br><span class="line"><span class="comment">                    ListenableFuture&lt;String&gt; f3 = myService.work(s2.getBody());</span></span><br><span class="line"><span class="comment">                    f3.addCallback(s3 -&gt; &#123;</span></span><br><span class="line"><span class="comment">                        dr.setResult(s3);</span></span><br><span class="line"><span class="comment">                    &#125;, e -&gt; &#123;</span></span><br><span class="line"><span class="comment">                        dr.setErrorResult(e.getMessage());</span></span><br><span class="line"><span class="comment">                    &#125;);</span></span><br><span class="line"><span class="comment">                &#125;, e -&gt; &#123;</span></span><br><span class="line"><span class="comment">                    dr.setErrorResult(e.getMessage());</span></span><br><span class="line"><span class="comment">                &#125;);</span></span><br><span class="line"><span class="comment">            &#125;, e -&gt; &#123;</span></span><br><span class="line"><span class="comment">                dr.setErrorResult(e.getMessage());</span></span><br><span class="line"><span class="comment">            &#125;);</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> dr;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">AcceptCompletion</span> <span class="keyword">extends</span> <span class="title">Completion</span> </span>&#123;</span><br><span class="line">        Consumer&lt;ResponseEntity&lt;String&gt;&gt; con;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">AcceptCompletion</span><span class="params">(Consumer&lt;ResponseEntity&lt;String&gt;&gt; con)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.con = con;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(ResponseEntity&lt;String&gt; value)</span> </span>&#123;</span><br><span class="line">            con.accept(value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ErrorCompletion</span> <span class="keyword">extends</span> <span class="title">Completion</span> </span>&#123;</span><br><span class="line">        Consumer&lt;Throwable&gt; econ;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ErrorCompletion</span><span class="params">(Consumer&lt;Throwable&gt; econ)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.econ = econ;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(ResponseEntity&lt;String&gt; value)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (next != <span class="keyword">null</span>) &#123;</span><br><span class="line">                next.run(value);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">error</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">            econ.accept(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">AsyncCompletion</span> <span class="keyword">extends</span> <span class="title">Completion</span> </span>&#123;</span><br><span class="line">        Function&lt;ResponseEntity&lt;String&gt;, ListenableFuture&lt;ResponseEntity&lt;String&gt;&gt;&gt; fn;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">AsyncCompletion</span><span class="params">(Function&lt;ResponseEntity&lt;String&gt;, ListenableFuture&lt;ResponseEntity&lt;String&gt;&gt;&gt; fn)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.fn = fn;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(ResponseEntity&lt;String&gt; value)</span> </span>&#123;</span><br><span class="line">            ListenableFuture&lt;ResponseEntity&lt;String&gt;&gt; lf = fn.apply(value);</span><br><span class="line">            lf.addCallback(s -&gt; complete(s), e -&gt; error(e));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Completion</span> </span>&#123;</span><br><span class="line">        Completion next;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Completion <span class="title">from</span><span class="params">(ListenableFuture&lt;ResponseEntity&lt;String&gt;&gt; lf)</span> </span>&#123;</span><br><span class="line">            Completion c = <span class="keyword">new</span> Completion();</span><br><span class="line">            lf.addCallback(s -&gt; &#123;</span><br><span class="line">                c.complete(s);</span><br><span class="line">            &#125;, e -&gt; &#123;</span><br><span class="line">                c.error(e);</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="keyword">return</span> c;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Completion <span class="title">andApply</span><span class="params">(Function&lt;ResponseEntity&lt;String&gt;, ListenableFuture&lt;ResponseEntity&lt;String&gt;&gt;&gt; fn)</span> </span>&#123;</span><br><span class="line">            Completion c = <span class="keyword">new</span> AsyncCompletion(fn);</span><br><span class="line">            <span class="keyword">this</span>.next = c;</span><br><span class="line">            <span class="keyword">return</span> c;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Completion <span class="title">andError</span><span class="params">(Consumer&lt;Throwable&gt; econ)</span> </span>&#123;</span><br><span class="line">            Completion c = <span class="keyword">new</span> ErrorCompletion(econ);</span><br><span class="line">            <span class="keyword">this</span>.next = c;</span><br><span class="line">            <span class="keyword">return</span> c;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">andAccept</span><span class="params">(Consumer&lt;ResponseEntity&lt;String&gt;&gt; con)</span> </span>&#123;</span><br><span class="line">            Completion c = <span class="keyword">new</span> AcceptCompletion(con);</span><br><span class="line">            <span class="keyword">this</span>.next = c;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">complete</span><span class="params">(ResponseEntity&lt;String&gt; s)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (next != <span class="keyword">null</span>) next.run(s);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(ResponseEntity&lt;String&gt; value)</span> </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">error</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (next != <span class="keyword">null</span>) next.error(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Service</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyService</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Async</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> ListenableFuture&lt;String&gt; <span class="title">work</span><span class="params">(String req)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> AsyncResult&lt;&gt;(req + <span class="string">"/asyncwork"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ThreadPoolTaskExecutor <span class="title">myThreadPool</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ThreadPoolTaskExecutor te = <span class="keyword">new</span> ThreadPoolTaskExecutor();</span><br><span class="line">        te.setCorePoolSize(<span class="number">1</span>);</span><br><span class="line">        te.setMaxPoolSize(<span class="number">1</span>);</span><br><span class="line">        te.initialize();</span><br><span class="line">        <span class="keyword">return</span> te;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(StudyApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="generic-적용"><a href="#Generic-적용" class="headerlink" title="Generic 적용"></a>Generic 적용</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableAsync</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudyApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RestController</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyController</span> </span>&#123;</span><br><span class="line">        AsyncRestTemplate rt = <span class="keyword">new</span> AsyncRestTemplate(<span class="keyword">new</span> Netty4ClientHttpRequestFactory(<span class="keyword">new</span> NioEventLoopGroup(<span class="number">1</span>)));</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Autowired</span></span><br><span class="line">        MyService myService;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> String URL1 = <span class="string">"http://localhost:8081/service?req=&#123;req&#125;"</span>;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> String URL2 = <span class="string">"http://localhost:8081/service2?req=&#123;req&#125;"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@GetMapping</span>(<span class="string">"/rest"</span>)</span><br><span class="line">        <span class="function"><span class="keyword">public</span> DeferredResult&lt;String&gt; <span class="title">rest</span><span class="params">(<span class="keyword">int</span> idx)</span> </span>&#123;</span><br><span class="line">            DeferredResult&lt;String&gt; dr = <span class="keyword">new</span> DeferredResult&lt;&gt;();</span><br><span class="line"></span><br><span class="line">            Completion</span><br><span class="line">                    .from(rt.getForEntity(URL1, String.class, <span class="string">"hello"</span> + idx))</span><br><span class="line">                    .andApply(s -&gt; rt.getForEntity(URL2, String.class, s.getBody()))</span><br><span class="line">                    .andApply(s -&gt; myService.work(s.getBody()))</span><br><span class="line">                    .andError(e -&gt; dr.setErrorResult(e.toString()))</span><br><span class="line">                    .andAccept(s -&gt; dr.setResult(s));</span><br><span class="line"></span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            ListenableFuture&lt;ResponseEntity&lt;String&gt;&gt; f1 = rt.getForEntity("http://localhost:8081/service?req=&#123;req&#125;", String.class, "hello" + idx);</span></span><br><span class="line"><span class="comment">            f1.addCallback(s -&gt; &#123;</span></span><br><span class="line"><span class="comment">                ListenableFuture&lt;ResponseEntity&lt;String&gt;&gt; f2 = rt.getForEntity("http://localhost:8081/service2?req=&#123;req&#125;", String.class, s.getBody());</span></span><br><span class="line"><span class="comment">                f2.addCallback(s2 -&gt; &#123;</span></span><br><span class="line"><span class="comment">                    ListenableFuture&lt;String&gt; f3 = myService.work(s2.getBody());</span></span><br><span class="line"><span class="comment">                    f3.addCallback(s3 -&gt; &#123;</span></span><br><span class="line"><span class="comment">                        dr.setResult(s3);</span></span><br><span class="line"><span class="comment">                    &#125;, e -&gt; &#123;</span></span><br><span class="line"><span class="comment">                        dr.setErrorResult(e.getMessage());</span></span><br><span class="line"><span class="comment">                    &#125;);</span></span><br><span class="line"><span class="comment">                &#125;, e -&gt; &#123;</span></span><br><span class="line"><span class="comment">                    dr.setErrorResult(e.getMessage());</span></span><br><span class="line"><span class="comment">                &#125;);</span></span><br><span class="line"><span class="comment">            &#125;, e -&gt; &#123;</span></span><br><span class="line"><span class="comment">                dr.setErrorResult(e.getMessage());</span></span><br><span class="line"><span class="comment">            &#125;);</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> dr;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">AcceptCompletion</span>&lt;<span class="title">S</span>&gt; <span class="keyword">extends</span> <span class="title">Completion</span>&lt;<span class="title">S</span>, <span class="title">Void</span>&gt; </span>&#123;</span><br><span class="line">        Consumer&lt;S&gt; con;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">AcceptCompletion</span><span class="params">(Consumer&lt;S&gt; con)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.con = con;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(S value)</span> </span>&#123;</span><br><span class="line">            con.accept(value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ErrorCompletion</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">Completion</span>&lt;<span class="title">T</span>, <span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">        Consumer&lt;Throwable&gt; econ;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ErrorCompletion</span><span class="params">(Consumer&lt;Throwable&gt; econ)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.econ = econ;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(T value)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (next != <span class="keyword">null</span>) &#123;</span><br><span class="line">                next.run(value);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">error</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">            econ.accept(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">AsyncCompletion</span>&lt;<span class="title">S</span>, <span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">Completion</span>&lt;<span class="title">S</span>, <span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">        Function&lt;S, ListenableFuture&lt;T&gt;&gt; fn;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">AsyncCompletion</span><span class="params">(Function&lt;S, ListenableFuture&lt;T&gt;&gt; fn)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.fn = fn;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(S value)</span> </span>&#123;</span><br><span class="line">            ListenableFuture&lt;T&gt; lf = fn.apply(value);</span><br><span class="line">            lf.addCallback(s -&gt; complete(s), e -&gt; error(e));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// S는 넘어온 파라미터, T는 결과</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Completion</span>&lt;<span class="title">S</span>, <span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">        Completion next;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> &lt;S, T&gt; <span class="function">Completion&lt;S, T&gt; <span class="title">from</span><span class="params">(ListenableFuture&lt;T&gt; lf)</span> </span>&#123;</span><br><span class="line">            Completion&lt;S, T&gt; c = <span class="keyword">new</span> Completion&lt;&gt;();</span><br><span class="line">            lf.addCallback(s -&gt; &#123;</span><br><span class="line">                c.complete(s);</span><br><span class="line">            &#125;, e -&gt; &#123;</span><br><span class="line">                c.error(e);</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="keyword">return</span> c;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> &lt;V&gt; <span class="function">Completion&lt;T, V&gt; <span class="title">andApply</span><span class="params">(Function&lt;T, ListenableFuture&lt;V&gt;&gt; fn)</span> </span>&#123;</span><br><span class="line">            Completion&lt;T, V&gt; c = <span class="keyword">new</span> AsyncCompletion&lt;&gt;(fn);</span><br><span class="line">            <span class="keyword">this</span>.next = c;</span><br><span class="line">            <span class="keyword">return</span> c;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Completion&lt;T, T&gt; <span class="title">andError</span><span class="params">(Consumer&lt;Throwable&gt; econ)</span> </span>&#123;</span><br><span class="line">            Completion&lt;T, T&gt; c = <span class="keyword">new</span> ErrorCompletion&lt;&gt;(econ);</span><br><span class="line">            <span class="keyword">this</span>.next = c;</span><br><span class="line">            <span class="keyword">return</span> c;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">andAccept</span><span class="params">(Consumer&lt;T&gt; con)</span> </span>&#123;</span><br><span class="line">            Completion&lt;T, Void&gt; c = <span class="keyword">new</span> AcceptCompletion&lt;&gt;(con);</span><br><span class="line">            <span class="keyword">this</span>.next = c;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">complete</span><span class="params">(T s)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (next != <span class="keyword">null</span>) next.run(s);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(S value)</span> </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">error</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (next != <span class="keyword">null</span>) next.error(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Service</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyService</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Async</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> ListenableFuture&lt;String&gt; <span class="title">work</span><span class="params">(String req)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> AsyncResult&lt;&gt;(req + <span class="string">"/asyncwork"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ThreadPoolTaskExecutor <span class="title">myThreadPool</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ThreadPoolTaskExecutor te = <span class="keyword">new</span> ThreadPoolTaskExecutor();</span><br><span class="line">        te.setCorePoolSize(<span class="number">1</span>);</span><br><span class="line">        te.setMaxPoolSize(<span class="number">1</span>);</span><br><span class="line">        te.initialize();</span><br><span class="line">        <span class="keyword">return</span> te;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(StudyApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;해당 포스팅은 토비님의 &lt;strong&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=Tb43EyWTSlQ&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;토비의 봄 TV 10회 스프링 리액티브 프로그래밍 (6)
      
    
    </summary>
    
      <category term="Programming" scheme="https://jongmin92.github.io/categories/Programming/"/>
    
      <category term="Java" scheme="https://jongmin92.github.io/categories/Programming/Java/"/>
    
    
      <category term="Java" scheme="https://jongmin92.github.io/tags/Java/"/>
    
      <category term="Async" scheme="https://jongmin92.github.io/tags/Async/"/>
    
  </entry>
  
  <entry>
    <title>비동기 RestTemplate과 비동기 MVC/Serlvet</title>
    <link href="https://jongmin92.github.io/2019/04/13/Java/java-async-2/"/>
    <id>https://jongmin92.github.io/2019/04/13/Java/java-async-2/</id>
    <published>2019-04-13T14:24:00.000Z</published>
    <updated>2019-04-30T10:11:37.290Z</updated>
    
    <content type="html"><![CDATA[<p>해당 포스팅은 토비님의 <strong><a href="https://www.youtube.com/watch?v=ExUfZkh7Puk" target="_blank" rel="noopener">토비의 봄 TV 9회 스프링 리액티브 프로그래밍 (5) 비동기 RestTemplate과 비동기 MVC/Serlvet</a></strong> 라이브 코딩을 보며 따라했던 실습 내용을 바탕으로 정리한 글입니다.</p><p>실습 코드들은 IntelliJ를 이용해 <strong>SpringBoot 2.1.3.RELEASE 버전</strong> 기반으로 프로젝트를 생성 후(web, lombok 포함) 진행했습니다.</p><h1 id="thread-pool-hell"><a href="#Thread-Pool-Hell" class="headerlink" title="Thread Pool Hell"></a>Thread Pool Hell</h1><p><strong><a href="https://jongmin92.github.io/2019/03/31/Java/java-async-1/#servlet-async">스프링의 비동기 기술</a></strong> 을 이용해 클라이언트로부터 요청을 받은 후 실제 작업은 작업 스레드 풀에 위임하고 현재의 서블릿 스레드는 서블릿 스레드 풀에 반환 후, 다음 요청이 들어올 경우 바로 사용할 수 있게 효율적으로 처리하도록 만들었습니다.<br>그러나 아직 문제가 있습니다. </p><p>아주 빠르게 무언가를 계산하고 해당 처리를 끝내는 경우라면 굳이 비동기 MVC(서블릿)를 사용하지 않아도 문제가 없지만, <strong>하나의 요청에 대한 처리를 수행하면서 외부의 서비스들을 호출하는 작업이 많이 있는 경우, 문제는 단순히 비동기를 서블릿을 사용하는 것만으로 해결할 수 없는 경우가 많이 있습니다.</strong> (서블릿 요청은 바로 사용 가능하더라도 워커 스레드가 I/O 같은 작업으로 인해 블록되기 때문입니다.)</p><p><strong><code>Thread Pool Hell</code>이란 풀 안에 있는 스레드에 대한 사용 요청이 급격하게 증가해 추가적인 요청이 들어올 때, 사용 가능한 스레드 풀의 스레드가 없기 때문에 대기 상태에 빠져 요청에 대한 응답이 느려지게 되는 상태를 말합니다.</strong><br><img src="/images/post/2019-04-13/thread_pool_hell.png" alt="thread pool hell"></p><p>최근 서비스들은 아래의 그럼처럼 하나의 요청을 처리함에 있어 다른 서버로의 요청(Network I/O)이 많아졌습니다. 조금전 설명한 것처럼 비동기 서블릿을 사용하더라도 하나의 요청을 처리하는 동안 하나의 작업(워커) 스레드는 그 시간동안 대기상태에 빠지게 되어 결국에는 스레드 풀의 가용성이 떨어지게 됩니다. 이번 포스팅에서는 해당 문제를 해결해가는 과정을 다루고 있습니다.</p><p><img src="/images/post/2019-04-13/service_oriented_architecture.png" alt="service oriented architecture"></p><h1 id="upgrade-client-for-load-test"><a href="#Upgrade-Client-For-Load-Test" class="headerlink" title="Upgrade Client (For Load Test)"></a>Upgrade Client (For Load Test)</h1><p>지난 번에 작성했던 Client를 조금 수정하도록 합니다. 기존의 Client는 100개의 스레드를 순차적으로 만들면서 서버로의 Request를 만들었던 문제가 있었습니다. 이제는 100개의 스레드를 만들고 <a href="https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/CyclicBarrier.html" target="_blank" rel="noopener">CyclicBarrier</a>를 이용해 100개의 스레드에서 동시에 Request를 만들도록 변경해보겠습니다. </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoadTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> AtomicInteger counter = <span class="keyword">new</span> AtomicInteger(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException, BrokenBarrierException </span>&#123;</span><br><span class="line">        ExecutorService es = Executors.newFixedThreadPool(<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">        RestTemplate rt = <span class="keyword">new</span> RestTemplate();</span><br><span class="line">        String url = <span class="string">"http://localhost:8080/rest?idx=&#123;idx&#125;"</span>;</span><br><span class="line"></span><br><span class="line">        CyclicBarrier barrier = <span class="keyword">new</span> CyclicBarrier(<span class="number">101</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="comment">// submit이 받는 callable은 return을 가질 수 있으며, exception도 던질 수 있다.</span></span><br><span class="line">            es.submit(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">int</span> idx = counter.addAndGet(<span class="number">1</span>);</span><br><span class="line">                log.info(<span class="string">"Thread &#123;&#125;"</span>, idx);</span><br><span class="line">                barrier.await();</span><br><span class="line"></span><br><span class="line">                StopWatch sw = <span class="keyword">new</span> StopWatch();</span><br><span class="line">                sw.start();</span><br><span class="line"></span><br><span class="line">                String res = rt.getForObject(url, String.class, idx);</span><br><span class="line"></span><br><span class="line">                sw.stop();</span><br><span class="line">                log.info(<span class="string">"idx: &#123;&#125;, Elapsed: &#123;&#125; -&gt; res: &#123;&#125;"</span>, idx, sw.getTotalTimeSeconds(), res);</span><br><span class="line">                <span class="comment">// IDE가 funtional interface가 callable임을 인식할 수 있도록 의미없는 return을 넣어준다.</span></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// await을 만난 스레드가 101번째가 될 때, 모든 스레드들도 await에서 풀려나 이후 로직을 수행한다. </span></span><br><span class="line">        <span class="comment">// 메인 스레드 1개, Executors.newFixedThreadPool로 생성한 스레드 100개</span></span><br><span class="line">        barrier.await();</span><br><span class="line">        StopWatch main = <span class="keyword">new</span> StopWatch();</span><br><span class="line">        main.start();</span><br><span class="line"></span><br><span class="line">        es.shutdown();</span><br><span class="line">        <span class="comment">// 지정된 시간이 타임아웃 걸리기 전이라면 대기작업이 진행될 때까지 기다린다.</span></span><br><span class="line">        <span class="comment">// (100초안에 작업이 끝날때까지 기다리거나, 100초가 초과되면 종료)</span></span><br><span class="line">        es.awaitTermination(<span class="number">100</span>, TimeUnit.SECONDS);</span><br><span class="line">        main.stop();</span><br><span class="line">        log.info(<span class="string">"Total: &#123;&#125;"</span>, main.getTotalTimeSeconds());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="외부-서비스-호출-테스트"><a href="#외부-서비스-호출-테스트" class="headerlink" title="외부 서비스 호출 테스트"></a>외부 서비스 호출 테스트</h1><p>클라이언트의 요청을 받아 외부 서비스를 호출하고 해당 결과를 이용해서 응답을 돌려주는 테스트를 진행합니다. 테스트를 진행하기 위해서는 2개의 스프링 애플리케이션이 필요합니다. 2개의 스프링 애플리케이션의 설정은 다음과 같습니다.</p><ul><li>Main Application<ul><li>port: 8080</li><li>tomcat-max-thread-count: 1</li></ul></li><li>Remote Application <ul><li>port: 8081</li><li>tomcat-max-thread-count: 1000</li></ul></li></ul><h2 id="main-application"><a href="#Main-Application" class="headerlink" title="Main Application"></a>Main Application</h2><p>먼저 하나의 스프링 애플리케이션에 컨트롤러를 하나 준비합니다. 이 컨트롤러는 클라이언트로부터 요청을 받아 해당 요청으로부터 받은 값을 이용해 다른 외부 서비스(<a href="http://localhost:8081/service?req={req})를" target="_blank" rel="noopener">http://localhost:8081/service?req={req})를</a> 호출합니다.</p><p><strong>결국 해당 서블릿은 클라이언트 요청을 처리하면서 외부 서비스로의 Networking I/O 작업을 수행하기 때문에 외부 서비스로부터의 요청에 대한 응답을 받기 전까지는 blocking 상태가 됩니다.</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RestController</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MainController</span> </span>&#123;</span><br><span class="line">        RestTemplate rt = <span class="keyword">new</span> RestTemplate();</span><br><span class="line"></span><br><span class="line">        <span class="meta">@GetMapping</span>(<span class="string">"/rest"</span>)</span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">rest</span><span class="params">(<span class="keyword">int</span> idx)</span> </span>&#123;</span><br><span class="line">            String res = rt.getForObject(<span class="string">"http://localhost:8081/service?req=&#123;req&#125;"</span>,</span><br><span class="line">                    String.class, <span class="string">"hello"</span> + idx);        </span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(MainApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>application.properties</code> 파일에서 다음과 같이 Tomcat의 스레드 개수를 1개로 설정합니다.<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">server.tomcat.max-threads=1</span></span><br></pre></td></tr></table></figure></p><h2 id="remote-application"><a href="#Remote-Application" class="headerlink" title="Remote Application"></a>Remote Application</h2><p>다른 하나의 스프링 애플리케이션을 생성하고 이전에 만들었던 스프링 애플리케이션의 컨트롤러 내부에서 만들었던 요청을 받아 처리할 수 있도록 컨트롤러 추가합니다. 8080 포트가 아닌 8081 포트를 사용하고 tomcat 스레드를 1000개로 설정합니다. RemoteApplication은 application.properties의 값을 사용하게 하지 않고 직접 프로퍼티를 설정해줍니다. </p><p>아래와 같이 설정하면 Intellij를 이용해서 하나의 프로젝트에서 2개의 스프링 애플리케이션을 실행할 수 있습니다.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RemoteApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RestController</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">RemoteController</span> </span>&#123;</span><br><span class="line">        <span class="meta">@GetMapping</span>(<span class="string">"/service"</span>)</span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">service</span><span class="params">(String req)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> req + <span class="string">"/service"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 하나의 프로젝트에서 2개의 스프링 애플리케이션을 띄우기 위해 외부 서비스 역할을 하는 RemoteApplication은</span></span><br><span class="line">        <span class="comment">// application.properties가 아닌 별도의 프로퍼티를 이용하도록 직접 설정한다.</span></span><br><span class="line">        System.setProperty(<span class="string">"server.port"</span>, <span class="string">"8081"</span>);</span><br><span class="line">        System.setProperty(<span class="string">"server.tomcat.max-threads"</span>, <span class="string">"1000"</span>);</span><br><span class="line">        SpringApplication.run(RemoteApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="결과-확인"><a href="#결과-확인" class="headerlink" title="결과 확인"></a>결과 확인</h2><p>MainApplication과 RemoteApplication을 각각 실행하고 Client를 이용한 테스트 결과는 다음과 같습니다.<br>100개의 클라이언트 요청을 처리하는데 0.4초 정도의 시간이 걸렸습니다.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line"><span class="number">01</span>:<span class="number">54</span>:<span class="number">27.539</span> [pool-<span class="number">1</span>-thread-<span class="number">40</span>] DEBUG org.springframework.web.client.RestTemplate - Response <span class="number">200</span> OK</span><br><span class="line"><span class="number">01</span>:<span class="number">54</span>:<span class="number">27.539</span> [pool-<span class="number">1</span>-thread-<span class="number">40</span>] DEBUG org.springframework.web.client.RestTemplate - Reading to [java.lang.String] as <span class="string">"text/plain;charset=UTF-8"</span></span><br><span class="line"><span class="number">01</span>:<span class="number">54</span>:<span class="number">27.539</span> [pool-<span class="number">1</span>-thread-<span class="number">40</span>] INFO com.example.study.LoadTest - idx: <span class="number">40</span>, Elapsed: <span class="number">0.4</span> -&gt; res: hello40/service</span><br><span class="line"><span class="number">01</span>:<span class="number">54</span>:<span class="number">27.541</span> [pool-<span class="number">1</span>-thread-<span class="number">77</span>] DEBUG org.springframework.web.client.RestTemplate - Response <span class="number">200</span> OK</span><br><span class="line"><span class="number">01</span>:<span class="number">54</span>:<span class="number">27.541</span> [pool-<span class="number">1</span>-thread-<span class="number">77</span>] DEBUG org.springframework.web.client.RestTemplate - Reading to [java.lang.String] as <span class="string">"text/plain;charset=UTF-8"</span></span><br><span class="line"><span class="number">01</span>:<span class="number">54</span>:<span class="number">27.541</span> [pool-<span class="number">1</span>-thread-<span class="number">77</span>] INFO com.example.study.LoadTest - idx: <span class="number">77</span>, Elapsed: <span class="number">0.401</span> -&gt; res: hello77/service</span><br><span class="line"><span class="number">01</span>:<span class="number">54</span>:<span class="number">27.543</span> [pool-<span class="number">1</span>-thread-<span class="number">48</span>] DEBUG org.springframework.web.client.RestTemplate - Response <span class="number">200</span> OK</span><br><span class="line"><span class="number">01</span>:<span class="number">54</span>:<span class="number">27.543</span> [pool-<span class="number">1</span>-thread-<span class="number">48</span>] DEBUG org.springframework.web.client.RestTemplate - Reading to [java.lang.String] as <span class="string">"text/plain;charset=UTF-8"</span></span><br><span class="line"><span class="number">01</span>:<span class="number">54</span>:<span class="number">27.543</span> [pool-<span class="number">1</span>-thread-<span class="number">48</span>] INFO com.example.study.LoadTest - idx: <span class="number">48</span>, Elapsed: <span class="number">0.403</span> -&gt; res: hello48/service</span><br><span class="line"><span class="number">01</span>:<span class="number">54</span>:<span class="number">27.545</span> [pool-<span class="number">1</span>-thread-<span class="number">8</span>] DEBUG org.springframework.web.client.RestTemplate - Response <span class="number">200</span> OK</span><br><span class="line"><span class="number">01</span>:<span class="number">54</span>:<span class="number">27.545</span> [pool-<span class="number">1</span>-thread-<span class="number">8</span>] DEBUG org.springframework.web.client.RestTemplate - Reading to [java.lang.String] as <span class="string">"text/plain;charset=UTF-8"</span></span><br><span class="line"><span class="number">01</span>:<span class="number">54</span>:<span class="number">27.546</span> [pool-<span class="number">1</span>-thread-<span class="number">8</span>] INFO com.example.study.LoadTest - idx: <span class="number">8</span>, Elapsed: <span class="number">0.407</span> -&gt; res: hello8/service</span><br><span class="line"><span class="number">01</span>:<span class="number">54</span>:<span class="number">27.548</span> [pool-<span class="number">1</span>-thread-<span class="number">33</span>] DEBUG org.springframework.web.client.RestTemplate - Response <span class="number">200</span> OK</span><br><span class="line"><span class="number">01</span>:<span class="number">54</span>:<span class="number">27.548</span> [pool-<span class="number">1</span>-thread-<span class="number">33</span>] DEBUG org.springframework.web.client.RestTemplate - Reading to [java.lang.String] as <span class="string">"text/plain;charset=UTF-8"</span></span><br><span class="line"><span class="number">01</span>:<span class="number">54</span>:<span class="number">27.548</span> [pool-<span class="number">1</span>-thread-<span class="number">33</span>] INFO com.example.study.LoadTest - idx: <span class="number">33</span>, Elapsed: <span class="number">0.409</span> -&gt; res: hello33/service</span><br><span class="line"><span class="number">01</span>:<span class="number">54</span>:<span class="number">27.548</span> [main] INFO com.example.study.LoadTest - Total: <span class="number">0.407</span></span><br></pre></td></tr></table></figure></p><p>이번에는 RemoteApplication의 요청 처리 부분에 2초간 Thread sleep을 주고 다시 한 번 클라이언트를 이용해 테스트를 진행해봅니다.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// RemoteApplication</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">RemoteController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/service"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">service</span><span class="params">(String req)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">        <span class="keyword">return</span> req + <span class="string">"/service"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Thread sleep을 추가하고 다시 테스트를 해보면 결과는 다음과 같습니다. 100개의 요청을 약 0.4초만에 모두 처리하던 이전과 달리 매 요청을 처리하는데 약 2초의 시간이 증가하고 있습니다. 결국 마지막 요청은 약 2 * 100 = 200초 후에서야 응답을 받을 수 있기 때문에 모든 요청에 대한 처리는 200초 정도 걸릴 것 입니다.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">02</span>:<span class="number">25</span>:<span class="number">22.056</span> [pool-<span class="number">1</span>-thread-<span class="number">32</span>] DEBUG org.springframework.web.client.RestTemplate - Response <span class="number">200</span> OK</span><br><span class="line"><span class="number">02</span>:<span class="number">25</span>:<span class="number">22.058</span> [pool-<span class="number">1</span>-thread-<span class="number">32</span>] DEBUG org.springframework.web.client.RestTemplate - Reading to [java.lang.String] as <span class="string">"text/plain;charset=UTF-8"</span></span><br><span class="line"><span class="number">02</span>:<span class="number">25</span>:<span class="number">22.061</span> [pool-<span class="number">1</span>-thread-<span class="number">32</span>] INFO com.example.study.LoadTest - idx: <span class="number">32</span>, Elapsed: <span class="number">2.233</span> -&gt; res: hello32/service</span><br><span class="line"><span class="number">02</span>:<span class="number">25</span>:<span class="number">24.060</span> [pool-<span class="number">1</span>-thread-<span class="number">56</span>] DEBUG org.springframework.web.client.RestTemplate - Response <span class="number">200</span> OK</span><br><span class="line"><span class="number">02</span>:<span class="number">25</span>:<span class="number">24.060</span> [pool-<span class="number">1</span>-thread-<span class="number">56</span>] DEBUG org.springframework.web.client.RestTemplate - Reading to [java.lang.String] as <span class="string">"text/plain;charset=UTF-8"</span></span><br><span class="line"><span class="number">02</span>:<span class="number">25</span>:<span class="number">24.060</span> [pool-<span class="number">1</span>-thread-<span class="number">56</span>] INFO com.example.study.LoadTest - idx: <span class="number">56</span>, Elapsed: <span class="number">4.231</span> -&gt; res: hello56/service</span><br><span class="line"><span class="number">02</span>:<span class="number">25</span>:<span class="number">26.068</span> [pool-<span class="number">1</span>-thread-<span class="number">93</span>] DEBUG org.springframework.web.client.RestTemplate - Response <span class="number">200</span> OK</span><br><span class="line"><span class="number">02</span>:<span class="number">25</span>:<span class="number">26.068</span> [pool-<span class="number">1</span>-thread-<span class="number">93</span>] DEBUG org.springframework.web.client.RestTemplate - Reading to [java.lang.String] as <span class="string">"text/plain;charset=UTF-8"</span></span><br><span class="line"><span class="number">02</span>:<span class="number">25</span>:<span class="number">26.068</span> [pool-<span class="number">1</span>-thread-<span class="number">93</span>] INFO com.example.study.LoadTest - idx: <span class="number">93</span>, Elapsed: <span class="number">6.238</span> -&gt; res: hello93/service</span><br><span class="line"><span class="number">02</span>:<span class="number">25</span>:<span class="number">28.077</span> [pool-<span class="number">1</span>-thread-<span class="number">31</span>] DEBUG org.springframework.web.client.RestTemplate - Response <span class="number">200</span> OK</span><br><span class="line"><span class="number">02</span>:<span class="number">25</span>:<span class="number">28.077</span> [pool-<span class="number">1</span>-thread-<span class="number">31</span>] DEBUG org.springframework.web.client.RestTemplate - Reading to [java.lang.String] as <span class="string">"text/plain;charset=UTF-8"</span></span><br><span class="line"><span class="number">02</span>:<span class="number">25</span>:<span class="number">28.077</span> [pool-<span class="number">1</span>-thread-<span class="number">31</span>] INFO com.example.study.LoadTest - idx: <span class="number">31</span>, Elapsed: <span class="number">8.249</span> -&gt; res: hello31/service</span><br><span class="line"><span class="number">02</span>:<span class="number">25</span>:<span class="number">30.081</span> [pool-<span class="number">1</span>-thread-<span class="number">20</span>] DEBUG org.springframework.web.client.RestTemplate - Response <span class="number">200</span> OK</span><br><span class="line"><span class="number">02</span>:<span class="number">25</span>:<span class="number">30.082</span> [pool-<span class="number">1</span>-thread-<span class="number">20</span>] DEBUG org.springframework.web.client.RestTemplate - Reading to [java.lang.String] as <span class="string">"text/plain;charset=UTF-8"</span></span><br><span class="line"><span class="number">02</span>:<span class="number">25</span>:<span class="number">30.082</span> [pool-<span class="number">1</span>-thread-<span class="number">20</span>] INFO com.example.study.LoadTest - idx: <span class="number">20</span>, Elapsed: <span class="number">10.254</span> -&gt; res: hello20/service</span><br><span class="line"><span class="number">02</span>:<span class="number">25</span>:<span class="number">32.089</span> [pool-<span class="number">1</span>-thread-<span class="number">46</span>] DEBUG org.springframework.web.client.RestTemplate - Response <span class="number">200</span> OK</span><br><span class="line"><span class="number">02</span>:<span class="number">25</span>:<span class="number">32.089</span> [pool-<span class="number">1</span>-thread-<span class="number">46</span>] DEBUG org.springframework.web.client.RestTemplate - Reading to [java.lang.String] as <span class="string">"text/plain;charset=UTF-8"</span></span><br><span class="line"><span class="number">02</span>:<span class="number">25</span>:<span class="number">32.089</span> [pool-<span class="number">1</span>-thread-<span class="number">46</span>] INFO com.example.study.LoadTest - idx: <span class="number">46</span>, Elapsed: <span class="number">12.26</span> -&gt; res: hello46/service</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><p>이런 결과가 나오게 된 이유는 클라이언트로부터의 요청을 받아 처리하는 Main Application의 tomcat thread가 1개이고, 1개의 서블릿 스레드를 이용해 클라이언트의 요청을 처리하는 과정에서 Remote Application에 대한 요청(Network I/O)에서 응답을 받기까지 약 2초간 스레드가 block되기 때문입니다.</p><h1 id="asyncresttemplate"><a href="#AsyncRestTemplate" class="headerlink" title="AsyncRestTemplate"></a>AsyncRestTemplate</h1><p><strong>위의 문제는 MainApplication의 tomcat 스레드는 클라이언트의 요청을 처리하며 외부 서비스(RemoteApplication)로 요청(Network I/O)을 보낸 후, 응답이 올 때까지 대기하고 있는 상태라는 점입니다. 해당 시간동안 CPU는 아무 일을 처리하지 않기때문에 자원이 소모되고 있습니다.</strong></p><p><strong>이 문제를 해결하기 위해서는 API를 호출하는 작업을 비동기적으로 바꿔야합니다. tomcat 스레드는 요청에 대한 작업을 다 끝내기 전에 반환을 해서 바로 다음 요청을 처리하도록 사용합니다. 그리고 외부 서비스로부터 실제 결과를 받고 클라이언트의 요청에 응답을 보내기 위해서는 새로운 스레드를 할당 받아 사용합니다.</strong> (외부 서비스로부터 실제 결과를 받고 클라이언트에 응답을 보내기 위해서는 새로운 스레드를 할당 받아야 하지만, 외부 API를 호출하는 동안은 스레드(tomcat) 자원을 낭비하고 싶지 않다는 것이 목적이다.)</p><p>스프링 3.x 버전에서는 이 문제를 간단히 해결하기 어려웠지만 스프링 4 부터 제공하는 <a href="https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/client/AsyncRestTemplate.html" target="_blank" rel="noopener">AsyncRestTemplate</a>을 사용하면 이 문제를 쉽게 해결할 수 있습니다. <strong>AsyncRestTemplate은 비동기 클라이언트를 제공하는 클래스이며 ListenableFuture를 반환합니다. 스프링은 컨트롤러에서 ListenableFuture를 리턴하면 해당 스레드는 즉시 반납하고, 스프링 MVC가 자동으로 등록해준 콜백에 의해 결과가 처리됩니다.</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RestController</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MainController</span> </span>&#123;</span><br><span class="line">        <span class="comment">// asynchronous</span></span><br><span class="line">        AsyncRestTemplate rt = <span class="keyword">new</span> AsyncRestTemplate();</span><br><span class="line"></span><br><span class="line">        <span class="meta">@GetMapping</span>(<span class="string">"/rest"</span>)</span><br><span class="line">        <span class="keyword">public</span> ListenableFuture&lt;ResponseEntity&lt;String&gt;&gt; rest(<span class="keyword">int</span> idx) &#123;</span><br><span class="line">            <span class="keyword">return</span> rt.getForEntity(<span class="string">"http://localhost:8081/service?req=&#123;req&#125;"</span>,</span><br><span class="line">                    String.class, <span class="string">"hello"</span> + idx);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(MainApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>실행 결과를 살펴보면 100개의 요청을 동시에 처리하는데 약 2.6초의 시간이 걸렸습니다.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line"><span class="number">16</span>:<span class="number">55</span>:<span class="number">49.088</span> [pool-<span class="number">1</span>-thread-<span class="number">4</span>] DEBUG org.springframework.web.client.RestTemplate - Response <span class="number">200</span> OK</span><br><span class="line"><span class="number">16</span>:<span class="number">55</span>:<span class="number">49.089</span> [pool-<span class="number">1</span>-thread-<span class="number">4</span>] DEBUG org.springframework.web.client.RestTemplate - Reading to [java.lang.String] as <span class="string">"text/plain;charset=UTF-8"</span></span><br><span class="line"><span class="number">16</span>:<span class="number">55</span>:<span class="number">49.089</span> [pool-<span class="number">1</span>-thread-<span class="number">4</span>] INFO com.example.study.LoadTest - idx: <span class="number">4</span>, Elapsed: <span class="number">2.658</span> -&gt; res: hello4/service</span><br><span class="line"><span class="number">16</span>:<span class="number">55</span>:<span class="number">49.090</span> [pool-<span class="number">1</span>-thread-<span class="number">44</span>] DEBUG org.springframework.web.client.RestTemplate - Response <span class="number">200</span> OK</span><br><span class="line"><span class="number">16</span>:<span class="number">55</span>:<span class="number">49.090</span> [pool-<span class="number">1</span>-thread-<span class="number">44</span>] DEBUG org.springframework.web.client.RestTemplate - Reading to [java.lang.String] as <span class="string">"text/plain;charset=UTF-8"</span></span><br><span class="line"><span class="number">16</span>:<span class="number">55</span>:<span class="number">49.090</span> [pool-<span class="number">1</span>-thread-<span class="number">44</span>] INFO com.example.study.LoadTest - idx: <span class="number">44</span>, Elapsed: <span class="number">2.659</span> -&gt; res: hello44/service</span><br><span class="line"><span class="number">16</span>:<span class="number">55</span>:<span class="number">49.091</span> [pool-<span class="number">1</span>-thread-<span class="number">93</span>] DEBUG org.springframework.web.client.RestTemplate - Response <span class="number">200</span> OK</span><br><span class="line"><span class="number">16</span>:<span class="number">55</span>:<span class="number">49.091</span> [pool-<span class="number">1</span>-thread-<span class="number">93</span>] DEBUG org.springframework.web.client.RestTemplate - Reading to [java.lang.String] as <span class="string">"text/plain;charset=UTF-8"</span></span><br><span class="line"><span class="number">16</span>:<span class="number">55</span>:<span class="number">49.091</span> [pool-<span class="number">1</span>-thread-<span class="number">93</span>] INFO com.example.study.LoadTest - idx: <span class="number">93</span>, Elapsed: <span class="number">2.658</span> -&gt; res: hello93/service</span><br><span class="line"><span class="number">16</span>:<span class="number">55</span>:<span class="number">49.095</span> [pool-<span class="number">1</span>-thread-<span class="number">66</span>] DEBUG org.springframework.web.client.RestTemplate - Response <span class="number">200</span> OK</span><br><span class="line"><span class="number">16</span>:<span class="number">55</span>:<span class="number">49.096</span> [pool-<span class="number">1</span>-thread-<span class="number">66</span>] DEBUG org.springframework.web.client.RestTemplate - Reading to [java.lang.String] as <span class="string">"text/plain;charset=UTF-8"</span></span><br><span class="line"><span class="number">16</span>:<span class="number">55</span>:<span class="number">49.096</span> [pool-<span class="number">1</span>-thread-<span class="number">66</span>] INFO com.example.study.LoadTest - idx: <span class="number">66</span>, Elapsed: <span class="number">2.664</span> -&gt; res: hello66/service</span><br><span class="line"><span class="number">16</span>:<span class="number">55</span>:<span class="number">49.098</span> [pool-<span class="number">1</span>-thread-<span class="number">16</span>] DEBUG org.springframework.web.client.RestTemplate - Response <span class="number">200</span> OK</span><br><span class="line"><span class="number">16</span>:<span class="number">55</span>:<span class="number">49.098</span> [pool-<span class="number">1</span>-thread-<span class="number">16</span>] DEBUG org.springframework.web.client.RestTemplate - Reading to [java.lang.String] as <span class="string">"text/plain;charset=UTF-8"</span></span><br><span class="line"><span class="number">16</span>:<span class="number">55</span>:<span class="number">49.098</span> [pool-<span class="number">1</span>-thread-<span class="number">16</span>] INFO com.example.study.LoadTest - idx: <span class="number">16</span>, Elapsed: <span class="number">2.667</span> -&gt; res: hello16/service</span><br><span class="line"><span class="number">16</span>:<span class="number">55</span>:<span class="number">49.101</span> [pool-<span class="number">1</span>-thread-<span class="number">57</span>] DEBUG org.springframework.web.client.RestTemplate - Response <span class="number">200</span> OK</span><br><span class="line"><span class="number">16</span>:<span class="number">55</span>:<span class="number">49.101</span> [pool-<span class="number">1</span>-thread-<span class="number">57</span>] DEBUG org.springframework.web.client.RestTemplate - Reading to [java.lang.String] as <span class="string">"text/plain;charset=UTF-8"</span></span><br><span class="line"><span class="number">16</span>:<span class="number">55</span>:<span class="number">49.101</span> [pool-<span class="number">1</span>-thread-<span class="number">57</span>] INFO com.example.study.LoadTest - idx: <span class="number">57</span>, Elapsed: <span class="number">2.669</span> -&gt; res: hello57/service</span><br><span class="line"><span class="number">16</span>:<span class="number">55</span>:<span class="number">49.104</span> [pool-<span class="number">1</span>-thread-<span class="number">2</span>] DEBUG org.springframework.web.client.RestTemplate - Response <span class="number">200</span> OK</span><br><span class="line"><span class="number">16</span>:<span class="number">55</span>:<span class="number">49.104</span> [pool-<span class="number">1</span>-thread-<span class="number">2</span>] DEBUG org.springframework.web.client.RestTemplate - Reading to [java.lang.String] as <span class="string">"text/plain;charset=UTF-8"</span></span><br><span class="line"><span class="number">16</span>:<span class="number">55</span>:<span class="number">49.105</span> [pool-<span class="number">1</span>-thread-<span class="number">2</span>] INFO com.example.study.LoadTest - idx: <span class="number">2</span>, Elapsed: <span class="number">2.674</span> -&gt; res: hello2/service</span><br><span class="line"><span class="number">16</span>:<span class="number">55</span>:<span class="number">49.105</span> [pool-<span class="number">1</span>-thread-<span class="number">15</span>] DEBUG org.springframework.web.client.RestTemplate - Response <span class="number">200</span> OK</span><br><span class="line"><span class="number">16</span>:<span class="number">55</span>:<span class="number">49.105</span> [pool-<span class="number">1</span>-thread-<span class="number">15</span>] DEBUG org.springframework.web.client.RestTemplate - Reading to [java.lang.String] as <span class="string">"text/plain;charset=UTF-8"</span></span><br><span class="line"><span class="number">16</span>:<span class="number">55</span>:<span class="number">49.105</span> [pool-<span class="number">1</span>-thread-<span class="number">15</span>] INFO com.example.study.LoadTest - idx: <span class="number">15</span>, Elapsed: <span class="number">2.674</span> -&gt; res: hello15/service</span><br><span class="line"><span class="number">16</span>:<span class="number">55</span>:<span class="number">49.106</span> [main] INFO com.example.study.LoadTest - Total: <span class="number">2.673</span></span><br></pre></td></tr></table></figure></p><p>클라이언트의 요청이 들어 올 때, MainApplication의 스레드 상태를 살펴보면, tomcat 스레드는 그대로 1개 입니다.(http-nio-8080-exec-1) 그러나 비동기 작업을 처리하기 위해서 순간적으로 백그라운드에 100개의 스레드 새로 생성되는것을 확인할 수 있습니다.<br><img src="/images/post/2019-04-13/async_rest_template_result.png" alt="async rest template result"></p><h1 id="netty-non-blocking-io"><a href="#Netty-non-blocking-I-O" class="headerlink" title="Netty non-blocking I/O"></a>Netty non-blocking I/O</h1><p>지금까지 Tomcat의 스레드가 1개이지만 요청을 비동기적으로 처리함으로써 Tomcat의 스레드는 바로 반환이되어 다시 그 후의 요청에 Tomcat의 스레드를 이용해 요청을 받을 수 있었습니다. 그러나 결과적으로는 실제 비동기 요청을 처리하는 스레드는 요청의 수 만큼 계속 생성되는 것을 확인할 수 있었습니다.</p><p>이번에는 이렇게 <strong>비동기 요청을 처리하는 스레드의 수도 Netty의 non blocking I/O를 이용함으로써 비동기 요청을 처리하는 스레드도 줄여보고자 합니다.</strong> 그러면 결과적으로 tomcat의 스레드 1개, netty의 non blocking I/O를 이용하기위한 필요한 스레드의 수만큼만 생성되어 클라이언트의 요청을 모두 처리할 수 있을 것 입니다.</p><p>먼저 netty의 dependency를 build.gradle 혹은 pom.xml에 추가합니다. 저는 build.gradle에 의존성을 추가해 주었습니다.<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">    implementation <span class="string">'io.netty:netty-all:4.0.4.Final'</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>AsyncRestTemplate이 netty의 Netty4ClientHttpRequestFactory를 이용할 수 있도록 다음과 같이 설정합니다.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RestController</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MainController</span> </span>&#123;</span><br><span class="line">        <span class="comment">// asynchronous + netty non-blocking</span></span><br><span class="line">        AsyncRestTemplate rt = <span class="keyword">new</span> AsyncRestTemplate(<span class="keyword">new</span> Netty4ClientHttpRequestFactory(<span class="keyword">new</span> NioEventLoopGroup(<span class="number">1</span>)));</span><br><span class="line"></span><br><span class="line">        <span class="meta">@GetMapping</span>(<span class="string">"/rest"</span>)</span><br><span class="line">        <span class="keyword">public</span> ListenableFuture&lt;ResponseEntity&lt;String&gt;&gt; rest(<span class="keyword">int</span> idx) &#123;</span><br><span class="line">            <span class="keyword">return</span> rt.getForEntity(<span class="string">"http://localhost:8081/service?req=&#123;req&#125;"</span>,</span><br><span class="line">                    String.class, <span class="string">"hello"</span> + idx);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(MainApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>다시 서버를 띄우고 테스트를 해보면 클라이언트의 요청을 전부 처리하는데 걸린 시간은 약 2.7초로 이전과 큰 차이가 없습니다.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line"><span class="number">18</span>:<span class="number">24</span>:<span class="number">49.958</span> [pool-<span class="number">1</span>-thread-<span class="number">65</span>] DEBUG org.springframework.web.client.RestTemplate - Response <span class="number">200</span> OK</span><br><span class="line"><span class="number">18</span>:<span class="number">24</span>:<span class="number">49.958</span> [pool-<span class="number">1</span>-thread-<span class="number">65</span>] DEBUG org.springframework.web.client.RestTemplate - Reading to [java.lang.String] as <span class="string">"text/plain;charset=UTF-8"</span></span><br><span class="line"><span class="number">18</span>:<span class="number">24</span>:<span class="number">49.958</span> [pool-<span class="number">1</span>-thread-<span class="number">65</span>] INFO com.example.study.LoadTest - idx: <span class="number">65</span>, Elapsed: <span class="number">2.744</span> -&gt; res: hello65/service</span><br><span class="line"><span class="number">18</span>:<span class="number">24</span>:<span class="number">49.964</span> [pool-<span class="number">1</span>-thread-<span class="number">59</span>] DEBUG org.springframework.web.client.RestTemplate - Response <span class="number">200</span> OK</span><br><span class="line"><span class="number">18</span>:<span class="number">24</span>:<span class="number">49.964</span> [pool-<span class="number">1</span>-thread-<span class="number">59</span>] DEBUG org.springframework.web.client.RestTemplate - Reading to [java.lang.String] as <span class="string">"text/plain;charset=UTF-8"</span></span><br><span class="line"><span class="number">18</span>:<span class="number">24</span>:<span class="number">49.964</span> [pool-<span class="number">1</span>-thread-<span class="number">59</span>] INFO com.example.study.LoadTest - idx: <span class="number">59</span>, Elapsed: <span class="number">2.751</span> -&gt; res: hello59/service</span><br><span class="line"><span class="number">18</span>:<span class="number">24</span>:<span class="number">49.964</span> [pool-<span class="number">1</span>-thread-<span class="number">14</span>] DEBUG org.springframework.web.client.RestTemplate - Response <span class="number">200</span> OK</span><br><span class="line"><span class="number">18</span>:<span class="number">24</span>:<span class="number">49.965</span> [pool-<span class="number">1</span>-thread-<span class="number">14</span>] DEBUG org.springframework.web.client.RestTemplate - Reading to [java.lang.String] as <span class="string">"text/plain;charset=UTF-8"</span></span><br><span class="line"><span class="number">18</span>:<span class="number">24</span>:<span class="number">49.965</span> [pool-<span class="number">1</span>-thread-<span class="number">14</span>] INFO com.example.study.LoadTest - idx: <span class="number">14</span>, Elapsed: <span class="number">2.752</span> -&gt; res: hello14/service</span><br><span class="line"><span class="number">18</span>:<span class="number">24</span>:<span class="number">49.968</span> [pool-<span class="number">1</span>-thread-<span class="number">31</span>] DEBUG org.springframework.web.client.RestTemplate - Response <span class="number">200</span> OK</span><br><span class="line"><span class="number">18</span>:<span class="number">24</span>:<span class="number">49.968</span> [pool-<span class="number">1</span>-thread-<span class="number">31</span>] DEBUG org.springframework.web.client.RestTemplate - Reading to [java.lang.String] as <span class="string">"text/plain;charset=UTF-8"</span></span><br><span class="line"><span class="number">18</span>:<span class="number">24</span>:<span class="number">49.968</span> [pool-<span class="number">1</span>-thread-<span class="number">31</span>] INFO com.example.study.LoadTest - idx: <span class="number">31</span>, Elapsed: <span class="number">2.754</span> -&gt; res: hello31/service</span><br><span class="line"><span class="number">18</span>:<span class="number">24</span>:<span class="number">49.969</span> [pool-<span class="number">1</span>-thread-<span class="number">63</span>] DEBUG org.springframework.web.client.RestTemplate - Response <span class="number">200</span> OK</span><br><span class="line"><span class="number">18</span>:<span class="number">24</span>:<span class="number">49.969</span> [pool-<span class="number">1</span>-thread-<span class="number">63</span>] DEBUG org.springframework.web.client.RestTemplate - Reading to [java.lang.String] as <span class="string">"text/plain;charset=UTF-8"</span></span><br><span class="line"><span class="number">18</span>:<span class="number">24</span>:<span class="number">49.969</span> [pool-<span class="number">1</span>-thread-<span class="number">63</span>] INFO com.example.study.LoadTest - idx: <span class="number">63</span>, Elapsed: <span class="number">2.755</span> -&gt; res: hello63/service</span><br><span class="line"><span class="number">18</span>:<span class="number">24</span>:<span class="number">49.969</span> [pool-<span class="number">1</span>-thread-<span class="number">19</span>] DEBUG org.springframework.web.client.RestTemplate - Response <span class="number">200</span> OK</span><br><span class="line"><span class="number">18</span>:<span class="number">24</span>:<span class="number">49.969</span> [pool-<span class="number">1</span>-thread-<span class="number">19</span>] DEBUG org.springframework.web.client.RestTemplate - Reading to [java.lang.String] as <span class="string">"text/plain;charset=UTF-8"</span></span><br><span class="line"><span class="number">18</span>:<span class="number">24</span>:<span class="number">49.969</span> [pool-<span class="number">1</span>-thread-<span class="number">19</span>] INFO com.example.study.LoadTest - idx: <span class="number">19</span>, Elapsed: <span class="number">2.755</span> -&gt; res: hello19/service</span><br><span class="line"><span class="number">18</span>:<span class="number">24</span>:<span class="number">49.970</span> [pool-<span class="number">1</span>-thread-<span class="number">62</span>] DEBUG org.springframework.web.client.RestTemplate - Response <span class="number">200</span> OK</span><br><span class="line"><span class="number">18</span>:<span class="number">24</span>:<span class="number">49.970</span> [pool-<span class="number">1</span>-thread-<span class="number">62</span>] DEBUG org.springframework.web.client.RestTemplate - Reading to [java.lang.String] as <span class="string">"text/plain;charset=UTF-8"</span></span><br><span class="line"><span class="number">18</span>:<span class="number">24</span>:<span class="number">49.970</span> [pool-<span class="number">1</span>-thread-<span class="number">62</span>] INFO com.example.study.LoadTest - idx: <span class="number">62</span>, Elapsed: <span class="number">2.756</span> -&gt; res: hello62/service</span><br><span class="line"><span class="number">18</span>:<span class="number">24</span>:<span class="number">49.970</span> [main] INFO com.example.study.LoadTest - Total: <span class="number">2.755</span></span><br></pre></td></tr></table></figure></p><p>스레드를 확인해보면 다음과 같이 tomcat 스레드 1개, netty가 non blocking I/O를 사용하는데 필요로 하는 몇개의 스레드가 추가된 것 말고는 스레드 수가 크게 증가하지 않은것을 확인할 수 있습니다.<br><img src="/images/post/2019-04-13/netty_nio_result.png" alt="async rest template result"></p><h1 id="deferredresult"><a href="#DeferredResult" class="headerlink" title="DeferredResult"></a>DeferredResult</h1><p>이전 포스팅에서 살펴 보았던 <strong>DeferredResult를 사용하면 AsyncRestTemplate을 사용하여 외부 서비스를 호출한 후, 그 결과를 다시 이용해 클라이언트의 요청에 응답하는 추가 로직 부분을 작성할 수 있습니다.</strong></p><p>컨트롤러에서 DeferredResult 오브젝트를 반환하는 시점에는 바로 응답이 가지 않고, 추후 해당 DeferredResult 오브젝트에 값을 set(setResult, setErrorResult) 해줄 때, 클라이언트에게 응답이 가게 됩니다. 이를 이용하려면 ListenableFuture에 콜백을 추가해 해당 콜백 로직 안에서 결과를 이용해 DeferredResult 오브젝트의 set 메서드를 호출하면 됩니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RestController</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MainController</span> </span>&#123;</span><br><span class="line">        <span class="comment">// asynchronous + netty non-blocking</span></span><br><span class="line">        AsyncRestTemplate rt = <span class="keyword">new</span> AsyncRestTemplate(<span class="keyword">new</span> Netty4ClientHttpRequestFactory(<span class="keyword">new</span> NioEventLoopGroup(<span class="number">1</span>)));</span><br><span class="line"></span><br><span class="line">        <span class="meta">@GetMapping</span>(<span class="string">"/rest"</span>)</span><br><span class="line">        <span class="function"><span class="keyword">public</span> DeferredResult&lt;String&gt; <span class="title">rest</span><span class="params">(<span class="keyword">int</span> idx)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// 오브젝트를 만들어서 컨트롤러에서 리턴하면 언제가 될지 모르지만 언제인가 DeferredResult에 값을 써주면</span></span><br><span class="line">            <span class="comment">// 그 값을 응답으로 사용</span></span><br><span class="line">            DeferredResult&lt;String&gt; dr = <span class="keyword">new</span> DeferredResult&lt;&gt;();</span><br><span class="line"></span><br><span class="line">            ListenableFuture&lt;ResponseEntity&lt;String&gt;&gt; f1 = rt.getForEntity(<span class="string">"http://localhost:8081/service?req=&#123;req&#125;"</span>,</span><br><span class="line">                    String.class, <span class="string">"hello"</span> + idx);</span><br><span class="line">            f1.addCallback(s -&gt; &#123;</span><br><span class="line">                dr.setResult(s.getBody() + <span class="string">"/work"</span>);</span><br><span class="line">            &#125;, e -&gt; &#123;</span><br><span class="line">                dr.setErrorResult(e.getMessage());</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> dr;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(MainApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>외부 서비스의 응답을 받아 “/work” 문자열이 추가되어 클라이언트에 전달된것을 확인할 수 있습니다.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line"><span class="number">18</span>:<span class="number">38</span>:<span class="number">23.514</span> [pool-<span class="number">1</span>-thread-<span class="number">33</span>] DEBUG org.springframework.web.client.RestTemplate - Response <span class="number">200</span> OK</span><br><span class="line"><span class="number">18</span>:<span class="number">38</span>:<span class="number">23.514</span> [pool-<span class="number">1</span>-thread-<span class="number">33</span>] DEBUG org.springframework.web.client.RestTemplate - Reading to [java.lang.String] as <span class="string">"text/plain;charset=UTF-8"</span></span><br><span class="line"><span class="number">18</span>:<span class="number">38</span>:<span class="number">23.514</span> [pool-<span class="number">1</span>-thread-<span class="number">33</span>] INFO com.example.study.LoadTest - idx: <span class="number">33</span>, Elapsed: <span class="number">2.345</span> -&gt; res: hello33/service/work</span><br><span class="line"><span class="number">18</span>:<span class="number">38</span>:<span class="number">23.515</span> [pool-<span class="number">1</span>-thread-<span class="number">79</span>] DEBUG org.springframework.web.client.RestTemplate - Response <span class="number">200</span> OK</span><br><span class="line"><span class="number">18</span>:<span class="number">38</span>:<span class="number">23.515</span> [pool-<span class="number">1</span>-thread-<span class="number">79</span>] DEBUG org.springframework.web.client.RestTemplate - Reading to [java.lang.String] as <span class="string">"text/plain;charset=UTF-8"</span></span><br><span class="line"><span class="number">18</span>:<span class="number">38</span>:<span class="number">23.515</span> [pool-<span class="number">1</span>-thread-<span class="number">79</span>] INFO com.example.study.LoadTest - idx: <span class="number">79</span>, Elapsed: <span class="number">2.345</span> -&gt; res: hello79/service/work</span><br><span class="line"><span class="number">18</span>:<span class="number">38</span>:<span class="number">23.515</span> [pool-<span class="number">1</span>-thread-<span class="number">80</span>] DEBUG org.springframework.web.client.RestTemplate - Response <span class="number">200</span> OK</span><br><span class="line"><span class="number">18</span>:<span class="number">38</span>:<span class="number">23.515</span> [pool-<span class="number">1</span>-thread-<span class="number">80</span>] DEBUG org.springframework.web.client.RestTemplate - Reading to [java.lang.String] as <span class="string">"text/plain;charset=UTF-8"</span></span><br><span class="line"><span class="number">18</span>:<span class="number">38</span>:<span class="number">23.515</span> [pool-<span class="number">1</span>-thread-<span class="number">80</span>] INFO com.example.study.LoadTest - idx: <span class="number">80</span>, Elapsed: <span class="number">2.345</span> -&gt; res: hello80/service/work</span><br><span class="line"><span class="number">18</span>:<span class="number">38</span>:<span class="number">23.516</span> [pool-<span class="number">1</span>-thread-<span class="number">9</span>] DEBUG org.springframework.web.client.RestTemplate - Response <span class="number">200</span> OK</span><br><span class="line"><span class="number">18</span>:<span class="number">38</span>:<span class="number">23.516</span> [pool-<span class="number">1</span>-thread-<span class="number">9</span>] DEBUG org.springframework.web.client.RestTemplate - Reading to [java.lang.String] as <span class="string">"text/plain;charset=UTF-8"</span></span><br><span class="line"><span class="number">18</span>:<span class="number">38</span>:<span class="number">23.516</span> [pool-<span class="number">1</span>-thread-<span class="number">9</span>] INFO com.example.study.LoadTest - idx: <span class="number">9</span>, Elapsed: <span class="number">2.347</span> -&gt; res: hello9/service/work</span><br><span class="line"><span class="number">18</span>:<span class="number">38</span>:<span class="number">23.517</span> [pool-<span class="number">1</span>-thread-<span class="number">60</span>] DEBUG org.springframework.web.client.RestTemplate - Response <span class="number">200</span> OK</span><br><span class="line"><span class="number">18</span>:<span class="number">38</span>:<span class="number">23.517</span> [pool-<span class="number">1</span>-thread-<span class="number">60</span>] DEBUG org.springframework.web.client.RestTemplate - Reading to [java.lang.String] as <span class="string">"text/plain;charset=UTF-8"</span></span><br><span class="line"><span class="number">18</span>:<span class="number">38</span>:<span class="number">23.517</span> [pool-<span class="number">1</span>-thread-<span class="number">60</span>] INFO com.example.study.LoadTest - idx: <span class="number">60</span>, Elapsed: <span class="number">2.347</span> -&gt; res: hello60/service/work</span><br><span class="line"><span class="number">18</span>:<span class="number">38</span>:<span class="number">23.517</span> [pool-<span class="number">1</span>-thread-<span class="number">98</span>] DEBUG org.springframework.web.client.RestTemplate - Response <span class="number">200</span> OK</span><br><span class="line"><span class="number">18</span>:<span class="number">38</span>:<span class="number">23.517</span> [pool-<span class="number">1</span>-thread-<span class="number">98</span>] DEBUG org.springframework.web.client.RestTemplate - Reading to [java.lang.String] as <span class="string">"text/plain;charset=UTF-8"</span></span><br><span class="line"><span class="number">18</span>:<span class="number">38</span>:<span class="number">23.518</span> [pool-<span class="number">1</span>-thread-<span class="number">98</span>] INFO com.example.study.LoadTest - idx: <span class="number">98</span>, Elapsed: <span class="number">2.347</span> -&gt; res: hello98/service/work</span><br><span class="line"><span class="number">18</span>:<span class="number">38</span>:<span class="number">23.518</span> [main] INFO com.example.study.LoadTest - Total: <span class="number">2.346</span></span><br></pre></td></tr></table></figure></p><h1 id="중첩된-remote-service-사용"><a href="#중첩된-Remote-Service-사용" class="headerlink" title="중첩된 Remote Service 사용"></a>중첩된 Remote Service 사용</h1><p>이번에는 외부 서비스를 하나 더 추가해보겠습니다. 외부 서비스의 요청에 대한 결과를 다시 다른 서비스를 호출하는 요청의 파라미터로 사용하면서 콜백의 구조가 복잡해지는 문제가 생기게 되었습니다. 이런 문제를 <strong>콜백 헬</strong>이라고 합니다.</p><p>다음번 포스팅에서는 콜백 헬을 해결할 수 있는 방법에 대해서 알아보도록 하겠습니다.</p><h2 id="remote-application"><a href="#Remote-Application-1" class="headerlink" title="Remote Application"></a>Remote Application</h2><p>“/service2”를 추가합니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RemoteApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RestController</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">RemoteController</span> </span>&#123;</span><br><span class="line">        <span class="meta">@GetMapping</span>(<span class="string">"/service"</span>)</span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">service</span><span class="params">(String req)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">            Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">            <span class="keyword">return</span> req + <span class="string">"/service1"</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@GetMapping</span>(<span class="string">"/service2"</span>)</span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">service2</span><span class="params">(String req)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">            Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">            <span class="keyword">return</span> req + <span class="string">"/service2"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 하나의 프로젝트에서 2개의 스프링 애플리케이션을 띄우기 위해 외부 서비스 역할을 하는 RemoteApplication은</span></span><br><span class="line">        <span class="comment">// application.properties가 아닌 별도의 프로퍼티를 이용하도록 직접 설정한다.</span></span><br><span class="line">        System.setProperty(<span class="string">"server.port"</span>, <span class="string">"8081"</span>);</span><br><span class="line">        System.setProperty(<span class="string">"server.tomcat.max-threads"</span>, <span class="string">"1000"</span>);</span><br><span class="line">        SpringApplication.run(RemoteApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="main-application"><a href="#Main-Application-1" class="headerlink" title="Main Application"></a>Main Application</h2><p>“/service”를 호출한 결과를 이용해 “/service2”를 호출하도록 합니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RestController</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MainController</span> </span>&#123;</span><br><span class="line">        <span class="comment">// asynchronous + netty non-blocking</span></span><br><span class="line">        AsyncRestTemplate rt = <span class="keyword">new</span> AsyncRestTemplate(<span class="keyword">new</span> Netty4ClientHttpRequestFactory(<span class="keyword">new</span> NioEventLoopGroup(<span class="number">1</span>)));</span><br><span class="line"></span><br><span class="line">        <span class="meta">@GetMapping</span>(<span class="string">"/rest"</span>)</span><br><span class="line">        <span class="function"><span class="keyword">public</span> DeferredResult&lt;String&gt; <span class="title">rest</span><span class="params">(<span class="keyword">int</span> idx)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// 오브젝트를 만들어서 컨트롤러에서 리턴하면 언제가 될지 모르지만 언제인가 DeferredResult에 값을 써주면</span></span><br><span class="line">            <span class="comment">// 그 값을 응답으로 사용</span></span><br><span class="line">            DeferredResult&lt;String&gt; dr = <span class="keyword">new</span> DeferredResult&lt;&gt;();</span><br><span class="line"></span><br><span class="line">            ListenableFuture&lt;ResponseEntity&lt;String&gt;&gt; f1 = rt.getForEntity(<span class="string">"http://localhost:8081/service?req=&#123;req&#125;"</span>, String.class, <span class="string">"hello"</span> + idx);</span><br><span class="line">            f1.addCallback(s -&gt; &#123;</span><br><span class="line">                ListenableFuture&lt;ResponseEntity&lt;String&gt;&gt; f2 = rt.getForEntity(<span class="string">"http://localhost:8081/service2?req=&#123;req&#125;"</span>, String.class, s.getBody());</span><br><span class="line">                f2.addCallback(s2 -&gt; &#123;</span><br><span class="line">                    dr.setResult(s2.getBody());</span><br><span class="line">                &#125;, e -&gt; &#123;</span><br><span class="line">                    dr.setErrorResult(e.getMessage());</span><br><span class="line">                &#125;);</span><br><span class="line"></span><br><span class="line">            &#125;, e -&gt; &#123;</span><br><span class="line">                dr.setErrorResult(e.getMessage());</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> dr;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(MainApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="결과-확인"><a href="#결과-확인-1" class="headerlink" title="결과 확인"></a>결과 확인</h2><p>100개의 클라이언트 요청을 처리하는데 약 4.3초의 시간이 걸렸습니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line"><span class="number">19</span>:<span class="number">25</span>:<span class="number">19.904</span> [pool-<span class="number">1</span>-thread-<span class="number">17</span>] DEBUG org.springframework.web.client.RestTemplate - Response <span class="number">200</span> OK</span><br><span class="line"><span class="number">19</span>:<span class="number">25</span>:<span class="number">19.904</span> [pool-<span class="number">1</span>-thread-<span class="number">17</span>] DEBUG org.springframework.web.client.RestTemplate - Reading to [java.lang.String] as <span class="string">"text/plain;charset=UTF-8"</span></span><br><span class="line"><span class="number">19</span>:<span class="number">25</span>:<span class="number">19.905</span> [pool-<span class="number">1</span>-thread-<span class="number">17</span>] INFO com.example.study.LoadTest - idx: <span class="number">17</span>, Elapsed: <span class="number">4.338</span> -&gt; res: hello17/service1/service2</span><br><span class="line"><span class="number">19</span>:<span class="number">25</span>:<span class="number">19.905</span> [pool-<span class="number">1</span>-thread-<span class="number">87</span>] DEBUG org.springframework.web.client.RestTemplate - Response <span class="number">200</span> OK</span><br><span class="line"><span class="number">19</span>:<span class="number">25</span>:<span class="number">19.905</span> [pool-<span class="number">1</span>-thread-<span class="number">87</span>] DEBUG org.springframework.web.client.RestTemplate - Reading to [java.lang.String] as <span class="string">"text/plain;charset=UTF-8"</span></span><br><span class="line"><span class="number">19</span>:<span class="number">25</span>:<span class="number">19.905</span> [pool-<span class="number">1</span>-thread-<span class="number">87</span>] INFO com.example.study.LoadTest - idx: <span class="number">87</span>, Elapsed: <span class="number">4.337</span> -&gt; res: hello87/service1/service2</span><br><span class="line"><span class="number">19</span>:<span class="number">25</span>:<span class="number">19.905</span> [pool-<span class="number">1</span>-thread-<span class="number">14</span>] DEBUG org.springframework.web.client.RestTemplate - Response <span class="number">200</span> OK</span><br><span class="line"><span class="number">19</span>:<span class="number">25</span>:<span class="number">19.906</span> [pool-<span class="number">1</span>-thread-<span class="number">14</span>] DEBUG org.springframework.web.client.RestTemplate - Reading to [java.lang.String] as <span class="string">"text/plain;charset=UTF-8"</span></span><br><span class="line"><span class="number">19</span>:<span class="number">25</span>:<span class="number">19.906</span> [pool-<span class="number">1</span>-thread-<span class="number">14</span>] INFO com.example.study.LoadTest - idx: <span class="number">14</span>, Elapsed: <span class="number">4.339</span> -&gt; res: hello14/service1/service2</span><br><span class="line"><span class="number">19</span>:<span class="number">25</span>:<span class="number">19.906</span> [pool-<span class="number">1</span>-thread-<span class="number">74</span>] DEBUG org.springframework.web.client.RestTemplate - Response <span class="number">200</span> OK</span><br><span class="line"><span class="number">19</span>:<span class="number">25</span>:<span class="number">19.906</span> [pool-<span class="number">1</span>-thread-<span class="number">74</span>] DEBUG org.springframework.web.client.RestTemplate - Reading to [java.lang.String] as <span class="string">"text/plain;charset=UTF-8"</span></span><br><span class="line"><span class="number">19</span>:<span class="number">25</span>:<span class="number">19.906</span> [pool-<span class="number">1</span>-thread-<span class="number">74</span>] INFO com.example.study.LoadTest - idx: <span class="number">74</span>, Elapsed: <span class="number">4.338</span> -&gt; res: hello74/service1/service2</span><br><span class="line"><span class="number">19</span>:<span class="number">25</span>:<span class="number">19.907</span> [pool-<span class="number">1</span>-thread-<span class="number">60</span>] DEBUG org.springframework.web.client.RestTemplate - Response <span class="number">200</span> OK</span><br><span class="line"><span class="number">19</span>:<span class="number">25</span>:<span class="number">19.907</span> [pool-<span class="number">1</span>-thread-<span class="number">60</span>] DEBUG org.springframework.web.client.RestTemplate - Reading to [java.lang.String] as <span class="string">"text/plain;charset=UTF-8"</span></span><br><span class="line"><span class="number">19</span>:<span class="number">25</span>:<span class="number">19.907</span> [pool-<span class="number">1</span>-thread-<span class="number">60</span>] INFO com.example.study.LoadTest - idx: <span class="number">60</span>, Elapsed: <span class="number">4.339</span> -&gt; res: hello60/service1/service2</span><br><span class="line"><span class="number">19</span>:<span class="number">25</span>:<span class="number">19.907</span> [pool-<span class="number">1</span>-thread-<span class="number">38</span>] DEBUG org.springframework.web.client.RestTemplate - Response <span class="number">200</span> OK</span><br><span class="line"><span class="number">19</span>:<span class="number">25</span>:<span class="number">19.907</span> [pool-<span class="number">1</span>-thread-<span class="number">38</span>] DEBUG org.springframework.web.client.RestTemplate - Reading to [java.lang.String] as <span class="string">"text/plain;charset=UTF-8"</span></span><br><span class="line"><span class="number">19</span>:<span class="number">25</span>:<span class="number">19.907</span> [pool-<span class="number">1</span>-thread-<span class="number">38</span>] INFO com.example.study.LoadTest - idx: <span class="number">38</span>, Elapsed: <span class="number">4.34</span> -&gt; res: hello38/service1/service2</span><br><span class="line"><span class="number">19</span>:<span class="number">25</span>:<span class="number">19.907</span> [pool-<span class="number">1</span>-thread-<span class="number">78</span>] DEBUG org.springframework.web.client.RestTemplate - Response <span class="number">200</span> OK</span><br><span class="line"><span class="number">19</span>:<span class="number">25</span>:<span class="number">19.908</span> [pool-<span class="number">1</span>-thread-<span class="number">78</span>] DEBUG org.springframework.web.client.RestTemplate - Reading to [java.lang.String] as <span class="string">"text/plain;charset=UTF-8"</span></span><br><span class="line"><span class="number">19</span>:<span class="number">25</span>:<span class="number">19.908</span> [pool-<span class="number">1</span>-thread-<span class="number">78</span>] INFO com.example.study.LoadTest - idx: <span class="number">78</span>, Elapsed: <span class="number">4.34</span> -&gt; res: hello78/service1/service2</span><br><span class="line"><span class="number">19</span>:<span class="number">25</span>:<span class="number">19.908</span> [pool-<span class="number">1</span>-thread-<span class="number">5</span>] DEBUG org.springframework.web.client.RestTemplate - Response <span class="number">200</span> OK</span><br><span class="line"><span class="number">19</span>:<span class="number">25</span>:<span class="number">19.908</span> [pool-<span class="number">1</span>-thread-<span class="number">5</span>] DEBUG org.springframework.web.client.RestTemplate - Reading to [java.lang.String] as <span class="string">"text/plain;charset=UTF-8"</span></span><br><span class="line"><span class="number">19</span>:<span class="number">25</span>:<span class="number">19.909</span> [pool-<span class="number">1</span>-thread-<span class="number">5</span>] INFO com.example.study.LoadTest - idx: <span class="number">5</span>, Elapsed: <span class="number">4.342</span> -&gt; res: hello5/service1/service2</span><br><span class="line"><span class="number">19</span>:<span class="number">25</span>:<span class="number">19.909</span> [main] INFO com.example.study.LoadTest - Total: <span class="number">4.338</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;해당 포스팅은 토비님의 &lt;strong&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=ExUfZkh7Puk&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;토비의 봄 TV 9회 스프링 리액티브 프로그래밍 (5) 
      
    
    </summary>
    
      <category term="Programming" scheme="https://jongmin92.github.io/categories/Programming/"/>
    
      <category term="Java" scheme="https://jongmin92.github.io/categories/Programming/Java/"/>
    
    
      <category term="Java" scheme="https://jongmin92.github.io/tags/Java/"/>
    
      <category term="Async" scheme="https://jongmin92.github.io/tags/Async/"/>
    
      <category term="RestTemplate" scheme="https://jongmin92.github.io/tags/RestTemplate/"/>
    
      <category term="AsyncRestTemplate" scheme="https://jongmin92.github.io/tags/AsyncRestTemplate/"/>
    
      <category term="Netty" scheme="https://jongmin92.github.io/tags/Netty/"/>
    
      <category term="DeferredResult" scheme="https://jongmin92.github.io/tags/DeferredResult/"/>
    
  </entry>
  
  <entry>
    <title>자바와 스프링의 비동기 기술</title>
    <link href="https://jongmin92.github.io/2019/03/31/Java/java-async-1/"/>
    <id>https://jongmin92.github.io/2019/03/31/Java/java-async-1/</id>
    <published>2019-03-31T11:22:00.000Z</published>
    <updated>2019-04-30T10:11:37.288Z</updated>
    
    <content type="html"><![CDATA[<p>해당 포스팅은 토비님의 <strong><a href="https://www.youtube.com/watch?v=aSTuQiPB4Ns&amp;index=7&amp;list=PLv-xDnFD-nnmof-yoZQN8Fs2kVljIuFyC" target="_blank" rel="noopener">토비의 봄 TV 8회 스프링 리액티브 프로그래밍 (4) 자바와 스프링의 비동기 기술</a></strong> 라이브 코딩을 보며 따라했던 실습 내용을 바탕으로 정리한 글입니다.</p><p>실습 코드들은 IntelliJ를 이용해 <strong>SpringBoot 2.1.3.RELEASE 버전</strong> 기반으로 프로젝트를 생성 후(web, lombok 포함) 진행했습니다.</p><h1 id="자바의-비동기-기술"><a href="#자바의-비동기-기술" class="headerlink" title="자바의 비동기 기술"></a>자바의 비동기 기술</h1><h2 id="executorservice"><a href="#ExecutorService" class="headerlink" title="ExecutorService"></a>ExecutorService</h2><p><strong><a href="https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/ExecutorService.html" target="_blank" rel="noopener">ExecutorService</a></strong>는 쉽게 비동기로 작업을 실행할 수 있도록 도와주는 JDK(1.5부터)에서 제공하는 interface입니다. 일반적으로 ExecutorService는 작업 할당을 위한 스레드 풀과 API를 제공합니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FutureEx</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ExecutorService es = Executors.newCachedThreadPool();</span><br><span class="line"></span><br><span class="line">        es.execute(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;&#125;</span><br><span class="line">            log.info(<span class="string">"Async"</span>);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">"Exit"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 결과</span></span><br><span class="line"><span class="number">20</span>:<span class="number">35</span>:<span class="number">53.892</span> [main] INFO com.example.study.FutureEx - Exit</span><br><span class="line"><span class="number">20</span>:<span class="number">35</span>:<span class="number">55.888</span> [pool-<span class="number">1</span>-thread-<span class="number">1</span>] INFO com.example.study.FutureEx - Async</span><br></pre></td></tr></table></figure><h2 id="future"><a href="#Future" class="headerlink" title="Future"></a>Future</h2><p><strong><a href="https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/Future.html" target="_blank" rel="noopener">Future</a>는 자바 1.5에서 등장한 비동기 계산의 결과를 나타내는 Interface 입니다.</strong> </p><p><strong>비동기적인 작업을 수행한다는 것은 현재 진행하고 있는 스레드가 아닌 별도의 스레드에서 작업을 수행하는 것을 말합니다.</strong> 같은 스레드에서 메서드를 호출할 때는 결과를 리턴 값을 받지만, 비동기적으로 작업을 수행할 때는 결과값을 전달받을 수 있는 무언가의 interface가 필요한데 Future가 그 역할을 합니다.</p><p><strong>비동기 작업에서 결과를 반환하고 싶을 때는 runnable대신 callable interface를 이용하면 결과 값을 return 할 수 있습니다.</strong> 또한 예외가 발생했을 때 해당 예외를 비동기 코드를 처리하는 스레드 안에서 처리하지 않고 밖으로 던질 수 있습니다. </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FutureEx</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException </span>&#123;</span><br><span class="line">        ExecutorService es = Executors.newCachedThreadPool();</span><br><span class="line"></span><br><span class="line">        Future&lt;String&gt; f = es.submit(() -&gt; &#123;</span><br><span class="line">            Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">            log.info(<span class="string">"Async"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"Hello"</span>;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        log.info(f.get());</span><br><span class="line">        log.info(<span class="string">"Exit"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 결과</span></span><br><span class="line"><span class="number">20</span>:<span class="number">43</span>:<span class="number">11.704</span> [pool-<span class="number">1</span>-thread-<span class="number">1</span>] INFO com.example.study.FutureEx - Async</span><br><span class="line"><span class="number">20</span>:<span class="number">43</span>:<span class="number">11.706</span> [main] INFO com.example.study.FutureEx - Hello</span><br><span class="line"><span class="number">20</span>:<span class="number">43</span>:<span class="number">11.706</span> [main] INFO com.example.study.FutureEx - Exit</span><br></pre></td></tr></table></figure><p><strong>Future를 통해서 비동기 결과의 값을 가져올 때는 get 메서드를 사용합니다.</strong> 그러나 get 메서드를 호출하게 되면 비동기 작업이 완료될 때까지 해당 스레드가 blocking됩니다.</p><p>Future는 비동기적인 연산 혹은 작업을 수행하고 그 결과를 갖고 있으며, 완료를 기다리고 계산 결과를 반환(get)하는 메소드와 그 외에도 해당 연산이 완료되었는지 확인하는(isDone) 메소드를 제공합니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FutureEx</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException </span>&#123;</span><br><span class="line">        ExecutorService es = Executors.newCachedThreadPool();</span><br><span class="line"></span><br><span class="line">        Future&lt;String&gt; f = es.submit(() -&gt; &#123;</span><br><span class="line">            Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">            log.info(<span class="string">"Async"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"Hello"</span>;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        log.info(String.valueOf(f.isDone()));</span><br><span class="line">        Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">        log.info(<span class="string">"Exit"</span>);</span><br><span class="line">        log.info(String.valueOf(f.isDone()));</span><br><span class="line">        log.info(f.get());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 결과</span></span><br><span class="line"><span class="number">00</span>:<span class="number">26</span>:<span class="number">00.501</span> [main] INFO com.example.study.FutureEx - <span class="keyword">false</span></span><br><span class="line"><span class="number">00</span>:<span class="number">26</span>:<span class="number">02.502</span> [pool-<span class="number">1</span>-thread-<span class="number">1</span>] INFO com.example.study.FutureEx - Async</span><br><span class="line"><span class="number">00</span>:<span class="number">26</span>:<span class="number">02.509</span> [main] INFO com.example.study.FutureEx - Exit</span><br><span class="line"><span class="number">00</span>:<span class="number">26</span>:<span class="number">02.509</span> [main] INFO com.example.study.FutureEx - <span class="keyword">true</span></span><br><span class="line"><span class="number">00</span>:<span class="number">26</span>:<span class="number">02.509</span> [main] INFO com.example.study.FutureEx - Hello</span><br></pre></td></tr></table></figure><h2 id="futuretask"><a href="#FutureTask" class="headerlink" title="FutureTask"></a>FutureTask</h2><p><strong><a href="https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/FutureTask.html" target="_blank" rel="noopener">FutureTask</a></strong>는 비동기 작업을 생성합니다. 지금까지 위의 코드는 비동기 작업 생성과 실행을 동시에 했다면 FutureTask는 비동기 작업 생성과 실행을 분리하여 진행할 수 있습니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FutureEx</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException </span>&#123;</span><br><span class="line">        ExecutorService es = Executors.newCachedThreadPool();</span><br><span class="line"></span><br><span class="line">        FutureTask&lt;String&gt; f = <span class="keyword">new</span> FutureTask&lt;&gt;(() -&gt; &#123;</span><br><span class="line">            Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">            log.info(<span class="string">"Async"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"Hello"</span>;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        es.execute(f);</span><br><span class="line"></span><br><span class="line">        log.info(String.valueOf(f.isDone()));</span><br><span class="line">        Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">        log.info(<span class="string">"Exit"</span>);</span><br><span class="line">        log.info(String.valueOf(f.isDone()));</span><br><span class="line">        log.info(f.get());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 결과</span></span><br><span class="line"><span class="number">00</span>:<span class="number">28</span>:<span class="number">39.459</span> [main] INFO com.example.study.FutureEx - <span class="keyword">false</span></span><br><span class="line"><span class="number">00</span>:<span class="number">28</span>:<span class="number">41.461</span> [pool-<span class="number">1</span>-thread-<span class="number">1</span>] INFO com.example.study.FutureEx - Async</span><br><span class="line"><span class="number">00</span>:<span class="number">28</span>:<span class="number">41.467</span> [main] INFO com.example.study.FutureEx - Exit</span><br><span class="line"><span class="number">00</span>:<span class="number">28</span>:<span class="number">41.467</span> [main] INFO com.example.study.FutureEx - <span class="keyword">true</span></span><br><span class="line"><span class="number">00</span>:<span class="number">28</span>:<span class="number">41.467</span> [main] INFO com.example.study.FutureEx - Hello</span><br></pre></td></tr></table></figure><p><strong>비동기 작업의 결과를 가져오는 방법은 Future와 같은 결과를 다루는 <code>handler</code>를 이용하거나 <code>callback</code>을 이용하는 2가지 방법이 있습니다.</strong><br>아래의 예시 코드는 FutureTask의 비동기 작업이 완료될 경우 호출되는 done() 메서드를 재정의하여 callback을 이용하는 방법입니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FutureEx</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ExecutorService es = Executors.newCachedThreadPool();</span><br><span class="line"></span><br><span class="line">        FutureTask&lt;String&gt; f = <span class="keyword">new</span> FutureTask&lt;String&gt;(() -&gt; &#123;</span><br><span class="line">            Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">            log.info(<span class="string">"Async"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"Hello"</span>;</span><br><span class="line">        &#125;) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">done</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">super</span>.done();</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    log.info(get());</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (ExecutionException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        es.execute(f);</span><br><span class="line">        es.shutdown();</span><br><span class="line">        </span><br><span class="line">        log.info(<span class="string">"EXIT"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 결과</span></span><br><span class="line"><span class="number">01</span>:<span class="number">03</span>:<span class="number">04.153</span> [main] INFO com.example.study.FutureEx - EXIT</span><br><span class="line"><span class="number">01</span>:<span class="number">03</span>:<span class="number">06.153</span> [pool-<span class="number">1</span>-thread-<span class="number">1</span>] INFO com.example.study.FutureEx - Async</span><br><span class="line"><span class="number">01</span>:<span class="number">03</span>:<span class="number">06.153</span> [pool-<span class="number">1</span>-thread-<span class="number">1</span>] INFO com.example.study.FutureEx - Hello</span><br></pre></td></tr></table></figure><p>위 예시 코드의 callback 관련 부분을 FutureTask를 상속받아 done() 메서드를 재정의함으로써, 비동기 코드와 그 결과를 갖고 작업을 수행하는 callback을 좀 더 가독성이 좋게 작성할 수 있습니다. </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FutureEx</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">SuccessCallback</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">(String result)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">CallbackFutureTask</span> <span class="keyword">extends</span> <span class="title">FutureTask</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line">        SuccessCallback sc;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">CallbackFutureTask</span><span class="params">(Callable&lt;String&gt; callable, SuccessCallback sc)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>(callable);</span><br><span class="line">            <span class="keyword">this</span>.sc = Objects.requireNonNull(sc);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">done</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>.done();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.sc.onSuccess(get());</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ExecutionException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ExecutorService es = Executors.newCachedThreadPool();</span><br><span class="line"></span><br><span class="line">        CallbackFutureTask f = <span class="keyword">new</span> CallbackFutureTask(() -&gt; &#123;</span><br><span class="line">            Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">            log.info(<span class="string">"Async"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"Hello"</span>;</span><br><span class="line">        &#125;, log::info);</span><br><span class="line"></span><br><span class="line">        es.execute(f);</span><br><span class="line">        es.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 결과</span></span><br><span class="line"><span class="number">01</span>:<span class="number">05</span>:<span class="number">01.978</span> [main] INFO com.example.study.FutureEx - EXIT</span><br><span class="line"><span class="number">01</span>:<span class="number">05</span>:<span class="number">03.977</span> [pool-<span class="number">1</span>-thread-<span class="number">1</span>] INFO com.example.study.FutureEx - Async</span><br><span class="line"><span class="number">01</span>:<span class="number">05</span>:<span class="number">03.978</span> [pool-<span class="number">1</span>-thread-<span class="number">1</span>] INFO com.example.study.FutureEx - Hello</span><br></pre></td></tr></table></figure><p>위 예시 코드에 SuccessCallback을 추가한 것처럼 ExceptionCallback을 추가하여 비동기 코드에서 예외가 발생할 경우, 해당 예외를 처리하는 callback도 추가할 수 있습니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FutureEx</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">SuccessCallback</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">(String result)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">ExceptionCallback</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable t)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">CallbackFutureTask</span> <span class="keyword">extends</span> <span class="title">FutureTask</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line">        SuccessCallback sc;</span><br><span class="line">        ExceptionCallback ec;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">CallbackFutureTask</span><span class="params">(Callable&lt;String&gt; callable, SuccessCallback sc, ExceptionCallback ec)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>(callable);</span><br><span class="line">            <span class="keyword">this</span>.sc = Objects.requireNonNull(sc);</span><br><span class="line">            <span class="keyword">this</span>.ec = Objects.requireNonNull(ec);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">done</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>.done();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.sc.onSuccess(get());</span><br><span class="line">                <span class="comment">/*</span></span><br><span class="line"><span class="comment">                 InterruptedException은 예외긴 예외이지만, 현재 작업을 수행하지 말고 중단해라 라고 메시지를 보내는 용도이다.</span></span><br><span class="line"><span class="comment">                 따라서 현재 스레드에 interrupt를 체크하고 종료한다.</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                Thread.currentThread().interrupt();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ExecutionException e) &#123;</span><br><span class="line">                <span class="comment">// 래핑된 에러를 빼내어 전달한다.</span></span><br><span class="line">                ec.onError(e.getCause());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ExecutorService es = Executors.newCachedThreadPool();</span><br><span class="line"></span><br><span class="line">        CallbackFutureTask f = <span class="keyword">new</span> CallbackFutureTask(() -&gt; &#123;</span><br><span class="line">            Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">            <span class="keyword">if</span> (<span class="number">1</span> == <span class="number">1</span>) <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Async ERROR!!!"</span>);</span><br><span class="line">            log.info(<span class="string">"Async"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"Hello"</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">                s -&gt; log.info(<span class="string">"Result: &#123;&#125;"</span>, s),</span><br><span class="line">                e -&gt; log.info(<span class="string">"Error: &#123;&#125;"</span>, e.getMessage()));</span><br><span class="line"></span><br><span class="line">        es.execute(f);</span><br><span class="line">        es.shutdown();</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">"EXIT"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 결과</span></span><br><span class="line"><span class="number">01</span>:<span class="number">11</span>:<span class="number">53.460</span> [main] INFO com.example.study.FutureEx - EXIT</span><br><span class="line"><span class="number">01</span>:<span class="number">11</span>:<span class="number">55.463</span> [pool-<span class="number">1</span>-thread-<span class="number">1</span>] INFO com.example.study.FutureEx - Error: Async ERROR!!!</span><br></pre></td></tr></table></figure><h1 id="스프링의-비동기-기술"><a href="#스프링의-비동기-기술" class="headerlink" title="스프링의 비동기 기술"></a>스프링의 비동기 기술</h1><h2 id="async"><a href="#Async" class="headerlink" title="@Async"></a>@Async</h2><p>Spring MVC 3.2 부터 Servlet 3.0 기반의 비동기 요청 처리가 가능해졌습니다. <strong><a href="https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/scheduling/annotation/Async.html" target="_blank" rel="noopener">@Async</a> 어노테이션을 추가해 해당 메서드를 비동기적으로 호출할 수 있습니다.</strong> 해당 메서드를 호출한 호출자(caller)는 즉시 리턴하고 메소드의 실제 실행은 Spring TaskExecutor에 의해서 실행됩니다. 비동기로 실행되는 메서드는 Future 형식의 값을 리턴하고, 호출자는 해당 Future의 get() 메서드를 호출하기 전에 다른 작업을 수행할 수 있습니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableAsync</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudyApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Service</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyService</span> </span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         내부적으로 AOP를 이용해 복잡한 로직이 실행된다.</span></span><br><span class="line"><span class="comment">         비동기 작업은 return값으로 바로 결과를 줄 수 없다. (Future 혹은 Callback을 이용해야 한다.)</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="meta">@Async</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Future&lt;String&gt; <span class="title">hello</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">            log.info(<span class="string">"hello()"</span>);</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> AsyncResult&lt;&gt;(<span class="string">"Hello"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// try with resource 블록을 이용해 빈이 다 준비된 후 종료되도록 설정</span></span><br><span class="line">        <span class="keyword">try</span> (ConfigurableApplicationContext c = SpringApplication.run(StudyApplication.class, args)) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    MyService myService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 모든 빈이 다 준비된 후 실행됨 (현재는 일종의 컨트롤러라고 생각)</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">ApplicationRunner <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> args -&gt; &#123;</span><br><span class="line">            log.info(<span class="string">"run()"</span>);</span><br><span class="line">            Future&lt;String&gt; res = myService.hello();</span><br><span class="line">            log.info(<span class="string">"exit: &#123;&#125;"</span>, res.isDone());</span><br><span class="line">            log.info(<span class="string">"result: &#123;&#125;"</span>, res.get());</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 결과</span></span><br><span class="line"><span class="number">2019</span>-<span class="number">04</span>-<span class="number">04</span> <span class="number">23</span>:<span class="number">29</span>:<span class="number">31.960</span>  INFO <span class="number">41618</span> --- [           main] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext</span><br><span class="line"><span class="number">2019</span>-<span class="number">04</span>-<span class="number">04</span> <span class="number">23</span>:<span class="number">29</span>:<span class="number">31.960</span>  INFO <span class="number">41618</span> --- [           main] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in <span class="number">928</span> ms</span><br><span class="line"><span class="number">2019</span>-<span class="number">04</span>-<span class="number">04</span> <span class="number">23</span>:<span class="number">29</span>:<span class="number">32.161</span>  INFO <span class="number">41618</span> --- [           main] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService <span class="string">'applicationTaskExecutor'</span></span><br><span class="line"><span class="number">2019</span>-<span class="number">04</span>-<span class="number">04</span> <span class="number">23</span>:<span class="number">29</span>:<span class="number">32.337</span>  INFO <span class="number">41618</span> --- [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : <span class="function">Tomcat started on <span class="title">port</span><span class="params">(s)</span>: 8080 <span class="params">(http)</span> with context path ''</span></span><br><span class="line"><span class="function">2019-04-04 23:29:32.341  INFO 41618 --- [           main] com.example.study.StudyApplication       : Started StudyApplication in 1.631 <span class="title">seconds</span> <span class="params">(JVM running <span class="keyword">for</span> <span class="number">2.101</span>)</span></span></span><br><span class="line"><span class="function">2019-04-04 23:29:32.343  INFO 41618 --- [           main] com.example.study.StudyApplication       : <span class="title">run</span><span class="params">()</span></span></span><br><span class="line"><span class="function">2019-04-04 23:29:32.346  INFO 41618 --- [           main] com.example.study.StudyApplication       : exit: <span class="keyword">false</span></span></span><br><span class="line"><span class="function">2019-04-04 23:29:32.350  INFO 41618 --- [         task-1] com.example.study.StudyApplication       : <span class="title">hello</span><span class="params">()</span></span></span><br><span class="line"><span class="function">2019-04-04 23:29:33.351  INFO 41618 --- [           main] com.example.study.StudyApplication       : result: Hello</span></span><br><span class="line"><span class="function">2019-04-04 23:29:33.354  INFO 41618 --- [           main] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'</span></span><br></pre></td></tr></table></figure><h2 id="listenablefuture"><a href="#ListenableFuture" class="headerlink" title="ListenableFuture"></a>ListenableFuture</h2><p>스프링 4.0 부터 제공하는 Future 인터페이스를 확장한 <strong><a href="https://docs.spring.io/autorepo/docs/spring-framework/4.0.5.RELEASE/javadoc-api/org/springframework/util/concurrent/ListenableFuture.html" target="_blank" rel="noopener">ListenableFuture</a>를 이용하면 비동기 처리의 결과 값을 사용할 수 있는 callback을 추가할 수 있습니다.</strong><br>@Async 어노테이션을 사용하는 메서드에서 스프링 4.1 부터 제공하는 ListenableFuture 인터페이스를 구현한 <a href="https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/scheduling/annotation/AsyncResult.html" target="_blank" rel="noopener">AsyncResult</a>를 반환하면 됩니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableAsync</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudyApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Service</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyService</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Async</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> ListenableFuture&lt;String&gt; <span class="title">hello</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">            log.info(<span class="string">"hello()"</span>);</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> AsyncResult&lt;&gt;(<span class="string">"Hello"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// try with resource 블록을 이용해 빈이 다 준비된 후 종료되도록 설정</span></span><br><span class="line">        <span class="keyword">try</span> (ConfigurableApplicationContext c = SpringApplication.run(StudyApplication.class, args)) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    MyService myService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">ApplicationRunner <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> args -&gt; &#123;</span><br><span class="line">            log.info(<span class="string">"run()"</span>);</span><br><span class="line">            ListenableFuture&lt;String&gt; f = myService.hello();</span><br><span class="line">            f.addCallback(s -&gt; log.info(s), e-&gt; log.info(e.getMessage()));</span><br><span class="line">            log.info(<span class="string">"exit"</span>);</span><br><span class="line"></span><br><span class="line">            Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 결과</span></span><br><span class="line"><span class="number">2019</span>-<span class="number">04</span>-<span class="number">04</span> <span class="number">23</span>:<span class="number">42</span>:<span class="number">46.348</span>  INFO <span class="number">44559</span> --- [           main] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext</span><br><span class="line"><span class="number">2019</span>-<span class="number">04</span>-<span class="number">04</span> <span class="number">23</span>:<span class="number">42</span>:<span class="number">46.348</span>  INFO <span class="number">44559</span> --- [           main] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in <span class="number">959</span> ms</span><br><span class="line"><span class="number">2019</span>-<span class="number">04</span>-<span class="number">04</span> <span class="number">23</span>:<span class="number">42</span>:<span class="number">46.557</span>  INFO <span class="number">44559</span> --- [           main] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService <span class="string">'applicationTaskExecutor'</span></span><br><span class="line"><span class="number">2019</span>-<span class="number">04</span>-<span class="number">04</span> <span class="number">23</span>:<span class="number">42</span>:<span class="number">46.736</span>  INFO <span class="number">44559</span> --- [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : <span class="function">Tomcat started on <span class="title">port</span><span class="params">(s)</span>: 8080 <span class="params">(http)</span> with context path ''</span></span><br><span class="line"><span class="function">2019-04-04 23:42:46.740  INFO 44559 --- [           main] com.example.study.StudyApplication       : Started StudyApplication in 1.779 <span class="title">seconds</span> <span class="params">(JVM running <span class="keyword">for</span> <span class="number">2.306</span>)</span></span></span><br><span class="line"><span class="function">2019-04-04 23:42:46.742  INFO 44559 --- [           main] com.example.study.StudyApplication       : <span class="title">run</span><span class="params">()</span></span></span><br><span class="line"><span class="function">2019-04-04 23:42:46.748  INFO 44559 --- [           main] com.example.study.StudyApplication       : exit</span></span><br><span class="line"><span class="function">2019-04-04 23:42:46.751  INFO 44559 --- [         task-1] com.example.study.StudyApplication       : <span class="title">hello</span><span class="params">()</span></span></span><br><span class="line"><span class="function">2019-04-04 23:42:47.752  INFO 44559 --- [         task-1] com.example.study.StudyApplication       : Hello</span></span><br><span class="line"><span class="function">2019-04-04 23:42:48.757  INFO 44559 --- [           main] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'</span></span><br></pre></td></tr></table></figure><h2 id="threadpooltaskexecutor"><a href="#ThreadPoolTaskExecutor" class="headerlink" title="ThreadPoolTaskExecutor"></a>ThreadPoolTaskExecutor</h2><p><strong>@Async 어노테이션을 사용해 해당 메서드를 비동기적으로 호출할 경우 ThreadPool을 명시적으로 선언하지 않으면, 기본적으로 <a href="https://docs.spring.io/spring/docs/3.1.x/javadoc-api/org/springframework/core/task/SimpleAsyncTaskExecutor.html" target="_blank" rel="noopener">SimpleAsyncTaskExecutor</a>를 사용합니다.</strong> SimpleAsyncTaskExecutor는 각 비동기 호출마다 계속 새로운 스레드를 만들어 사용하기 때문에 비효율적입니다. 이 경우 ThreadPoolTaskExecutor를 직접 만들어 사용하는게 효율적입니다.</p><p><strong><a href="https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/scheduling/concurrent/ThreadPoolTaskExecutor.html" target="_blank" rel="noopener">ThreadPoolTaskExecutor</a>는 CorePool, QueueCapacity, MaxPoolSize를 직접 설정할 수 있습니다.</strong> 각 값에 대한 설명은 코드에 추가했습니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableAsync</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudyApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Service</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyService</span> </span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         기본적으로 SimpleAsyncTaskExecutor를 사용한다. 스레드를 계속 새로 만들어 사용하기 때문에 비효율적이다.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="meta">@Async</span></span><br><span class="line">        <span class="comment">// @Async("tp") ThreadPool이 여러개일 경우 직접 지정 가능하다.</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> ListenableFuture&lt;String&gt; <span class="title">hello</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">            log.info(<span class="string">"hello()"</span>);</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> AsyncResult&lt;&gt;(<span class="string">"Hello"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">ThreadPoolTaskExecutor <span class="title">tp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ThreadPoolTaskExecutor te = <span class="keyword">new</span> ThreadPoolTaskExecutor();</span><br><span class="line">        <span class="comment">// 1) 스레드 풀을 해당 개수까지 기본적으로 생성함. 처음 요청이 들어올 때 poll size만큼 생성한다.</span></span><br><span class="line">        te.setCorePoolSize(<span class="number">10</span>);</span><br><span class="line">        <span class="comment">// 2) 지금 당장은 Core 스레드를 모두 사용중일때, 큐에 만들어 대기시킨다.</span></span><br><span class="line">        te.setQueueCapacity(<span class="number">50</span>);</span><br><span class="line">        <span class="comment">// 3) 대기하는 작업이 큐에 꽉 찰 경우, 풀을 해당 개수까지 더 생성한다.</span></span><br><span class="line">        te.setMaxPoolSize(<span class="number">100</span>);</span><br><span class="line">        te.setThreadNamePrefix(<span class="string">"myThread"</span>);</span><br><span class="line">        <span class="keyword">return</span> te;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// try with resource 블록을 이용해 빈이 다 준비된 후 종료되도록 설정</span></span><br><span class="line">        <span class="keyword">try</span> (ConfigurableApplicationContext c = SpringApplication.run(StudyApplication.class, args)) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    MyService myService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 모든 빈이 다 준비된 후 실행됨 (현재는 일종의 컨트롤러라고 생각)</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">ApplicationRunner <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> args -&gt; &#123;</span><br><span class="line">            log.info(<span class="string">"run()"</span>);</span><br><span class="line">            ListenableFuture&lt;String&gt; f = myService.hello();</span><br><span class="line">            f.addCallback(s -&gt; log.info(s), e-&gt; log.info(e.getMessage()));</span><br><span class="line">            log.info(<span class="string">"exit"</span>);</span><br><span class="line"></span><br><span class="line">            Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 결과</span></span><br><span class="line"><span class="number">2019</span>-<span class="number">04</span>-<span class="number">05</span> <span class="number">00</span>:<span class="number">03</span>:<span class="number">11.304</span>  INFO <span class="number">47863</span> --- [           main] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext</span><br><span class="line"><span class="number">2019</span>-<span class="number">04</span>-<span class="number">05</span> <span class="number">00</span>:<span class="number">03</span>:<span class="number">11.304</span>  INFO <span class="number">47863</span> --- [           main] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in <span class="number">1061</span> ms</span><br><span class="line"><span class="number">2019</span>-<span class="number">04</span>-<span class="number">05</span> <span class="number">00</span>:<span class="number">03</span>:<span class="number">11.367</span>  INFO <span class="number">47863</span> --- [           main] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService <span class="string">'tp'</span></span><br><span class="line"><span class="number">2019</span>-<span class="number">04</span>-<span class="number">05</span> <span class="number">00</span>:<span class="number">03</span>:<span class="number">11.677</span>  INFO <span class="number">47863</span> --- [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : <span class="function">Tomcat started on <span class="title">port</span><span class="params">(s)</span>: 8080 <span class="params">(http)</span> with context path ''</span></span><br><span class="line"><span class="function">2019-04-05 00:03:11.680  INFO 47863 --- [           main] com.example.study.StudyApplication       : Started StudyApplication in 1.751 <span class="title">seconds</span> <span class="params">(JVM running <span class="keyword">for</span> <span class="number">2.208</span>)</span></span></span><br><span class="line"><span class="function">2019-04-05 00:03:11.681  INFO 47863 --- [           main] com.example.study.StudyApplication       : <span class="title">run</span><span class="params">()</span></span></span><br><span class="line"><span class="function">2019-04-05 00:03:11.686  INFO 47863 --- [           main] com.example.study.StudyApplication       : exit</span></span><br><span class="line"><span class="function">2019-04-05 00:03:11.687  INFO 47863 --- [      myThread1] com.example.study.StudyApplication       : <span class="title">hello</span><span class="params">()</span></span></span><br><span class="line"><span class="function">2019-04-05 00:03:12.691  INFO 47863 --- [      myThread1] com.example.study.StudyApplication       : Hello</span></span><br></pre></td></tr></table></figure><h2 id="servlet-async"><a href="#Servlet-Async" class="headerlink" title="Servlet Async"></a>Servlet Async</h2><p>@Async 어노테이션을 설명할 때 말했던 것처럼, Spring MVC 3.2 부터 Servlet 3.0 기반의 비동기 요청 처리가 가능해졌습니다. <strong>기존 Controller 메서드를 <a href="https://docs.oracle.com/javase/6/docs/api/java/util/concurrent/Callable.html" target="_blank" rel="noopener">Callable</a>로 변경함으로써 비동기로 만들 수 있습니다.</strong><br>Controller 메서드를 비동기로 변경해도 해당 처리가 서블릿 스레드가 아닌 다른 스레드에서 발생한다는 점을 제외하면 기존 Controller 메서드의 동작 방식과는 큰 차이가 없습니다.<br>(참고 : <a href="https://spring.io/blog/2012/05/10/spring-mvc-3-2-preview-making-a-controller-method-asynchronous" target="_blank" rel="noopener">Spring MVC 3.2 Preview: Making a Controller Method Asynchronous</a>)</p><blockquote><p>Servlet 3.0 &amp; 3.1</p><ul><li>Servlet 3.0: 비동기 서블릿<ul><li>HTTP connection은 이미 논블록킹 IO</li><li>서블릿 요청 읽기, 응답 쓰기는 블록킹</li><li>비동기 작업 시작 즉시 서블릿 스레드 반납</li><li>비동기 작업이 완료되면 서블릿 스레드 재할당</li><li>비동기 서블릿 컨텍스트 이용 (AsyncContext)</li></ul></li><li>Servlet 3.1: 논블록킹 IO<ul><li>논블록킹 서블릿 요청, 응답 처리</li><li>Callback</li></ul></li></ul><p>스레드가 블록되는 상황은 CPU와 메모리 자원을 많이 소모합니다. 컨텍스트 스위칭이 일어나기 때문입니다. 기본적으로 스레드가 블로킹되면 wating 상태로 변경되면서 컨텍스트 스위칭이 일어나고 추후 I/O 작업이 끝나 running 상태로 변경되면서 다시 컨텍스트 스위칭이 일어나 총 2번의 컨텍스트 스위칭이 일어납니다.<br>Java InputStream과 OutputStream은 블록킹 방식이다. RequestHttpServletRequest, RequestHttpServletResponse는 InputSream과 OutputStream을 사용하기 때문에 서블릿은 기본적으로 블로킹 IO 방식이다.</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableAsync</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudyApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RestController</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyController</span> </span>&#123;</span><br><span class="line">        <span class="meta">@GetMapping</span>(<span class="string">"/callable"</span>)</span><br><span class="line">        <span class="function"><span class="keyword">public</span> Callable&lt;String&gt; <span class="title">callable</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            log.info(<span class="string">"callable"</span>);</span><br><span class="line">            <span class="keyword">return</span> () -&gt; &#123;</span><br><span class="line">                log.info(<span class="string">"async"</span>);</span><br><span class="line">                Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="string">"hello"</span>;</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(StudyApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 결과</span></span><br><span class="line"><span class="number">2019</span>-<span class="number">04</span>-<span class="number">06</span> <span class="number">01</span>:<span class="number">12</span>:<span class="number">41.761</span>  INFO <span class="number">69216</span> --- [           main] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext</span><br><span class="line"><span class="number">2019</span>-<span class="number">04</span>-<span class="number">06</span> <span class="number">01</span>:<span class="number">12</span>:<span class="number">41.762</span>  INFO <span class="number">69216</span> --- [           main] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in <span class="number">1206</span> ms</span><br><span class="line"><span class="number">2019</span>-<span class="number">04</span>-<span class="number">06</span> <span class="number">01</span>:<span class="number">12</span>:<span class="number">41.993</span>  INFO <span class="number">69216</span> --- [           main] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService <span class="string">'applicationTaskExecutor'</span></span><br><span class="line"><span class="number">2019</span>-<span class="number">04</span>-<span class="number">06</span> <span class="number">01</span>:<span class="number">12</span>:<span class="number">42.182</span>  INFO <span class="number">69216</span> --- [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : <span class="function">Tomcat started on <span class="title">port</span><span class="params">(s)</span>: 8080 <span class="params">(http)</span> with context path ''</span></span><br><span class="line"><span class="function">2019-04-06 01:12:42.186  INFO 69216 --- [           main] com.example.study.StudyApplication       : Started StudyApplication in 2.073 <span class="title">seconds</span> <span class="params">(JVM running <span class="keyword">for</span> <span class="number">2.807</span>)</span></span></span><br><span class="line"><span class="function">2019-04-06 01:12:44.161  INFO 69216 --- [nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'</span></span><br><span class="line"><span class="function">2019-04-06 01:12:44.162  INFO 69216 --- [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'</span></span><br><span class="line"><span class="function">2019-04-06 01:12:44.169  INFO 69216 --- [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 7 ms</span></span><br><span class="line"><span class="function">2019-04-06 01:12:44.190  INFO 69216 --- [nio-8080-exec-1] com.example.study.StudyApplication       : callable</span></span><br><span class="line"><span class="function">2019-04-06 01:12:44.198  INFO 69216 --- [         task-1] com.example.study.StudyApplication       : async</span></span><br></pre></td></tr></table></figure><p>실제로 비동기 서블릿은 아래의 그림처럼 동작합니다.<br><img src="/images/post/2019-03-31/async_servlet_structure.png" alt="비동기 서블릿 구조"></p><h3 id="client-for-load-test"><a href="#Client-For-Load-Test" class="headerlink" title="Client (For Load Test)"></a>Client (For Load Test)</h3><p>지금부터는 Spring에서 Sync Servlet을 이용할 때와 Async Servlet을 이용했을 때의 차이점을 알아보기 위해 테스트를 할 수 있도록, 먼저 여러 Request를 동시에 생성하는 Client를 작성해봅니다.<br>Spring에서 제공하는 <a href="https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/client/RestTemplate.html" target="_blank" rel="noopener">RestTemplate</a>을 이용해 100개의 Request를 동시에 호출합니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoadTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> AtomicInteger counter = <span class="keyword">new</span> AtomicInteger(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        ExecutorService es = Executors.newFixedThreadPool(<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">        RestTemplate rt = <span class="keyword">new</span> RestTemplate();</span><br><span class="line">        String url = <span class="string">"http://localhost:8080/callable"</span>;</span><br><span class="line"></span><br><span class="line">        StopWatch main = <span class="keyword">new</span> StopWatch();</span><br><span class="line">        main.start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            es.execute(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">int</span> idx = counter.addAndGet(<span class="number">1</span>);</span><br><span class="line">                log.info(<span class="string">"Thread &#123;&#125;"</span>, idx);</span><br><span class="line"></span><br><span class="line">                StopWatch sw = <span class="keyword">new</span> StopWatch();</span><br><span class="line">                sw.start();</span><br><span class="line"></span><br><span class="line">                rt.getForObject(url, String.class);</span><br><span class="line"></span><br><span class="line">                sw.stop();</span><br><span class="line">                log.info(<span class="string">"Elapsed: &#123;&#125; -&gt; &#123;&#125;"</span>, idx, sw.getTotalTimeSeconds());</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        es.shutdown();</span><br><span class="line">        <span class="comment">// 지정된 시간이 타임아웃 걸리기 전이라면 대기작업이 진행될 때까지 기다린다.</span></span><br><span class="line">        <span class="comment">// (100초안에 작업이 끝날때까지 기다리거나, 100초가 초과되면 종료)</span></span><br><span class="line">        es.awaitTermination(<span class="number">100</span>, TimeUnit.SECONDS);</span><br><span class="line">        main.stop();</span><br><span class="line">        log.info(<span class="string">"Total: &#123;&#125;"</span>, main.getTotalTimeSeconds());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="change-tomcat-thread-count"><a href="#Change-Tomcat-Thread-Count" class="headerlink" title="Change Tomcat Thread Count"></a>Change Tomcat Thread Count</h3><p><strong>위의 비동기 서블릿 그림에서 볼 수 있듯이, Async Servlet은 클라이언트로부터 요청을 받은 후 실제 작업은 작업 스레드 풀에 위임하고 현재의 서블릿 스레드는 서블릿 스레드 풀에 반환 후, 다음 요청이 들어올 경우 사용할 수 있도록 합니다. 이에 반해, Sync Servlet은 요청을 받은 서블릿 스레드에서 실제 작업까지 전부 진행하기 때문에 요청에 대한 응답을 반환하기 전까지는 새로운 요청을 처리할 수 없는 상태입니다.</strong></p><p>실제 이처럼 동작하는지 확인하기 위해서 <code>application.properties</code> 파일에서 다음과 같이 Tomcat의 스레드 개수를 1개로 설정합니다.<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">server.tomcat.max-threads=1</span></span><br></pre></td></tr></table></figure></p><h3 id="sync-vs-async"><a href="#Sync-vs-Async" class="headerlink" title="Sync vs Async"></a>Sync vs Async</h3><h4 id="sync"><a href="#Sync" class="headerlink" title="Sync"></a>Sync</h4><p>먼저 아래와 같이 Sync Servlet을 이용해 서버를 띄운 후 위의 Client 코드를 이용해 테스트를 진행합니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableAsync</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudyApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RestController</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyController</span> </span>&#123;</span><br><span class="line">        <span class="meta">@GetMapping</span>(<span class="string">"/callable"</span>)</span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">callable</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">            log.info(<span class="string">"sync"</span>);</span><br><span class="line">            Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"hello"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(StudyApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>해당 서버를 띄우고 Client(LoadTest) 코드를 사용해 테스트를 진행하면 결과는 다음과 같습니다. Tomcat의 스레드가 하나이며 Sync 방식으로 동작하기 때문에 한 번에 하나의 클라이언트 요청만 처리할 수 있습니다. 서버 로그를 확인하면 <strong>nio-8080-exec-1</strong> 라는 이름을 가진 한개의 스레드가 요청을 처리하고 있습니다.<br><img src="/images/post/2019-03-31/sync_servlet.png" alt="동기 서블릿 테스트 결과"></p><p>이번에는 <code>JMC(Java Mission Control)</code>를 이용해 실제 서버의 스레드 상황을 살펴보겠습니다.</p><blockquote><p>JMC를 이용하기 위해서는 서버를 실행할 때 다음과 같은 JVM 옵션을 추가합니다.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-XX:+UnlockCommercialFeatures</span><br><span class="line">-XX:+FlightRecorder</span><br><span class="line">-Dcom.sun.management.jmxremote</span><br><span class="line">-Dcom.sun.management.jmxremote.authenticate=<span class="literal">false</span></span><br><span class="line">-Dcom.sun.management.jmxremote.ssl=<span class="literal">false</span></span><br><span class="line">-Djava.rmi.server.hostname=localhost</span><br></pre></td></tr></table></figure></p></blockquote><p>JMC를 이용해 클라이언트 요청이 들어올 때, Thread 상태를 보면 다음과 같습니다. 동시에 100개의 클라이언트 요청이 들어왔지만, 스레드 수는 그대로 유지되고 있으며, 여러 스레드 목록 중에 <strong>nio-8080-exec-1</strong> 스레드가 존재하고 있는것을 확인할 수 있습니다.<br><img src="/images/post/2019-03-31/sync_servlet_thread.png" alt="동기 서블릿 테스트 결과 - 스레드"></p><h4 id="async"><a href="#Async-1" class="headerlink" title="Async"></a>Async</h4><p>이번에는 서버 코드를 아래와 같이 Async Servlet을 이용하도록 수정한 후 서버를 띄워 Client 코드를 이용해 테스트를 진행합니다. (작업 스레드 풀은 <a href="https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/servlet/config/annotation/WebMvcConfigurer.html" target="_blank" rel="noopener">WebMvcConfigurer</a>를 통해 설정해줍니다.)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableAsync</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudyApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RestController</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyController</span> </span>&#123;</span><br><span class="line">        <span class="meta">@GetMapping</span>(<span class="string">"/callable"</span>)</span><br><span class="line">        <span class="function"><span class="keyword">public</span> Callable&lt;String&gt; <span class="title">callable</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> () -&gt; &#123;</span><br><span class="line">                log.info(<span class="string">"async"</span>);</span><br><span class="line">                Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="string">"hello"</span>;</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">WebMvcConfigurer <span class="title">configurer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> WebMvcConfigurer() &#123;</span><br><span class="line">            <span class="comment">// 워커 스레드 풀 설정</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configureAsyncSupport</span><span class="params">(AsyncSupportConfigurer configurer)</span> </span>&#123;</span><br><span class="line">                ThreadPoolTaskExecutor te = <span class="keyword">new</span> ThreadPoolTaskExecutor();</span><br><span class="line">                te.setCorePoolSize(<span class="number">100</span>);</span><br><span class="line">                te.setQueueCapacity(<span class="number">50</span>);</span><br><span class="line">                te.setMaxPoolSize(<span class="number">200</span>);</span><br><span class="line">                te.setThreadNamePrefix(<span class="string">"workThread"</span>);</span><br><span class="line">                te.initialize();</span><br><span class="line">                configurer.setTaskExecutor(te);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(StudyApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Client(LoadTest) 코드를 사용해 테스트를 진행하면 결과는 다음과 같습니다. Tomcat의 스레드가 하나이지만 Async 방식으로 동작하기 때문에 해당 요청에 대한 실제 처리는 워커 스레드 풀에서 사용되고 있지 않은 스레드를 이용해 처리합니다. 서버 로그를 확인하면 <strong>nio-8080-exec-1</strong> 라는 이름을 가진 한개의 Tomcat 스레드와 <strong>workThreadX</strong>라는 이름을 가진 100개의 워커 스레드를 확인할 수 있습니다.<br><img src="/images/post/2019-03-31/async_servlet.png" alt="비동기 서블릿 테스트 결과"></p><p>이번에도 역시 <code>JMC(Java Mission Control)</code>를 이용해 실제 서버의 스레드 상황을 살펴보겠습니다.</p><p><strong>nio-8080-exec-1</strong> 라는 이름을 가진 한개의 Tomcat 스레드와 <strong>workThreadX</strong>라는 이름을 가진 100개의 워커 스레드를 확인할 수 있습니다.<br><img src="/images/post/2019-03-31/async_servlet_thread.png" alt="비동기 서블릿 테스트 결과 - 스레드"></p><h3 id="deferredresult"><a href="#DeferredResult" class="headerlink" title="DeferredResult"></a>DeferredResult</h3><p><strong><a href="https://docs.spring.io/spring/docs/5.0.4.BUILD-SNAPSHOT/javadoc-api/org/springframework/web/context/request/async/DeferredResult.html" target="_blank" rel="noopener">DeferredResult</a>는 Spring 3.2 부터 사용 가능합니다.</strong> 비동기 요청 처리를 위해 사용하는 Callable의 대안을 제공합니다. “지연된 결과”를 의미하며 외부의 이벤트 혹은 클라이언트 요청에 의해서 지연되어 있는 HTTP 요청에 대한 응답을 나중에 써줄 수 있는 기술입니다. <strong>별도로 워커 스레드를 만들어 대기하지 않고도 처리가 가능합니다.</strong></p><p><img src="/images/post/2019-03-31/deferredresult_structure.png" alt="DeferredResult 구조"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableAsync</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudyApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RestController</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyController</span> </span>&#123;</span><br><span class="line">        Queue&lt;DeferredResult&lt;String&gt;&gt; results = <span class="keyword">new</span> ConcurrentLinkedQueue&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="meta">@GetMapping</span>(<span class="string">"/dr"</span>)</span><br><span class="line">        <span class="function"><span class="keyword">public</span> DeferredResult&lt;String&gt; <span class="title">dr</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            log.info(<span class="string">"dr"</span>);</span><br><span class="line">            DeferredResult&lt;String&gt; dr = <span class="keyword">new</span> DeferredResult&lt;&gt;();</span><br><span class="line">            results.add(dr);</span><br><span class="line">            <span class="keyword">return</span> dr;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@GetMapping</span>(<span class="string">"/dr/count"</span>)</span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">drCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> String.valueOf(results.size());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@GetMapping</span>(<span class="string">"/dr/event"</span>)</span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">drEvent</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">for</span> (DeferredResult&lt;String&gt; dr : results) &#123;</span><br><span class="line">                dr.setResult(<span class="string">"Hello "</span> + msg);</span><br><span class="line">                results.remove(dr);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"OK"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(StudyApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>LoadTest 코드를 이용해 /dr로 100개의 요청을 보내고, 크롬에서 /dr/count로 DeferredResult가 담겨있는 큐의 사이즈를 확인해봅니다. 그리고 마지막으로 /dr/event로 큐에 담긴 DeferredResult 객체에 setResult로 결과를 반환합니다.<br>100개의 요청이 동시에 완료되는 것을 확인할 수 있습니다.<br><img src="/images/post/2019-03-31/deferredresult.png" alt="DeferredResult 결과"></p><h3 id="responsebodyemitter"><a href="#ResponseBodyEmitter" class="headerlink" title="ResponseBodyEmitter"></a>ResponseBodyEmitter</h3><p><a href="https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/mvc/method/annotation/ResponseBodyEmitter.html" target="_blank" rel="noopener">ResponseBodyEmitter</a>는 Spring 4.2 부터 사용 가능합니다. <strong>비동기 요청 처리의 결과로 하나 이상의 응답을 위해 사용되는 리턴 값 Type 입니다.</strong> DeferredResult가 하나의 결과를 생성해 요청을 처리했다면, ResponseBodyEmitter는 여러개의 결과를 만들어 요청을 처리할 수 있습니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableAsync</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudyApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RestController</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@GetMapping</span>(<span class="string">"/emitter"</span>)</span><br><span class="line">        <span class="function"><span class="keyword">public</span> ResponseBodyEmitter <span class="title">emitter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            ResponseBodyEmitter emitter = <span class="keyword">new</span> ResponseBodyEmitter();</span><br><span class="line"></span><br><span class="line">            Executors.newSingleThreadExecutor().submit(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">50</span>; i++) &#123;</span><br><span class="line">                        emitter.send(<span class="string">"&lt;p&gt;Stream "</span> + i + <span class="string">"&lt;/p&gt;"</span>);</span><br><span class="line">                        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> emitter;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(StudyApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/post/2019-03-31/emitter_1.png" alt="ResponseBodyEmitter 결과_1"><br><img src="/images/post/2019-03-31/emitter_2.png" alt="ResponseBodyEmitter 결과_2"></p><h1 id="후기"><a href="#후기" class="headerlink" title="후기"></a>후기</h1><p><strong><a href="http://woowabros.github.io/experience/2019/03/05/2019DR.html" target="_blank" rel="noopener">우하한형제들 - 스프링 리액티브 프로그래밍</a> 세미나를 다녀온 후 <a href="https://www.youtube.com/watch?v=8fenTR3KOJo&amp;list=PLv-xDnFD-nnmof-yoZQN8Fs2kVljIuFyC&amp;index=10" target="_blank" rel="noopener">토비의 봄 TV 스프링 리액티브 프로그래밍 시리즈</a>를 전부 보고있습니다.</strong></p><p>토비님은 매 라이브 코딩마다 말씀하시길 단순히 코드를 보는 것과 실행 후 결과를 실제로 확인해보는 것은 또 다른 차이가 있을 수 있다고 말씀하십니다. 매우 공감합니다!</p><p>위의 내용들은 모두 라이브 코딩에 포함되어 있는 내용이지만 실제로 따라해보면서 해당 내용들을 정리하는 차원으로 작성해보았습니다. 따라하며 토비님이 라이브 코딩을 진행하셨을 때와 달라진 몇 가지를 수정한 부분도 있고, 서버의 스레드를 직접 확인해보고자 처음에는 VisualVM을 사용하려 했지만 계속 실패해 JMC을 이용해 진행했습니다.</p><p>라이브 코딩을 보며 자바와 스프링의 비동기 기술에 대해 개인적으로 궁금했던 부분들이 많이 해소되었습니다!! 앞으로 남은 내용들도 따라하며 정리해 보도록 하겠습니다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;해당 포스팅은 토비님의 &lt;strong&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=aSTuQiPB4Ns&amp;amp;index=7&amp;amp;list=PLv-xDnFD-nnmof-yoZQN8Fs2kVljIuFyC&quot; target
      
    
    </summary>
    
      <category term="Programming" scheme="https://jongmin92.github.io/categories/Programming/"/>
    
      <category term="Java" scheme="https://jongmin92.github.io/categories/Programming/Java/"/>
    
    
      <category term="Java" scheme="https://jongmin92.github.io/tags/Java/"/>
    
      <category term="Async" scheme="https://jongmin92.github.io/tags/Async/"/>
    
      <category term="DeferredResult" scheme="https://jongmin92.github.io/tags/DeferredResult/"/>
    
      <category term="ExecutorService" scheme="https://jongmin92.github.io/tags/ExecutorService/"/>
    
      <category term="Future" scheme="https://jongmin92.github.io/tags/Future/"/>
    
      <category term="FutureTask" scheme="https://jongmin92.github.io/tags/FutureTask/"/>
    
      <category term="ListenableFuture" scheme="https://jongmin92.github.io/tags/ListenableFuture/"/>
    
      <category term="ResponseBodyEmitter" scheme="https://jongmin92.github.io/tags/ResponseBodyEmitter/"/>
    
  </entry>
  
  <entry>
    <title>[번역] Java Reactor Pattern</title>
    <link href="https://jongmin92.github.io/2019/03/05/Java/java-reactor-pattern/"/>
    <id>https://jongmin92.github.io/2019/03/05/Java/java-reactor-pattern/</id>
    <published>2019-03-05T14:00:00.000Z</published>
    <updated>2019-03-09T15:43:30.030Z</updated>
    
    <content type="html"><![CDATA[<p>해당 글은 아래의 Reactor Pattern Explained 시리즈를 번역하였습니다.</p><ul><li><a href="http://jeewanthad.blogspot.com/2013/02/reactor-pattern-explained-part-1.html" target="_blank" rel="noopener">Reactor Pattern Explained - Part 1</a></li><li><a href="http://jeewanthad.blogspot.com/2013/02/reactor-pattern-explained-part-2.html" target="_blank" rel="noopener">Reactor Pattern Explained - Part 2</a></li><li><a href="http://jeewanthad.blogspot.com/2013/03/reacter-pattern-explained-part-3.html" target="_blank" rel="noopener">Reactor Pattern Explained - Part 3</a></li></ul><h1 id="part-1"><a href="#Part-1" class="headerlink" title="Part 1"></a>Part 1</h1><p>서버가 동시에 요청(이벤트)을 받을 때, 보통 요청을 처리하기 위한 이벤트 리스너를 각 스레드마다 할당해 처리하곤 합니다.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Server</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ServerSocket ss = <span class="keyword">new</span> ServerSocket(PORT);</span><br><span class="line">        <span class="keyword">while</span> (!Thread.interrupted())</span><br><span class="line">            <span class="keyword">new</span> Thread(<span class="keyword">new</span> Handler(ss.accept())).start();</span><br><span class="line">            <span class="comment">// or, single-threaded, or a thread pool</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException ex) &#123; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Handler</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Socket socket;</span><br><span class="line">    Handler(Socket s) &#123; socket = s; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">byte</span>[] input = <span class="keyword">new</span> <span class="keyword">byte</span>[MAX_INPUT];</span><br><span class="line">            socket.getInputStream().read(input);</span><br><span class="line">            <span class="keyword">byte</span>[] output = process(input);</span><br><span class="line">            socket.getOutputStream().write(output);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException ex) &#123; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">byte</span>[] process(<span class="keyword">byte</span>[] cmd) &#123; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>요청마다 처리를 위해 이벤트 리스너를 별도의 스레드로 만들어 사용하는 것의 단점은 <code>컨텍스트 전환(context switching)의 오버 헤드</code>가 크다는 것입니다. 최악의 경우, 데이터를 자주 읽거나 쓰지 않는 이벤트 리스너를 처리하는 일부 스레드는 유용한 작업을 하지 않고 주기적으로 컨텍스트를 전환할 것입니다. 스케줄러가 이러한 스레드를 CPU에 디스패치(dispatch) 할 때마다 I/O 이벤트가 발생할 때까지 스레드는 차단되어 I/O 이벤트를 기다리는 데 소비되는 모든 시간이 낭비됩니다.</p><p>위의 코드에서 <code>ss.accept()</code>는 클라이언트가 연결될 때까지 서버 스레드를 차단하는 블로킹 호출입니다. 서버 스레드는 <code>ss.accept()</code> 호출이 반환 될 때까지 이벤트 리스너를 위한 새로운 스레드의 <code>start()</code> 메서드를 호출 할 수 없습니다. 불필요한 컨텍스트 전환으로 인한 CPU 시간 낭비를 줄이기 위해 non-blocking I/O 개념이 탄생했습니다.</p><p><strong><code>Reactor Pattern</code></strong>은 이 문제를 해결하기 위한 <strong>이벤트 처리(event handling) 디자인 패턴</strong>입니다. 하나의 Reactor가 계속 이벤트를 찾고 이벤트가 발생(trigger)하면 해당 이벤트 처리기(event handler)에게 이를 알립니다.</p><p>자바는 non-blocking 시스템을 설계하는 데 사용할 수 있는 <strong>표준 API (java.nio)</strong>를 제공합니다. 클라이언트가 서버로 이름(데이터)을 보내면 서버는 Hello 메시지로 응답하는 간단한 예제를 통해 Reactor 패턴에 대해서 알아보겠습니다.</p><p>Reactor 패턴의 아키텍처에는 두 가지 중요한 참여자가 있습니다.</p><ol><li><strong><code>Reactor</code></strong><br>: Reactor는 별도의 스레드에서 실행되며 발생한 I/O 이벤트는 dispatching되어 해당 이벤트 처리기로 보내 처리합니다.</li><li><strong><code>Handlers</code></strong><br>: Handler는 Reactor로부터 I/O 이벤트를 받아 실제 작업을 수행합니다.</li></ol><p>java.nio 패키지를 이용해서 Reactor 패턴을 구현할 것이기 때문에 nio 패키지에 속한 몇가지 class에 대한 이해가 필요합니다.</p><ul><li><strong><code>Channels</code></strong><br>: 소켓을 통해 non-blocking read를 할 수 있도록 지원하는 connection.</li><li><strong><code>Buffers</code></strong><br>: 채널에 의해 직접 read되거나 write될 수 있는 배열과 같은 객체.</li><li><strong><code>Selectors</code></strong><br>: Selector 는 어느 channel set 이 IO event 를 가지고 있는지를 알려준다. Selector.select() 는 I/O 이벤트가 발생한 채널 set을 return한다. return할 channel이 없다면 계속 기다리게(block) 된다. 이 block된 것을 바로 return 시켜주는 것이 Selector.wakeup()이다.<br>Selector.selectedKeys()는 Selection Key 를 return 해 준다. Reactor는 이 Selection Key를 보고 어떤 handler로 넘겨줄 지를 결정한다.</li><li><strong><code>Selection Keys</code></strong><br>: Selector와 Channel간의 관계를 표현해주는 객체이다. Selector가 제공한 Selection Key를 이용해 Reactor는 채널에서 발생하는 I/O 이벤트로 수행할 작업을 선택할 수 있다. ServerSocketChannel에 selector를 등록하면 key를 준다. 이 key가 SelectionKey 이다.</li></ul><p><img src="/images/post/2019-03-05/reactor_pattern_1.png" alt="Reactor pattern"></p><p><strong>Selector는 계속해서 I/O 이벤트가 발생하기를 대기합니다. Reactor가 Selector.select() 메소드를 호출하면 Selector는 등록된 채널에 대해서 발생한 이벤트 정보가 들어있는 SelectionKey Set을 반환합니다.</strong> (SelectionKey는 해당 채널과 Selector와의 관계에 대한 모든 정보를 갖고 있습니다. 또한 Handler에 대한 정보도 갖고 있습니다.)</p><p>Selector에 등록된 하나의 ServerSocketChannel이 있습니다. ServerSocketChannel은 클라이언트에서 들어오는 연결 요청으로부터 이벤트를 수신해야합니다. 클라이언트가 연결을 요청할 때, ServerSocketChhannel은 I/O 이벤트를 받아 클라이언트에 SocketChannel을 할당해야 합니다. SelectionKey0은 ServerSocketChannel을 가지고 무엇을 해야하는지에 대한 이벤트 정보를 갖고 있습니다. SocketChhannel을 만들기 위해서는 Reactor가 SelectionKey0의 이벤트를 Acceptor에 전달해 Acceptor가 클라이언트와의 연결 요청을 수락하고 SocketChannel을 만들도록 해야합니다.</p><p>Acceptor가 클라이언트1의 연결을 수락하면 클라이언트1에 대한 SocketChannel이 생성됩니다. 이 SocketChannel역시 Selector에 등록되고 해당 채널에서 이벤트가 발생하면 해당 이벤트에 대한 정보를 포함한 SelectionKey1을 반환합니다. 이 SelectionKey1을 이용해서 해당 채널로부터 데이터를 읽고 쓸 수 있습니다. 따라서 SelectionKey1은 읽기와 쓰기를 처리하는 Handler1 객체에 바인딩 됩니다.</p><p>이후로 Reactor가 Selector.selector()를 호출했을 때 반환된 SelectionKey Set에 SelectionKey1이 있으면 SocketChannel1이 이벤트와 함께 트리거됨을 의미합니다. 이제 SelectionKey1을 보면, Reactor는 Handler1이 SelectionKey1에 바인딩되어 있으므로 Handler1에 이벤트를 전달해야한다는 것을 알고 있습니다. 반환 된 SelectionKey Set에 SelectionKey0이 있으면 ServerSocketChannel이 다른 클라이언트에서 이벤트를 수신했으며 SelectionKey0을 보고 Reactor는 해당 이벤트를 다시 Acceptor에 전달해야 함을 알고 있습니다. 이벤트가 Acceptor에 전달되면 클라이언트2에 대해 SocketChannel2를 만들고 SelectionKey2로 Selector로 SocketChannel2를 등록합니다.</p><p><img src="/images/post/2019-03-05/selection_key_table.png" alt="Selection Key table"></p><p>따라서 이 시나리오에서는 3가지 유형의 이벤트에 관심이 있습니다.</p><ol><li>accept 해야하는 ServerSocketChannel에서 트리거되는 연결 요청 이벤트.</li><li>클라이언트로 부터 송신된 데이터를 수신할 수 있을 때, SocketChannel로부터 트리거 되는 이벤트.</li><li>서버에서 클라이언트로 데이터를 송신할 때, 송신할 수 있는 준비가 되면 SocketChannel로부터 트리거 되는 이벤트.</li></ol><p>그럼 스레드 풀은 이 작업과 어떤 관련이 있을까요? non-blocking 아키텍처의 장점은 클라이언트의 모든 요청을 처리하는 동시에 단일 스레드에서 실행되도록 서버를 작성할 수 있다는 것입니다. 서버를 설계하는 데 동시성 개념을 적용하지 않으면 이벤트에 대한 반응성이 떨어집니다. 단일 스레드일 때는 reactor가 이벤트를 handler에 전달해 처리될 때 까지는 다른 이벤트에 응답할 수 없기 때문입니다. 왜냐하면 하나의 스레드를 사용하여 모든 이벤트를 처리하기 때문입니다.</p><p>위의 아키텍처에 동시성을 추가해서 시스템의 응답 속도를 향상시킬 수 있습니다. <strong>Reactor가 이벤트를 Handler에 전달하고 새로운 Thread에서 Handler를 이용해 이벤트를 처리하면 Reacgtor는 계속해서 다른 이벤트에 응답할 수 있습니다.</strong> 또한 스레드 풀을 이용하면 시스템의 스레드 수를 제한하면서 더 효율적으로 사용할 수 있을 것 입니다.</p><h1 id="part-2"><a href="#Part-2" class="headerlink" title="Part 2"></a>Part 2</h1><p>간단한 Reactor 패턴의 예시를 살펴보겠습니다. 클라이언트는 서버로 이름을 넣은 메시지를 전송하고 서버는 클라이언트에 Hello 메시지로 응답합니다. 스레드 풀은 Part3에서 살펴보겠습니다.</p><p>클라이언트는 java.nio를 사용하여 Socket을 생성하지 않고 java.net.Socket을 사용합니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    String hostIp;</span><br><span class="line">    <span class="keyword">int</span> hostPort;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Client</span><span class="params">(String hostIp, <span class="keyword">int</span> hostPort)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.hostIp = hostIp;</span><br><span class="line">        <span class="keyword">this</span>.hostPort = hostPort;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">runClient</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Socket clientSocket = <span class="keyword">null</span>;</span><br><span class="line">        PrintWriter out = <span class="keyword">null</span>;</span><br><span class="line">        BufferedReader in = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            clientSocket = <span class="keyword">new</span> Socket(hostIp, hostPort);</span><br><span class="line">            out = <span class="keyword">new</span> PrintWriter(clientSocket.getOutputStream(), <span class="keyword">true</span>);</span><br><span class="line">            in = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(clientSocket.getInputStream()));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnknownHostException e) &#123;</span><br><span class="line">            System.err.println(<span class="string">"Unknown host: "</span> + hostIp);</span><br><span class="line">            System.exit(<span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            System.err.println(<span class="string">"Couldn't connect to: "</span> + hostIp);</span><br><span class="line">            System.exit(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        BufferedReader stdIn = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        String userInput;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"Client connected to host : "</span> + hostIp + <span class="string">" port: "</span> + hostPort);</span><br><span class="line">        System.out.println(<span class="string">"Type (\"Bye\" to quit)"</span>);</span><br><span class="line">        System.out.println(<span class="string">"Tell what your name is to the Server....."</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> ((userInput = stdIn.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line"></span><br><span class="line">            out.println(userInput);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Break when client says Bye.</span></span><br><span class="line">            <span class="keyword">if</span> (userInput.equalsIgnoreCase(<span class="string">"Bye"</span>))</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">"Server says: "</span> + in.readLine());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        out.close();</span><br><span class="line">        in.close();</span><br><span class="line">        stdIn.close();</span><br><span class="line">        clientSocket.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        Client client = <span class="keyword">new</span> Client(<span class="string">"127.0.0.1"</span>, <span class="number">9900</span>);</span><br><span class="line">        client.runClient();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>서버는 Reactor 패턴을 이용해 구현합니다.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Reactor</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> Selector selector;</span><br><span class="line">    <span class="keyword">final</span> ServerSocketChannel serverSocketChannel;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> isWithThreadPool;</span><br><span class="line"></span><br><span class="line">    Reactor(<span class="keyword">int</span> port, <span class="keyword">boolean</span> isWithThreadPool) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.isWithThreadPool = isWithThreadPool;</span><br><span class="line">        selector = Selector.open();</span><br><span class="line">        serverSocketChannel = ServerSocketChannel.open();</span><br><span class="line">        serverSocketChannel.socket().bind(<span class="keyword">new</span> InetSocketAddress(port));</span><br><span class="line">        serverSocketChannel.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line">        SelectionKey selectionKey0 = serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT);</span><br><span class="line">        selectionKey0.attach(<span class="keyword">new</span> Acceptor());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Server listening to port: "</span> + serverSocketChannel.socket().getLocalPort());</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (!Thread.interrupted()) &#123;</span><br><span class="line">                selector.select();</span><br><span class="line">                Set selected = selector.selectedKeys();</span><br><span class="line">                Iterator it = selected.iterator();</span><br><span class="line">                <span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">                    dispatch((SelectionKey) (it.next()));</span><br><span class="line">                &#125;</span><br><span class="line">                selected.clear();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">            ex.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dispatch</span><span class="params">(SelectionKey k)</span> </span>&#123;</span><br><span class="line">        Runnable r = (Runnable) (k.attachment());</span><br><span class="line">        <span class="keyword">if</span> (r != <span class="keyword">null</span>) &#123;</span><br><span class="line">            r.run();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Acceptor</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                SocketChannel socketChannel = serverSocketChannel.accept();</span><br><span class="line">                <span class="keyword">if</span> (socketChannel != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (isWithThreadPool)</span><br><span class="line">                        <span class="keyword">new</span> HandlerWithThreadPool(selector, socketChannel);</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        <span class="keyword">new</span> Handler(selector, socketChannel);</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(<span class="string">"Connection Accepted by Reactor"</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">                ex.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Reactor는 Runnable을 구현하고 있으며, run() 메서드에서는 while 루프를 돌며 selector.select()를 호출하여 처리할 수 있는 이벤트 정보가 담긴 SelectionKey Set을 가져옵니다. SelectionKey에 바인드 되어있는 Handler를 가져와 dispatch합니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Handler</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> SocketChannel socketChannel;</span><br><span class="line">    <span class="keyword">final</span> SelectionKey selectionKey;</span><br><span class="line">    ByteBuffer input = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> READING = <span class="number">0</span>, SENDING = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> state = READING;</span><br><span class="line">    String clientName = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">    Handler(Selector selector, SocketChannel c) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        socketChannel = c;</span><br><span class="line">        c.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line">        selectionKey = socketChannel.register(selector, <span class="number">0</span>);</span><br><span class="line">        selectionKey.attach(<span class="keyword">this</span>);</span><br><span class="line">        selectionKey.interestOps(SelectionKey.OP_READ);</span><br><span class="line">        selector.wakeup();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (state == READING) &#123;</span><br><span class="line">                read();</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (state == SENDING) &#123;</span><br><span class="line">                send();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">            ex.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> readCount = socketChannel.read(input);</span><br><span class="line">        <span class="keyword">if</span> (readCount &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            readProcess(readCount);</span><br><span class="line">        &#125;</span><br><span class="line">        state = SENDING;</span><br><span class="line">        <span class="comment">// Interested in writing</span></span><br><span class="line">        selectionKey.interestOps(SelectionKey.OP_WRITE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Processing of the read message. This only prints the message to stdOut.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> readCount</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">readProcess</span><span class="params">(<span class="keyword">int</span> readCount)</span> </span>&#123;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        input.flip();</span><br><span class="line">        <span class="keyword">byte</span>[] subStringBytes = <span class="keyword">new</span> <span class="keyword">byte</span>[readCount];</span><br><span class="line">        <span class="keyword">byte</span>[] array = input.array();</span><br><span class="line">        System.arraycopy(array, <span class="number">0</span>, subStringBytes, <span class="number">0</span>, readCount);</span><br><span class="line">        <span class="comment">// Assuming ASCII (bad assumption but simplifies the example)</span></span><br><span class="line">        sb.append(<span class="keyword">new</span> String(subStringBytes));</span><br><span class="line">        input.clear();</span><br><span class="line">        clientName = sb.toString().trim();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">send</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Saying hello to "</span> + clientName);</span><br><span class="line">        ByteBuffer output = ByteBuffer.wrap((<span class="string">"Hello "</span> + clientName + <span class="string">"\n"</span>).getBytes());</span><br><span class="line">        socketChannel.write(output);</span><br><span class="line">        selectionKey.interestOps(SelectionKey.OP_READ);</span><br><span class="line">        state = READING;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Handler에는 READING, SENDING 2가지 상태가 있습니다. 채널은 한 번에 하나의 작업만 지원하기 때문에 동시에 처리할 수 없습니다. Handler가 SelectionKey에 어떻게 attach 되는지와 관심있는 연산이 OP_READ로 설정되는 부분에 유의해야합니다. Selector는 Read 이벤트가 발생할 때만 SelectionKey를 select해야 합니다. READ 프로세스가 완료되면 Handler는 상태를 SENDING으로 변경하고 관심 대상 연산을 OP_WRITE로 변경합니다. 이제 Selector는 채널이 데이터를 전송할 준비가 되었을 때 SelectionKey를 select 합니다. Write 이벤트가 Handler에 dispatch될 때, 상태가 SENDING이므로 Hello 메시지를 출력 버퍼에 씁니다. 전송이 완료되면 관심있는 작업을 OP_READ로 다시 변경하면서 Handler의 상태가 READING으로 변경됩니다.</p><p>결과적으로 서버는 단일 스레드에서 실행되지만 서버에 연결하는 클라이언트 수에 상관없이 응답합니다.</p><h1 id="part-3"><a href="#Part-3" class="headerlink" title="Part 3"></a>Part 3</h1><p>이번 파트에서는 Handler의 스레드 풀에 대해서 설명합니다. HandlerWithThreadPool은 Handler 클래스의 확장 버전입니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HandlerWithThreadPool</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> ExecutorService pool = Executors.newFixedThreadPool(<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> PROCESSING = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HandlerWithThreadPool</span><span class="params">(Selector sel, SocketChannel c)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(sel, c);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> readCount = socketChannel.read(input);</span><br><span class="line">        <span class="keyword">if</span> (readCount &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            state = PROCESSING;</span><br><span class="line">            pool.execute(<span class="keyword">new</span> Processer(readCount));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// We are interested in writing back to the client soon after read processing is done.</span></span><br><span class="line">        selectionKey.interestOps(SelectionKey.OP_WRITE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Start processing in a new Processer Thread and Hand off to the reactor thread.</span></span><br><span class="line">    <span class="function"><span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">processAndHandOff</span><span class="params">(<span class="keyword">int</span> readCount)</span> </span>&#123;</span><br><span class="line">        readProcess(readCount);</span><br><span class="line">        <span class="comment">// Read processing done. Now the server is ready to send a message to the client.</span></span><br><span class="line">        state = SENDING;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Processer</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> readCount;</span><br><span class="line">        Processer(<span class="keyword">int</span> readCount) &#123;</span><br><span class="line">            <span class="keyword">this</span>.readCount =  readCount;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            processAndHandOff(readCount);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>PROCESSING이 새로 도입되었으며 read() 메서드가 override 되었습니다. 이제 Read 이벤트가 Handler에 dispatch되면 데이터를 읽지만 상태를 SENDING으로 변경하지는 않습니다. 메시지를 처리하고 스레드 풀의 다른 스레드에서 실행하고 관련 작업을 OP_WRITE로 설정하는 Processer를 생성합니다. 이 시점에서 채널에 Write 준비가 되어 있더라도 Handler는 아직 PROCESSING 상태이기 때문에 write하지 않습니다.</p><h1 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h1><p><a href="http://i5on9i.blogspot.com/2013/11/reactor-pattern.html" target="_blank" rel="noopener">Reactor Pattern 에 대해 알아보자</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;해당 글은 아래의 Reactor Pattern Explained 시리즈를 번역하였습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://jeewanthad.blogspot.com/2013/02/reactor-pattern-explained-
      
    
    </summary>
    
      <category term="Programming" scheme="https://jongmin92.github.io/categories/Programming/"/>
    
      <category term="Java" scheme="https://jongmin92.github.io/categories/Programming/Java/"/>
    
    
      <category term="nio" scheme="https://jongmin92.github.io/tags/nio/"/>
    
      <category term="select" scheme="https://jongmin92.github.io/tags/select/"/>
    
      <category term="multiplexing" scheme="https://jongmin92.github.io/tags/multiplexing/"/>
    
      <category term="non-blocking io" scheme="https://jongmin92.github.io/tags/non-blocking-io/"/>
    
      <category term="reactor" scheme="https://jongmin92.github.io/tags/reactor/"/>
    
  </entry>
  
  <entry>
    <title>Java NIO와 멀티플렉싱 기반의 다중 접속 서버</title>
    <link href="https://jongmin92.github.io/2019/03/03/Java/java-nio/"/>
    <id>https://jongmin92.github.io/2019/03/03/Java/java-nio/</id>
    <published>2019-03-03T04:00:00.000Z</published>
    <updated>2019-03-09T04:50:29.892Z</updated>
    
    <content type="html"><![CDATA[<p>자바 NIO에 대한 소개와 NIO와 함께 도입된 자바에서 I/O 멀티플렉싱(multiplexing)을 구현한 selector에 대해 알아봅니다. I/O 멀티플렉싱(multiplexing)에 대한 개념에 대해 아직 잘 이해하지 못하고 있다면 먼저 <a href="https://jongmin92.github.io/2019/02/28/Java/java-with-non-blocking-io/"><strong>&lt;멀티플렉싱 기반의 다중 접속 서버로 가기까지&gt;</strong></a> 포스팅을 읽어주세요.</p><h1 id="overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h1><p><strong>자바 NIO (New IO)는 기존의 자바 IO API를 대체하기 위해 자바 1.4부터 도입이 되었습니다.</strong> 새롭게 변화된 부분에 대해서 간략히 요약해보면 다음과 같습니다. </p><ul><li><strong><code>Channels and Buffers</code></strong><br>기존 IO API에서는 byte streams character streams 사용했지만, NIO에서는 channels(채널)과 buffers(버퍼)를 사용합니다. 데이터는 항상 채널에서 버퍼로 읽히거나 버퍼에서 채널로 쓰여집니다.</li><li><strong><code>Non-blocking IO</code></strong><br>자바 NIO에서는 non-blocking IO를 사용할 수 있습니다. 예를 들면, 하나의 스레드는 버퍼에 데이터를 읽도록 채널에 요청할 수 있습니다. 채널이 버퍼로 데이터를 읽는 동안 스레드는 다른 작업을 수행할 수 있습니다. 데이터가 채널에서 버퍼로 읽어지면, 스레드는 해당 버퍼를 이용한 processing(처리)를 계속 할 수 있습니다. 데이터를 채널에 쓰는 경우도 non-blocking이 가능합니다.</li><li><strong><code>Selectors</code></strong><br>자바 NIO에는 “selectors” 개념을 포함하고 있습니다. selector는 여러개의 채널에서 이벤트(연결이 생성됨, 데이터가 도착함)를 모니터링할 수 있는 객체입니다. 그래서 하나의 스레드에서 여러 채널에 대해 모니터링이 가능합니다.</li></ul><p>자바 NIO는 다음과 같은 핵심 컴포넌트로 구성되어있습니다.</p><ul><li><strong>Channels</strong></li><li><strong>Buffers</strong></li><li><strong>Selectors</strong></li></ul><p>실제로는 더 많은 클래스와 컴포넌트가 있지만 채널, 버퍼, 셀렉터가 API의 핵심을 구성합니다.</p><h1 id="channels"><a href="#Channels" class="headerlink" title="Channels"></a>Channels</h1><p><strong>일반적으로 NIO의 모든 IO는 채널로 시작합니다. 채널 데이터를 버퍼로 읽을 수 있고, 버퍼에서 채널로 데이터를 쓸 수 있습니다.</strong><br><img src="/images/post/2019-03-03/channel_buffer.png" alt="channel and buffer"></p><p>채널은 스트림(stream)과 유사하지만 몇가지 차이점이 있습니다.</p><ul><li>채널을 통해서는 읽고 쓸 수 있지만, 스트림은 일반적으로 단방향(읽기 혹은 쓰기)으로만 가능합니다.</li><li>채널은 비동기적(asynchronously)으로 읽고 쓸 수 있습니다.</li><li>채널은 항상 버퍼에서 부터 읽거나 버퍼로 씁니다.</li></ul><p>채널에는 여러가지 타입이 있습니다. 다음은 자바 NIO에 기본적으로 구현되어 있는 목록입니다.</p><ul><li>Channels<ul><li>FileChannel<br>: 파일에 데이터를 읽고 쓴다.</li><li>DatagramChannel<br>: UDP를 이용해 네트워크를 통해 데이터를 읽고 쓴다.</li><li><strong>SocketChannel</strong><br>: TCP를 이용해 네트워크를 통해 데이터를 읽고 쓴다.</li><li><strong>ServerSocketChannel</strong><br>: 들어오는 TCP 연결을 수신(listening)할 수 있다. 들어오는 연결마다 SocketChannel이 만들어진다.</li></ul></li></ul><h1 id="buffers"><a href="#Buffers" class="headerlink" title="Buffers"></a>Buffers</h1><p><strong>NIO의 버퍼는 채널과 상호작용할 때 사용됩니다. 데이터는 채널에서 버퍼로 읽혀지거나, 버퍼에서 읽혀 채널로 쓰여집니다.</strong></p><p>버퍼에는 여러가지 타입이 있습니다. 다음은 자바 NIO에 기본적으로 구현되어 있는 목록입니다.</p><ul><li>Buffers<ul><li>ByteBuffer</li><li>MappedByteBuffer</li><li>CharBuffer</li><li>ShortBuffer</li><li>IntBuffer</li><li>LongBuffer</li><li>FloatBuffer</li><li>DoubleBuffer</li></ul></li></ul><p>일반적으로 버퍼를 사용하여 데이터를 읽고 쓰는 것은 4단계 프로세스를 가집니다.</p><ol><li>버퍼에 데이터 쓰기</li><li>buffer.flip() 호출</li><li>버퍼에서 데이터 읽기</li><li>buffer.clear() 혹은 buffer.compact() 호출</li></ol><p>버퍼에 데이터를 쓸 때 버퍼는 쓰여진 데이터의 양을 기록합니다. 만약 데이터를 읽어야한다면 flip() 메서드를 호출해서 버퍼를 쓰기 모드에서 읽기 모드로 전환해야 합니다. 읽기 모드에서 버퍼를 사용하면 버퍼에 쓰여진 모든 데이터를 읽을 수 있습니다.<br>모든 데이터를 읽은 후에는 버퍼를 지우고 다시 쓸 준비를 해야합니다. clear() 혹은 compact()를 호출함으로써 전체 버퍼를 지울 수 있습니다. (clear() 메서드는 버퍼 전체를 지우고, compact() 메서드는 이미 읽은 데이터만 지웁니다.)</p><h1 id="selectors"><a href="#Selectors" class="headerlink" title="Selectors"></a>Selectors</h1><p><strong>셀렉터를 사용하면 하나의 스레드가 여러 채널을 처리(handle)할 수 있습니다.</strong><br><img src="/images/post/2019-03-03/selector.png" alt="selector"><br>셀렉터는 사용을 위해 하나 이상의 채널을 셀렉터에 등록하고 <strong>select()</strong> 메서드를 호출해 등록 된 채널 중 이벤트 준비가 완료된 하나 이상의 채널이 생길 때까지 봉쇄(block)됩니다. 메서드가 반환(return)되면 스레드는 채널에 준비 완료된 이벤트를 처리할 수 있습니다. 즉, 하나의 스레드에서 여러 채널을 관리할 수 있으므로 여러 네트워크 연결을 관리할 수 있습니다. (SocketChannel, ServerSocketChannel)</p><h2 id="selector-생성"><a href="#Selector-생성" class="headerlink" title="Selector 생성"></a>Selector 생성</h2><p><strong><code>Selector.open()</code> 메서드를 통해 셀렉터를 생성할 수 있습니다.</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Selector selector = Selector.open();</span><br></pre></td></tr></table></figure></p><h2 id="channels-등록"><a href="#Channels-등록" class="headerlink" title="Channels 등록"></a>Channels 등록</h2><p><strong>생성한 셀렉터에 채널을 등록하기 위해서는 다음과 같이 채널의 <code>register()</code> 메서드를 호출합니다.</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">channel.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">SelectionKey key = channel.register(selector, SelectionKey.OP_READ);</span><br></pre></td></tr></table></figure></p><p>셀렉터에 채널을 등록하기 위해서는 반드시 해당 채널이 non-blocking 모드로 변환되어야 합니다. (FileChannel은 non-blocking 모드로 변경이 불가능하기 때문에 셀렉터에 등록이 불가능합니다.)</p><p><strong>register() 메서드의 두 번째 매개 변수는 셀렉터를 통해 채널에서 발생하는 이벤트 중 확인(알림)하고자 하는 이벤트의 집합을 의미합니다.<br>이벤트에는 4가지 종류가 있으며, 이 4가지 이벤트는 <code>SelectionKey</code> 상수로 표시됩니다.</strong></p><ul><li>SelectionKey.OP_CONNECT</li><li>SelectionKey.OP_ACCEPT</li><li>SelectionKey.OP_READ</li><li>SelectionKey.OP_WRITE</li></ul><p>둘 이상의 이벤트 상수는 다음과 같이 사용 가능합니다.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> interestSet = SelectionKey.OP_READ | SelectionKey.OP_WRITE</span><br></pre></td></tr></table></figure></p><h2 id="selectionkey"><a href="#SelectionKey" class="headerlink" title="SelectionKey"></a>SelectionKey</h2><p>register() 메서드를 이용해 채널을 셀렉터에 등록하면 SelectionKey 객체가 반환됩니다. 이 SelectionKey 객체에는 몇 가지 속성들이 있습니다.</p><ul><li>The interest set</li><li>The ready set</li><li>The Channel</li><li>The Selector</li><li>An attached object (optional)</li></ul><h3 id="interest-set"><a href="#interest-Set" class="headerlink" title="interest Set"></a>interest Set</h3><p>interest set은 셀렉터에 등록된 채널이 확인하고자 하는 이벤트 집합(세트)입니다. 다음과 같이 SelectionKey를 이용해 해당 interest set을 확인할 수 있습니다.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> interestSet = selectionKey.interestOps();</span><br><span class="line"></span><br><span class="line"><span class="keyword">boolean</span> isInterestedInAccept  = interestSet &amp; SelectionKey.OP_ACCEPT;</span><br><span class="line"><span class="keyword">boolean</span> isInterestedInConnect = interestSet &amp; SelectionKey.OP_CONNECT;</span><br><span class="line"><span class="keyword">boolean</span> isInterestedInRead    = interestSet &amp; SelectionKey.OP_READ;</span><br><span class="line"><span class="keyword">boolean</span> isInterestedInWrite   = interestSet &amp; SelectionKey.OP_WRITE;</span><br></pre></td></tr></table></figure></p><h3 id="ready-set"><a href="#Ready-Set" class="headerlink" title="Ready Set"></a>Ready Set</h3><p>ready set은 셀렉터에 등록된 채널에서 준비되어 처리(handle) 가능한 이벤트의 집합입니다.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> readySet = SelectionKey.readyOps();</span><br></pre></td></tr></table></figure></p><p>위와 같이 interest Set과 동일한 방식으로 확인할 수도 있지만 아래와 같이 4가지 메소드를 이용해서 확인할 수도 있습니다.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">selectionKey.isAcceptable();</span><br><span class="line">selectionKey.isConnectable();</span><br><span class="line">selectionKey.isReadable();</span><br><span class="line">selectionKey.isWritable();</span><br></pre></td></tr></table></figure></p><h3 id="channel-selector"><a href="#Channel-Selector" class="headerlink" title="Channel + Selector"></a>Channel + Selector</h3><p>SelectionKey를 이용해 채널과 셀렉터에 쉽게 접근할 수 있습니다.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Channel  channel  = selectionKey.channel();</span><br><span class="line"></span><br><span class="line">Selector selector = selectionKey.selector();</span><br></pre></td></tr></table></figure></p><h3 id="attaching-objects"><a href="#Attaching-Objects" class="headerlink" title="Attaching Objects"></a>Attaching Objects</h3><p>SelectionKey에 객체를 첨부(attach)할 수 있습니다. 이 방법을 이용하면 채널에 추가 정보나 채널에서 사용하는 버퍼와 같은 객체들을 쉽게 첨부할 수 있습니다.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">selectionKey.attach(theObject);</span><br><span class="line"></span><br><span class="line">Object attachedObj = selectionKey.attachment();</span><br></pre></td></tr></table></figure></p><p>selectionKey를 통해 직접 attach 하는 것 뿐만 아니라 셀렉터에 채널을 등록하면서 객체를 첨부할 수도 있습니다.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SelectionKey key = channel.register(selector, SelectionKey.OP_READ, theObject);</span><br></pre></td></tr></table></figure></p><h2 id="셀렉터를-이용해-채널-선택"><a href="#셀렉터를-이용해-채널-선택" class="headerlink" title="셀렉터를 이용해 채널 선택"></a>셀렉터를 이용해 채널 선택</h2><p><strong>셀렉터에 하나 이상의 채널을 등록한 후에는 <code>select()</code> 메소드를 호출할 수 있습니다. select() 메소드는 accept, connect, read, write 이벤트에 대해 준비(ready) 되어 있는 채널을 반환합니다.</strong> select() 메소드는 다음과 같이 3가지 방식으로 사용 가능합니다.</p><ul><li><strong>select()</strong><br>: 등록한 이벤트에 대해 하나 이상의 채널이 준비 될 때까지 봉쇄(block)됩니다. 몇개의 채널이 준비되었는지 준비된 채널의 수를 반환합니다. (마지막으로 select()를 호출한 이후 준비된 채널 수 입니다.)</li><li><strong>select(long timeout)</strong><br>: 최대 timeout(ms) 동안만 봉쇄한다는 점을 제외하면 select()와 동일합니다.</li><li><strong>selectNow()</strong><br>: select와 달리 봉쇄하지 않습니다. 준비된 채널이 있으면 즉시 반환됩니다.</li></ul><h3 id="selectedkeys"><a href="#selectedKeys" class="headerlink" title="selectedKeys()"></a>selectedKeys()</h3><p><strong>select() 메서드를 통해 하나 이상의 준비된 채널이 발생하면, <code>selectedKeys()</code> 메서드를 사용해 준비된 채널의 집합을 반환 받습니다.</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Set&lt;SelectionKey&gt; selectedKeys = selector.selectedKeys();</span><br></pre></td></tr></table></figure></p><p>반환된 SelectionKey set을 반복해 준비된 채널에 접근할 수 있습니다. 채널의 이벤트 처리가 끝나면 keyIterator.remove()를 통해 키 세트에서 제거해야 합니다.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">Set&lt;SelectionKey&gt; selectedKeys = selector.selectedKeys();</span><br><span class="line"></span><br><span class="line">Iterator&lt;SelectionKey&gt; keyIterator = selectedKeys.iterator();</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(keyIterator.hasNext()) &#123;</span><br><span class="line">    </span><br><span class="line">    SelectionKey key = keyIterator.next();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(key.isAcceptable()) &#123;</span><br><span class="line">        <span class="comment">// a connection was accepted by a ServerSocketChannel.</span></span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (key.isConnectable()) &#123;</span><br><span class="line">        <span class="comment">// a connection was established with a remote server.</span></span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (key.isReadable()) &#123;</span><br><span class="line">        <span class="comment">// a channel is ready for reading</span></span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (key.isWritable()) &#123;</span><br><span class="line">        <span class="comment">// a channel is ready for writing</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    keyIterator.remove();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="serversocketchannel"><a href="#ServerSocketChannel" class="headerlink" title="ServerSocketChannel"></a>ServerSocketChannel</h1><p><strong>NIO ServerSocketChannel은 표준 자바 네트워킹의 ServerSocket과 마찬가지로 들어오는 TCP 연결을 수신 대기 할 수 있는 채널입니다.</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ServerSocketChannel serverSocketChannel = ServerSocketChannel.open();</span><br><span class="line"></span><br><span class="line">serverSocketChannel.socket().bind(<span class="keyword">new</span> InetSocketAddress(<span class="number">9999</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">    SocketChannel socketChannel = serverSocketChannel.accept();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// do something with socketChannel...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="non-blocking-mode"><a href="#Non-blocking-Mode" class="headerlink" title="Non-blocking Mode"></a>Non-blocking Mode</h2><p><strong>ServerSocketChannel은 non-blocking 모드로 설정이 가능합니다.</strong> non-blocking 모드에서는 accept() 메서드가 즉시 반환되므로 들어오는 연결이 없으면 null을 반환할 수 있습니다. 이에 따라 반환 된 ServerSocketChannel이 null인지 확인해야합니다.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">ServerSocketChannel serverSocketChannel = ServerSocketChannel.open();</span><br><span class="line"></span><br><span class="line">serverSocketChannel.socket().bind(<span class="keyword">new</span> InetSocketAddress(<span class="number">9999</span>));</span><br><span class="line">serverSocketChannel.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">    SocketChannel socketChannel = serverSocketChannel.accept();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (socketChannel != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// do something with socketChannel...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="socketchannel"><a href="#SocketChannel" class="headerlink" title="SocketChannel"></a>SocketChannel</h1><p><strong>NIO SocketChannel은 TCP 네트워크 소켓에 연결된 채널입니다. 표준 자바 네트워킹의 Socket과 역할이 같습니다.</strong></p><h2 id="non-blocking-mode"><a href="#Non-blocking-Mode-1" class="headerlink" title="Non-blocking Mode"></a>Non-blocking Mode</h2><p><strong>ServerSocketChannel과 마찬가지로 SocketChannel을 non-blocking 모드로 설정할 수 있습니다.</strong> non-blocking 모드에서는 connect(), read(), write()를 호출할 수 있습니다.</p><h3 id="connect"><a href="#connect" class="headerlink" title="connect()"></a>connect()</h3><p>SocketChannel이 non-blocking 모드일 때, connect()를 호출하면 메서드가 연결이 설정되기 전에 반환될 수 있습니다. 연결이 설정되었는지 확인하기 위해서 finishConnect() 메서드를 이용할 수 있습니다.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">socketChannel.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line">socketChannel.connect(<span class="keyword">new</span> InetSocketAddress(<span class="string">"http://naver.com"</span>, <span class="number">80</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(!socketChannel.finishConnect()) &#123;</span><br><span class="line">    <span class="comment">// wait, or do something else...    </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="read"><a href="#read" class="headerlink" title="read()"></a>read()</h3><p>non-blocking 모드일 때, read() 메서드는 데이터를 전혀 읽지 않고 반환 될 수 있습니다. 따라서 반환 된 결과(int)를 갖고 판단해야 합니다. 반환 된 결과(int)는 읽은 바이트 수를 나타냅니다.</p><h1 id="멀티플렉싱-기반의-다중-접속-서버"><a href="#멀티플렉싱-기반의-다중-접속-서버" class="headerlink" title="멀티플렉싱 기반의 다중 접속 서버"></a>멀티플렉싱 기반의 다중 접속 서버</h1><p>지금까지 살펴본 Channel, Buffer, Selector를 이용해 간단한 echo 서버를 만들어 보았습니다.</p><h2 id="echoserverjava"><a href="#EchoServer-java" class="headerlink" title="EchoServer.java"></a>EchoServer.java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.InetSocketAddress;</span><br><span class="line"><span class="keyword">import</span> java.nio.ByteBuffer;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.SelectionKey;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.Selector;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.ServerSocketChannel;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.SocketChannel;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EchoServer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String EXIT = <span class="string">"EXIT"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Selector selector = Selector.open();</span><br><span class="line">        ServerSocketChannel serverSocket = ServerSocketChannel.open();</span><br><span class="line">        serverSocket.bind(<span class="keyword">new</span> InetSocketAddress(<span class="string">"localhost"</span>, <span class="number">3000</span>));</span><br><span class="line">        serverSocket.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line">        serverSocket.register(selector, SelectionKey.OP_ACCEPT);</span><br><span class="line">        ByteBuffer buffer = ByteBuffer.allocate(<span class="number">256</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            selector.select();</span><br><span class="line">            Set&lt;SelectionKey&gt; selectedKeys = selector.selectedKeys();</span><br><span class="line">            Iterator&lt;SelectionKey&gt; iter = selectedKeys.iterator();</span><br><span class="line">            <span class="keyword">while</span> (iter.hasNext()) &#123;</span><br><span class="line"></span><br><span class="line">                SelectionKey key = iter.next();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (key.isAcceptable()) &#123;</span><br><span class="line">                    register(selector, serverSocket);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (key.isReadable()) &#123;</span><br><span class="line">                    answerWithEcho(buffer, key);</span><br><span class="line">                &#125;</span><br><span class="line">                iter.remove();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">answerWithEcho</span><span class="params">(ByteBuffer buffer, SelectionKey key)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        SocketChannel client = (SocketChannel) key.channel();</span><br><span class="line">        client.read(buffer);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">new</span> String(buffer.array()).trim().equals(EXIT)) &#123;</span><br><span class="line">            client.close();</span><br><span class="line">            System.out.println(<span class="string">"Not accepting client messages anymore"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        buffer.flip();</span><br><span class="line">        client.write(buffer);</span><br><span class="line">        buffer.clear();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">register</span><span class="params">(Selector selector, ServerSocketChannel serverSocket)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        SocketChannel client = serverSocket.accept();</span><br><span class="line">        client.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line">        client.register(selector, SelectionKey.OP_READ);</span><br><span class="line">        System.out.println(<span class="string">"new client connected..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="실행-결과"><a href="#실행-결과" class="headerlink" title="실행 결과"></a>실행 결과</h2><p><img src="/images/post/2019-03-03/echo_server_with_select.gif" alt="echo_server_with_select"></p><h1 id="java-nio-vs-io"><a href="#Java-NIO-vs-IO" class="headerlink" title="Java NIO vs IO"></a>Java NIO vs IO</h1><h2 id="stream-oriented-vs-buffer-oriented"><a href="#Stream-Oriented-vs-Buffer-Oriented" class="headerlink" title="Stream Oriented vs Buffer Oriented"></a>Stream Oriented vs Buffer Oriented</h2><p><strong>스트림 지향의 IO는 스트림에서 한 번에 하나 이상의 바이트를 읽는 것을 의미합니다.</strong> 읽은 바이트를 이용해 유저가 데이터를 처리해야 하며 읽힌 바이트는 따로 캐시되지 않습니다. 또한 스트림의 데이터는 임의로 유저가 앞뒤로 이동할 수 없습니다. 스트림에서 읽은 데이터를 앞뒤로 이동해야 하는 경우는 먼저 스트림의 데이터를 읽어 버퍼에 캐시해야합니다.</p><p><strong>버퍼 지향의 NIO 방식은 조금 다릅니다. 데이터는 나중에 처리되는 임의의 버퍼로 읽어집니다.</strong> 필요에 따라 버퍼에서 앞뒤로 이동할 수 있습니다. 이로 인해 버퍼를 이용한 처리 과정에서 좀 더 유연한 사용이 가능합니다. 그러나 버퍼를 이용해 완전히 처리하려면 필요한 모든 데이터가 버퍼에 들어있는지 확인해야합니다. 또한 버퍼에 더 많은 데이터를 읽을 때, 아직 처리하지 않은 버퍼의 데이터를 덮어 쓰지 않도록 주의해야합니다.</p><h2 id="blocking-vs-non-blocking-io"><a href="#Blocking-vs-Non-blocking-IO" class="headerlink" title="Blocking vs Non-blocking IO"></a>Blocking vs Non-blocking IO</h2><p><strong>자바 IO의 스트림을 이용하면 봉쇄(block)됩니다.</strong> 즉, 스레드가 read() 혹은 write()를 호출하면 읽은 데이터가 있거나 데이터가 완전히 쓰여질 때까지 해당 스레드가 차단되어 그 동안 스레드는 아무 것도 할 수 없습니다.</p><p><strong>자바 NIO의 Non-blocking 모드는 스레드가 채널에서 데이터 읽기를 요청할 때, 현재 사용할 수 있는 데이터가 없는 경우 사용 가능한 데이터가 준비될 때까지 기다리지 않습니다.</strong> 때문에 해당 스레드는 봉쇄되지 않고 계속 진행될 수 있습니다. 쓰기 작업 또한 마찬가지 입니다. 스레드는 일부 데이터를 채널에 쓰도록 요청할 수 있지만 완전히 쓰여지기를 기다리지는 않습니다.</p><h2 id="selectos"><a href="#Selectos" class="headerlink" title="Selectos"></a>Selectos</h2><p><strong>자바 NIO의 셀렉터는 하나의 스레드에서 다중 입력 채널을 관리할 수 있습니다.</strong> 이 멀티플렉싱 메커니즘을 사용하면 단일 스레드에서 여러 채널의 입출력을 쉽게 관리할 수 있습니다.</p><h1 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h1><ul><li><a href="http://tutorials.jenkov.com/java-nio/index.html" target="_blank" rel="noopener">Java NIO Tutorial</a></li><li><a href="https://www.baeldung.com/java-nio-selector" target="_blank" rel="noopener">Introduction to the Java NIO Selector</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;자바 NIO에 대한 소개와 NIO와 함께 도입된 자바에서 I/O 멀티플렉싱(multiplexing)을 구현한 selector에 대해 알아봅니다. I/O 멀티플렉싱(multiplexing)에 대한 개념에 대해 아직 잘 이해하지 못하고 있다면 먼저 
      
    
    </summary>
    
      <category term="Programming" scheme="https://jongmin92.github.io/categories/Programming/"/>
    
      <category term="Java" scheme="https://jongmin92.github.io/categories/Programming/Java/"/>
    
    
      <category term="nio" scheme="https://jongmin92.github.io/tags/nio/"/>
    
      <category term="select" scheme="https://jongmin92.github.io/tags/select/"/>
    
      <category term="multiplexing" scheme="https://jongmin92.github.io/tags/multiplexing/"/>
    
  </entry>
  
  <entry>
    <title>멀티플렉싱 기반의 다중 접속 서버로 가기까지</title>
    <link href="https://jongmin92.github.io/2019/02/28/Java/java-with-non-blocking-io/"/>
    <id>https://jongmin92.github.io/2019/02/28/Java/java-with-non-blocking-io/</id>
    <published>2019-02-27T15:33:00.000Z</published>
    <updated>2019-03-09T04:50:29.893Z</updated>
    
    <content type="html"><![CDATA[<h1 id="소켓이란"><a href="#소켓이란" class="headerlink" title="소켓이란?"></a>소켓이란?</h1><p><code>소켓</code>은 네트워크 상에서 서버와 클라이언트 두개의 프로그램이 특정 포트를 통해 양방향 통신이 가능하도록 만들어주는 추상화된 장치입니다. <strong>메모리의 유저 공간에 존재하는 프로세스(서버, 클라이언트)는 커널 공간에 생성된 소켓을 통해 데이터를 송수신할 수 있습니다.</strong><br><img src="/images/post/2019-02-21/socket_1.png" alt="socket"></p><p>소켓은 아래와 같이 지역(로컬) IP 주소, Port 번호와 상대방의 IP 주소와 Port 번호, 그리고 <code>수신 버퍼</code>와 <code>송신 버퍼</code>가 존재합니다. <strong>서버와 클라이언트의 소켓이 서로 연결된 후, 데이터가 들어오면 수신 버퍼로 수신 데이터가 쓰이고, 반대로 데이터를 내 보낼 때는 송신 버퍼에 데이터가 쓰입니다.</strong><br><img src="/images/post/2019-02-21/socket_2.png" alt="socket"></p><h1 id="c언어로-간단한-서버-amp-클라이언트-구현"><a href="#C언어로-간단한-서버-amp-클라이언트-구현" class="headerlink" title="C언어로 간단한 서버 &amp; 클라이언트 구현"></a>C언어로 간단한 서버 &amp; 클라이언트 구현</h1><p>C언어를 이용해 linux와 window에서 간단하게 소켓을 이용해 echo server와 client를 만들어 보겠습니다.<br><strong>코드 한줄 한줄을 전부 해석하기 보다는 주석을 참고해 server와 client에서 어떤 순서로 소켓이 만들어지고 통신이 이루어지는지에 중점을 두어 보겠습니다.</strong></p><h2 id="linux"><a href="#linux" class="headerlink" title="linux"></a>linux</h2><p><a href="https://en.wikipedia.org/wiki/Everything_is_a_file" target="_blank" rel="noopener">“Everything is a File”</a>라는 말이 있습니다. linux에서는 소켓도 하나의 파일(File), 더 정확히는 <a href="https://en.wikipedia.org/wiki/File_descriptor" target="_blank" rel="noopener">파일 디스크립터(File descriptor)</a>로 생성되어 관리됩니다. 그러므로 저 수준 파일 입출력 함수를 기반으로 소켓 기반의 데이터 송수신이 가능합니다.</p><blockquote><p><code>파일 디스크립터(File descriptor)</code></p><ul><li>운영체제가 만든 파일을 구분하기 위한 일종의 숫자</li><li>저 수준 파일 입출력 함수는 입출력을 목적으로 파일 디스크립터를 요구한다.</li><li>저 수준 파일 입출력 함수에 소켓의 파일 디스크립터를 전달하면, 소켓을 대상으로 입출력을 진행한다.</li></ul></blockquote><h3 id="echo_serverc"><a href="#echo-server-c" class="headerlink" title="echo_server.c"></a>echo_server.c</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BUF_SIZE 1024</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">error_handling</span><span class="params">(<span class="keyword">char</span> *message)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 파일 디스크립터를 위한 변수</span></span><br><span class="line">    <span class="keyword">int</span> serv_sock, clnt_sock;</span><br><span class="line">    <span class="keyword">char</span> message[BUF_SIZE];</span><br><span class="line">    <span class="keyword">int</span> str_len, i;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">serv_adr</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">clnt_adr</span>;</span></span><br><span class="line">    <span class="keyword">socklen_t</span> clnt_adr_sz;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (argc != <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Usage : %s &lt;port&gt;\n"</span>, argv[<span class="number">0</span>]);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1. socket 하나를 생성한다.</span></span><br><span class="line">    serv_sock = socket(PF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (serv_sock == <span class="number">-1</span>)</span><br><span class="line">        error_handling(<span class="string">"socket() error"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memset</span>(&amp;serv_adr, <span class="number">0</span>, <span class="keyword">sizeof</span>(serv_adr));</span><br><span class="line">    serv_adr.sin_family = AF_INET;</span><br><span class="line">    serv_adr.sin_addr.s_addr = htonl(INADDR_ANY);</span><br><span class="line">    serv_adr.sin_port = htons(atoi(argv[<span class="number">1</span>]));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. socket에 IP와 Port 번호를 할당한다.</span></span><br><span class="line">    <span class="keyword">if</span> (bind(serv_sock, (struct sockaddr*)&amp;serv_adr, <span class="keyword">sizeof</span>(serv_adr)) == <span class="number">-1</span>)</span><br><span class="line">        error_handling(<span class="string">"bind() error"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. server socket(listen socket)을 통해 클라이언트의 접속 요청을 대기한다.</span></span><br><span class="line">    <span class="comment">//    5개의 수신 대기열(큐)을 생성한다.</span></span><br><span class="line">    <span class="keyword">if</span> (listen(serv_sock, <span class="number">5</span>) == <span class="number">-1</span>)</span><br><span class="line">        error_handling(<span class="string">"listen() error"</span>);</span><br><span class="line"></span><br><span class="line">    clnt_adr_sz=<span class="keyword">sizeof</span>(clnt_adr);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;<span class="number">5</span>; i++) &#123;</span><br><span class="line">        <span class="comment">// 4. 클라이언트 접속 요청을 수락한다. (클라이언트와 연결된 새로운 socket이 생성된다.)</span></span><br><span class="line">        clnt_sock = accept(serv_sock, (struct sockaddr*)&amp;clnt_adr, &amp;clnt_adr_sz);</span><br><span class="line">        <span class="keyword">if</span> (clnt_sock == <span class="number">-1</span>)</span><br><span class="line">            error_handling(<span class="string">"accept() error"</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"Connected client %d \n"</span>, i+<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5. 클라이언트와 연결된 socket을 통해 데이터를 송수신한다.</span></span><br><span class="line">        <span class="keyword">while</span>((str_len=read(clnt_sock, message, BUF_SIZE)) != <span class="number">0</span>)</span><br><span class="line">            write(clnt_sock, message, str_len);</span><br><span class="line"></span><br><span class="line">        close(clnt_sock);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    close(serv_sock);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">error_handling</span><span class="params">(<span class="keyword">char</span> *message)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">fputs</span>(message, <span class="built_in">stderr</span>);</span><br><span class="line">    fputc(<span class="string">'\n'</span>, <span class="built_in">stderr</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="echo_clientc"><a href="#echo-client-c" class="headerlink" title="echo_client.c"></a>echo_client.c</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BUF_SIZE 1024</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">error_handling</span><span class="params">(<span class="keyword">char</span> *message)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 파일 디스크립터를 위한 변수</span></span><br><span class="line">    <span class="keyword">int</span> sock;</span><br><span class="line">    <span class="keyword">char</span> message[BUF_SIZE];</span><br><span class="line">    <span class="keyword">int</span> str_len;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">serv_adr</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (argc != <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Usage : %s &lt;IP&gt; &lt;port&gt;\n"</span>, argv[<span class="number">0</span>]);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1. socket 하나를 생성한다.</span></span><br><span class="line">    sock = socket(PF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (sock == <span class="number">-1</span>)</span><br><span class="line">        error_handling(<span class="string">"socket() error"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memset</span>(&amp;serv_adr, <span class="number">0</span>, <span class="keyword">sizeof</span>(serv_adr));</span><br><span class="line">    serv_adr.sin_family = AF_INET;</span><br><span class="line">    serv_adr.sin_addr.s_addr = inet_addr(argv[<span class="number">1</span>]);</span><br><span class="line">    serv_adr.sin_port = htons(atoi(argv[<span class="number">2</span>]));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. socket을 이용해 server의 server socket(listen socket)에 연결을 요청한다.</span></span><br><span class="line">    <span class="keyword">if</span> (connect(sock, (struct sockaddr*)&amp;serv_adr, <span class="keyword">sizeof</span>(serv_adr)) == <span class="number">-1</span>)</span><br><span class="line">        error_handling(<span class="string">"connect() error!"</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"Connected..........."</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="built_in">fputs</span>(<span class="string">"Input message(Q to quit): "</span>, <span class="built_in">stdout</span>);</span><br><span class="line">        fgets(message, BUF_SIZE, <span class="built_in">stdin</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(message,<span class="string">"q\n"</span>) || !<span class="built_in">strcmp</span>(message,<span class="string">"Q\n"</span>))</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 연결된 socket을 통해 server로부터 데이터를 송수신한다.</span></span><br><span class="line">        write(sock, message, <span class="built_in">strlen</span>(message));</span><br><span class="line">        str_len = read(sock, message, BUF_SIZE<span class="number">-1</span>);</span><br><span class="line">        message[str_len] = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Message from server: %s"</span>, message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    close(sock);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">error_handling</span><span class="params">(<span class="keyword">char</span> *message)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">fputs</span>(message, <span class="built_in">stderr</span>);</span><br><span class="line">    fputc(<span class="string">'\n'</span>, <span class="built_in">stderr</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="결과-확인"><a href="#결과-확인" class="headerlink" title="결과 확인"></a>결과 확인</h3><p>gcc로 컴파일 후 실행하면 결과는 다음과 같습니다.<br><img src="/images/post/2019-02-21/echo_result.gif" alt="linux_simple_socket_result"></p><h2 id="window"><a href="#window" class="headerlink" title="window"></a>window</h2><p>window는 linux와 달리 파일이 아닌 별도의 소켓 구조체가 존재합니다. 별도의 소켓 구조체를 이용한 함수를 기반으로 소켓 기반의 데이터 송수신이 가능합니다.<br>window 코드의 결과는 위의 linux 코드의 결과와 같으므로 생략합니다.</p><h3 id="echo_server_winc"><a href="#echo-server-win-c" class="headerlink" title="echo_server_win.c"></a>echo_server_win.c</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="comment">// window socket</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;winsock2.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BUF_SIZE 1024</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ErrorHandling</span><span class="params">(<span class="keyword">char</span> *message)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line">    WSADATA wsaData;</span><br><span class="line">    SOCKET hServSock, hClntSock;</span><br><span class="line">    <span class="keyword">char</span> message[BUF_SIZE];</span><br><span class="line">    <span class="keyword">int</span> strLen, i;</span><br><span class="line"></span><br><span class="line">    SOCKADDR_IN servAdr, clntAdr;</span><br><span class="line">    <span class="keyword">int</span> clntAdrSize;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (argc != <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Usage : %s &lt;port&gt;\n"</span>, argv[<span class="number">0</span>]);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (WSAStartup(MAKEWORD(<span class="number">2</span>, <span class="number">2</span>), &amp;wsaData) != <span class="number">0</span>)</span><br><span class="line">        ErrorHandling(<span class="string">"WSAStartup() error!"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1. socket 하나를 생성한다.</span></span><br><span class="line">    hServSock = socket(PF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (hServSock == INVALID_SOCKET)</span><br><span class="line">        ErrorHandling(<span class="string">"socket() error"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memset</span>(&amp;servAdr, <span class="number">0</span>, <span class="keyword">sizeof</span>(servAdr));</span><br><span class="line">    servAdr.sin_family = AF_INET;</span><br><span class="line">    servAdr.sin_addr.s_addr = htonl(INADDR_ANY);</span><br><span class="line">    servAdr.sin_port = htons(atoi(argv[<span class="number">1</span>]));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 생성한 socket을 server socket(listen socket)으로 등록한다.</span></span><br><span class="line">    <span class="keyword">if</span> (bind(hServSock, (SOCKADDR*)&amp;servAdr, <span class="keyword">sizeof</span>(servAdr)) == SOCKET_ERROR)</span><br><span class="line">        ErrorHandling(<span class="string">"bind() error"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. server socket을 통해 클라이언트의 접속 요청을 확인한다.</span></span><br><span class="line">    <span class="keyword">if</span> (listen(hServSock, <span class="number">5</span>) == SOCKET_ERROR)</span><br><span class="line">        ErrorHandling(<span class="string">"listen() error"</span>);</span><br><span class="line"></span><br><span class="line">    clntAdrSize=<span class="keyword">sizeof</span>(clntAdr);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;<span class="number">5</span>; i++) &#123;</span><br><span class="line">        <span class="comment">// 4. 클라이언트 접속 요청 대기 및 허락 (클라이언트와 연결된 새로운 socket이 생성된다.)</span></span><br><span class="line">        hClntSock = accept(hServSock, (SOCKADDR*)&amp;clntAdr, &amp;clntAdrSize);</span><br><span class="line">        <span class="keyword">if</span> (hClntSock == <span class="number">-1</span>)</span><br><span class="line">            ErrorHandling(<span class="string">"accept() error"</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"Connected client %d \n"</span>, i+<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5. 클라이언트와 연결된 socket을 통해 데이터를 송수신한다.</span></span><br><span class="line">        <span class="keyword">while</span>((strLen=recv(hClntSock, message, BUF_SIZE, <span class="number">0</span>)) != <span class="number">0</span>)</span><br><span class="line">            send(hClntSock, message, strLen, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        closesocket(hClntSock);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    closesocket(hServSock);</span><br><span class="line">    WSACleanup();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ErrorHandling</span><span class="params">(<span class="keyword">char</span> *message)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">fputs</span>(message, <span class="built_in">stderr</span>);</span><br><span class="line">    fputc(<span class="string">'\n'</span>, <span class="built_in">stderr</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="echo_client_winc"><a href="#echo-client-win-c" class="headerlink" title="echo_client_win.c"></a>echo_client_win.c</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="comment">// window socket</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;winsock2.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BUF_SIZE 1024</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ErrorHandling</span><span class="params">(<span class="keyword">char</span> *message)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line">    WSADATA wsaData;</span><br><span class="line">    SOCKET hSocket;</span><br><span class="line">    <span class="keyword">char</span> message[BUF_SIZE];</span><br><span class="line">    <span class="keyword">int</span> strLen;</span><br><span class="line">    SOCKADDR_IN servAdr;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (argc != <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Usage : %s &lt;IP&gt; &lt;port&gt;\n"</span>, argv[<span class="number">0</span>]);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (WSAStartup(MAKEWORD(<span class="number">2</span>, <span class="number">2</span>), &amp;wsaData) != <span class="number">0</span>)</span><br><span class="line">        ErrorHandling(<span class="string">"WSAStartup() error!"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1. socket 하나를 생성한다.</span></span><br><span class="line">    hSocket = socket(PF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (hSocket == INVALID_SOCKET)</span><br><span class="line">        ErrorHandling(<span class="string">"socket() error"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memset</span>(&amp;servAdr, <span class="number">0</span>, <span class="keyword">sizeof</span>(servAdr));</span><br><span class="line">    servAdr.sin_family = AF_INET;</span><br><span class="line">    servAdr.sin_addr.s_addr = inet_addr(argv[<span class="number">1</span>]);</span><br><span class="line">    servAdr.sin_port = htons(atoi(argv[<span class="number">2</span>]));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. socket을 이용해 server의 server socket(listen socket)에 연결을 요청한다.</span></span><br><span class="line">    <span class="keyword">if</span> (connect(hSocket, (SOCKADDR*)&amp;servAdr, <span class="keyword">sizeof</span>(servAdr)) == SOCKET_ERROR)</span><br><span class="line">        ErrorHandling(<span class="string">"connect() error!"</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"Connected..........."</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="built_in">fputs</span>(<span class="string">"Input message(Q to quit): "</span>, <span class="built_in">stdout</span>);</span><br><span class="line">        fgets(message, BUF_SIZE, <span class="built_in">stdin</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(message,<span class="string">"q\n"</span>) || !<span class="built_in">strcmp</span>(message,<span class="string">"Q\n"</span>))</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 연결된 socket을 통해 server로부터 데이터를 송수신한다.</span></span><br><span class="line">        send(hSocket, message, <span class="built_in">strlen</span>(message), <span class="number">0</span>);</span><br><span class="line">        strLen = recv(hSocket, message, BUF_SIZE<span class="number">-1</span>, <span class="number">0</span>);</span><br><span class="line">        message[strLen] = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Message from server: %s"</span>, message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    closesocket(hSocket);</span><br><span class="line">    WSACleanup();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ErrorHandling</span><span class="params">(<span class="keyword">char</span> *message)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">fputs</span>(message, <span class="built_in">stderr</span>);</span><br><span class="line">    fputc(<span class="string">'\n'</span>, <span class="built_in">stderr</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="고찰"><a href="#고찰" class="headerlink" title="고찰"></a>고찰</h2><p>linux와 window의 서버 &amp; 클라이언트 소켓 생성과 연결 과정은 다음과 같습니다.<br><img src="/images/post/2019-02-21/server_client_socket.png" alt="server_client_socket"></p><ul><li>서버<ul><li>클라이언트로부터의 연결요청도 일종의 데이터 전송입니다. 따라서 연결 요청을 받아들이기 위해서도 하나의 소켓이 필요하고, 이 소켓을 가리켜 <code>서버소켓</code> 또는 <code>리스닝 소켓</code>이라고 합니다. listen 함수의 호출은 소켓을 리스닝 소켓으로 만듭니다.</li><li>accept 함수의 결과로 서버소켓을 통해 클라이언트로부터의 연결요청을 받으면, 연결요청 정보를 참조하여 <strong>클라이언트 소켓과의 통신을 위한 별도의 소켓을 추가로 하나 더 생성합니다. 그리고 이렇게 생성된 소켓을 대상으로 데이터의 송수신이 진행됩니다.</strong></li></ul></li><li>클라이언트<ul><li>소켓을 생성하고 연결 요청을 위해서 connect 함수를 호출하는 것이 전부입니다.</li><li>서버의 listen 함수호출 이후에야(서버소켓이 준비된 이후) connect 함수 호출이 유효합니다.</li></ul></li></ul><h3 id="문제점"><a href="#문제점" class="headerlink" title="문제점"></a>문제점</h3><p><img src="/images/post/2019-02-21/echo_result_problem.gif" alt="linux_simple_socket_result"><br>위 예제의 경우 반복적(Iterable)으로 accept 함수를 호출하면, 계속해서 클라이언트의 연결요청을 수락할 수 있습니다. 그러나, 동시에 둘 이상의 클라이언트에게 서비스를 제공할 수 있는 상태는 아닙니다. (처음 소켓 연결을 맺은 클라이언트가 종료하기 전까지는 다른 클라이언트의 연결은 listen 큐에 들어가 대기해야합니다.)</p><p><strong>이 문제를 해결하기 위해 둘 이상의 클라이언트들이 동시에 접속해 서버로부터 서비스를 제공받을 수 있는 여러 <code>다중 접속 서버</code>의 구현 방법들에 대해 알아보겠습니다.</strong></p><blockquote><p>다중 접속 서버 구현 방법</p><ul><li><strong>멀티프로세스 기반 서버</strong> : 다수의 프로세스를 생성하는 방식으로 서비스를 제공한다.</li><li><strong>멀티스레드 기반 서버</strong> : 클라이언트의 수만큼 스레드를 생성하는 방식으로 서비스를 제공한다.</li><li><strong>멀티플렉싱 기반 서버</strong> : 입출력 대상을 묶어서 관리하는 방식으로 서비스를 제공한다.</li></ul></blockquote><h1 id="멀티프로세스-기반의-다중-접속-서버"><a href="#멀티프로세스-기반의-다중-접속-서버" class="headerlink" title="멀티프로세스 기반의 다중 접속 서버"></a>멀티프로세스 기반의 다중 접속 서버</h1><p><strong><code>멀티프로세스 기반의 다중 접속 서버</code>는 다수의 프로세스를 생성하는 방식으로 서비스를 제공합니다.</strong><br><img src="/images/post/2019-02-21/multi_process_server.png" alt="multi_process_server"></p><ol><li>부모 프로세스는 <code>리스닝 소켓</code>으로 accept 함수 호출을 통해서 연결요청을 수락합니다. </li><li>이때 얻게 되는 소켓의 파일 디스크립터(<code>클라이언트와 연결된 연결 소켓</code>)를 자식 프로세스를 생성해 넘겨줍니다.</li><li>자식 프로세스는 전달받은 파일 디스크립터를 바탕으로 서비스를 제공합니다.</li></ol><p>핵심은 연결이 하나 생성될 때마다 프로세스를 생성해서 해당 클라이언트에 대해 서비스를 제공하는 것입니다.</p><h2 id="echo_multi_process_serverc"><a href="#echo-multi-process-server-c" class="headerlink" title="echo_multi_process_server.c"></a>echo_multi_process_server.c</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BUF_SIZE 30</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">error_handling</span><span class="params">(<span class="keyword">char</span> *message)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read_childproc</span><span class="params">(<span class="keyword">int</span> sig)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> serv_sock, clnt_sock;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">serv_adr</span>, <span class="title">clnt_adr</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">pid_t</span> pid;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sigaction</span> <span class="title">act</span>;</span></span><br><span class="line">    <span class="keyword">socklen_t</span> adr_sz;</span><br><span class="line">    <span class="keyword">int</span> str_len, state;</span><br><span class="line">    <span class="keyword">char</span> buf[BUF_SIZE];</span><br><span class="line">    <span class="keyword">if</span> (argc != <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Usage : %s &lt;port&gt;\n"</span>, argv[<span class="number">0</span>]);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    act.sa_handler = read_childproc;</span><br><span class="line">    sigemptyset(&amp;act.sa_mask);</span><br><span class="line">    act.sa_flags = <span class="number">0</span>;</span><br><span class="line">    state = sigaction(SIGCHLD, &amp;act, <span class="number">0</span>);</span><br><span class="line">    <span class="comment">// 1. socket 하나를 생성한다.</span></span><br><span class="line">    serv_sock = socket(PF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">memset</span>(&amp;serv_adr, <span class="number">0</span>, <span class="keyword">sizeof</span>(serv_adr));</span><br><span class="line">    serv_adr.sin_family = AF_INET;</span><br><span class="line">    serv_adr.sin_addr.s_addr = htonl(INADDR_ANY);</span><br><span class="line">    serv_adr.sin_port = htons(atoi(argv[<span class="number">1</span>]));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. socket에 IP와 Port 번호를 할당한다.</span></span><br><span class="line">    <span class="keyword">if</span> (bind(serv_sock, (struct sockaddr*) &amp;serv_adr, <span class="keyword">sizeof</span>(serv_adr)) == <span class="number">-1</span>)</span><br><span class="line">        error_handling(<span class="string">"bind() error"</span>);</span><br><span class="line">    <span class="comment">// 3. 생성한 socket을 server socket(listen socket)으로 등록한다.</span></span><br><span class="line">    <span class="keyword">if</span> (listen(serv_sock, <span class="number">5</span>) == <span class="number">-1</span>)</span><br><span class="line">        error_handling(<span class="string">"listen() error"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">        adr_sz = <span class="keyword">sizeof</span>(clnt_adr);</span><br><span class="line">        <span class="comment">// 4. 부모 프로세스는 리스닝 소켓으로 accept 함수 호출을 통해서 연결요청을 수락한다.</span></span><br><span class="line">        clnt_sock = accept(serv_sock, (struct sockaddr*)&amp;clnt_adr, &amp;adr_sz);</span><br><span class="line">        <span class="keyword">if</span> (clnt_sock == <span class="number">-1</span>)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">"new client connected..."</span>);</span><br><span class="line">        <span class="comment">// 5. 이때 얻게 되는 소켓의 파일 디스크립터(클라이언트와 연결된 연결 소켓)를 자식 프로세스를 생성해 넘겨준다.</span></span><br><span class="line">        pid = fork();</span><br><span class="line">        <span class="keyword">if</span> (pid == <span class="number">-1</span>) &#123;</span><br><span class="line">            close(clnt_sock);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (pid == <span class="number">0</span>) &#123;</span><br><span class="line">            close(serv_sock);</span><br><span class="line">            <span class="comment">// 6. 자식 프로세스는 전달받은 파일 디스크립터를 바탕으로 서비스를 제공한다.</span></span><br><span class="line">            <span class="keyword">while</span>((str_len = read(clnt_sock, buf, BUF_SIZE)) != <span class="number">0</span>)</span><br><span class="line">                write(clnt_sock, buf, str_len);</span><br><span class="line"></span><br><span class="line">            close(clnt_sock);</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">"client disconnected..."</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            close(clnt_sock);</span><br><span class="line">    &#125;</span><br><span class="line">    close(serv_sock);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read_childproc</span><span class="params">(<span class="keyword">int</span> sig)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">pid_t</span> pid;</span><br><span class="line">    <span class="keyword">int</span> status;</span><br><span class="line">    pid = waitpid(<span class="number">-1</span>, &amp;status, WNOHANG);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"removed proc id: %d \n"</span>, pid);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">error_handling</span><span class="params">(<span class="keyword">char</span> *message)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">fputs</span>(message, <span class="built_in">stderr</span>);</span><br><span class="line">    fputc(<span class="string">'\n'</span>, <span class="built_in">stderr</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="결과-확인"><a href="#결과-확인-1" class="headerlink" title="결과 확인"></a>결과 확인</h2><p><img src="/images/post/2019-02-21/echo_result_multi_process.gif" alt="echo_result_multi_process"><br>위에서 Iterable하게 구현했을때 발생했던 문제를 각 클라이언트 요청마다 별도의 프로세스를 생성함으로써 문제를 해결한 것을 확인할 수 있습니다.</p><h2 id="고찰"><a href="#고찰-1" class="headerlink" title="고찰"></a>고찰</h2><ul><li>장점<ul><li>프로그램 흐름이 단순하기 때문에 이해하기 쉽습니다.</li><li>안정적인 동작이 가능합니다. 운영체제에서 프로세스는 서로 독립된 실행 객체로 존재합니다. 서로 독립된 메모리 공간을 갖고 서로 다른 프로세스끼리 서로 영향을 미치지 않고 독립적으로 수행이 가능합니다.</li></ul></li><li>단점<ul><li>프로세스 복사에 따른 성능 문제가 있습니다.</li><li>병렬 처리해야 하는 만큼의 프로세스를 생성해야 합니다.</li><li>fork에 의해 자식 프로세스가 생성될 경우, 부모 프로세스의 자원이 복사됩니다. (코드, 소켓을 포함한 모든 열린 파일들(파일 디스크립터)) 부모 프로세스로부터 accept되어 생성된 하나의 소켓에 대해 부모 프로세스와 자식 프로세스 모두에서 한 소켓에 대한 파일 디스크립터가 존재합니다. 따라서 두 파일 디스크립터를 모두 종료해야 해당 소켓을 제거할 수 있습니다.</li><li>서로 다른 독립적인 메모리 공간을 갖기 때문에 프로세스간 정보 교환이 어렵다.</li></ul></li></ul><p>위의 단점들은 각 클라이언트의 요청마다 프로세스가 아닌 스레드를 생성함으로써 해결할 수 있습니다.<br>다음으로 멀티프로세스 기반의 다중 접속 서버의 단점을 개선할 수 있는 멀티스레드 기반의 다중 접속 서버에 대해 알아보겠습니다.</p><h1 id="멀티스레드-기반의-다중-접속-서버"><a href="#멀티스레드-기반의-다중-접속-서버" class="headerlink" title="멀티스레드 기반의 다중 접속 서버"></a>멀티스레드 기반의 다중 접속 서버</h1><p><strong><code>멀티스레드 기반의 다중 접속 서버</code>는 다수의 스레드를 생성하는 방식으로 서비스를 제공합니다.</strong><br><img src="/images/post/2019-02-21/multi_thread_server.png" alt="multi_thread_server"></p><ol><li>메인 스레드는 <code>리스닝 소켓</code>으로 accept 함수 호출을 통해서 연결요청을 수락합니다. </li><li>이때 얻게 되는 소켓의 파일 디스크립터(<code>클라이언트와 연결된 연결 소켓</code>)를 별도의 워커 스레드를 생성해 넘겨줍니다.</li><li>워커 스레드는 전달받은 파일 디스크립터를 바탕으로 서비스를 제공합니다.</li></ol><p>핵심은 연결이 하나 생성될 때마다 프로세스가 아닌 스레드를 생성해서 해당 클라이언트에 대해 서비스를 제공하는 것입니다.</p><h2 id="echo_multi_thread_serverc"><a href="#echo-multi-thread-server-c" class="headerlink" title="echo_multi_thread_server.c"></a>echo_multi_thread_server.c</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BUF_SIZE 30</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> * <span class="title">handle_clnt</span><span class="params">(<span class="keyword">void</span> * arg)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">error_handling</span><span class="params">(<span class="keyword">char</span> * msg)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> serv_sock, clnt_sock;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">serv_adr</span>, <span class="title">clnt_adr</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">pthread_t</span> t_id;</span><br><span class="line">    <span class="keyword">socklen_t</span> adr_sz;</span><br><span class="line">    <span class="keyword">int</span> str_len, state;</span><br><span class="line">    <span class="keyword">char</span> buf[BUF_SIZE];</span><br><span class="line">    <span class="keyword">if</span> (argc != <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Usage : %s &lt;port&gt;\n"</span>, argv[<span class="number">0</span>]);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1. socket 하나를 생성한다.</span></span><br><span class="line">    serv_sock = socket(PF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">memset</span>(&amp;serv_adr, <span class="number">0</span>, <span class="keyword">sizeof</span>(serv_adr));</span><br><span class="line">    serv_adr.sin_family = AF_INET;</span><br><span class="line">    serv_adr.sin_addr.s_addr = htonl(INADDR_ANY);</span><br><span class="line">    serv_adr.sin_port = htons(atoi(argv[<span class="number">1</span>]));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. socket에 IP와 Port 번호를 할당한다.</span></span><br><span class="line">    <span class="keyword">if</span> (bind(serv_sock, (struct sockaddr*) &amp;serv_adr, <span class="keyword">sizeof</span>(serv_adr)) == <span class="number">-1</span>)</span><br><span class="line">        error_handling(<span class="string">"bind() error"</span>);</span><br><span class="line">    <span class="comment">// 3. 생성한 socket을 server socket(listen socket)으로 등록한다.</span></span><br><span class="line">    <span class="keyword">if</span> (listen(serv_sock, <span class="number">5</span>) == <span class="number">-1</span>)</span><br><span class="line">        error_handling(<span class="string">"listen() error"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">        adr_sz = <span class="keyword">sizeof</span>(clnt_adr);</span><br><span class="line">        <span class="comment">// 4. 메인 스레드는 리스닝 소켓으로 accept 함수 호출을 통해서 연결요청을 수락한다.</span></span><br><span class="line">        clnt_sock = accept(serv_sock, (struct sockaddr*)&amp;clnt_adr, &amp;adr_sz);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (clnt_sock == <span class="number">-1</span>)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"new client connected..."</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5. 클라이언트와 연결된 소켓의 파일 디스크립터를 워커 스레드를 생성해 넘겨준다.</span></span><br><span class="line">        pthread_create(&amp;t_id, <span class="literal">NULL</span>, handle_clnt, (<span class="keyword">void</span>*)&amp;clnt_sock);</span><br><span class="line">        pthread_detach(t_id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    close(serv_sock);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> * <span class="title">handle_clnt</span><span class="params">(<span class="keyword">void</span> * arg)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> clnt_sock=*((<span class="keyword">int</span>*)arg);</span><br><span class="line">    <span class="keyword">int</span> str_len=<span class="number">0</span>, i;</span><br><span class="line">    <span class="keyword">char</span> buf[BUF_SIZE];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 6. 워커 스레드는 전달받은 파일 디스크립터를 바탕으로 서비스를 제공한다.</span></span><br><span class="line">    <span class="keyword">while</span>((str_len = read(clnt_sock, buf, BUF_SIZE)) != <span class="number">0</span>)</span><br><span class="line">        write(clnt_sock, buf, str_len);</span><br><span class="line"></span><br><span class="line">    close(clnt_sock);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">error_handling</span><span class="params">(<span class="keyword">char</span> * msg)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">fputs</span>(msg, <span class="built_in">stderr</span>);</span><br><span class="line">    fputc(<span class="string">'\n'</span>, <span class="built_in">stderr</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="결과-확인"><a href="#결과-확인-2" class="headerlink" title="결과 확인"></a>결과 확인</h2><p><img src="/images/post/2019-02-21/echo_result_multi_thread.gif" alt="echo_result_multi_thread"><br>처음 Iterable하게 구현했을때 발생했던 문제를 각 클라이언트 요청마다 별도의 스레드를 생성함으로써 문제를 해결했으며, 클라이언트의 요청마다 각 프로세스를 할당해서 해결한 방법보다 스레드를 생성해 할당함으로써 리소스 소모를 줄였습니다.</p><h2 id="고찰"><a href="#고찰-2" class="headerlink" title="고찰"></a>고찰</h2><ul><li>장점<ul><li>프로세스 복사에 따른 비용보다 스레드 생성에 대한 비용이 적다.</li><li>스레드간 서로 공유하는 메모리를 갖기 때문에, 스레드간 정보 교환이 쉽다.</li></ul></li><li>단점<ul><li>하나의 프로세스 내의 다수의 스레드가 존재하기 때문에 하나의 스레드에서 문제가 생긴다면 프로세스에 영향을 미쳐 나머지 다수의 스레드에도 영향을 끼칠 수 있다.</li></ul></li></ul><p>각 클라이언트 요청마다 별도의 스레드를 생성함으로써 프로세스를 생성하던 방법보다 리소스의 비용을 줄일 수 있었고, 스레드들이 서로 공유하는 메모리를 가질 수 있는 환경이 되었습니다.<br>그러나 <strong><code>I/O 멀티플렉싱(multiplexing)</code> 기법을 사용한다면, 각 클라이언트 마다 별도의 스레드를 생성하는 것이 아닌 하나의 스레드에서 다수의 클라이언트에 연결된 소켓(파일 디스크립터)을 괸리하고 소켓에 이벤트(read/write)가 발생할 경우에만 별도의 스레드를 만들어 해당 이벤트를 처리하도록 구현할 수 있습니다.</strong></p><h1 id="멀티플렉싱-기반의-다중-접속-서버"><a href="#멀티플렉싱-기반의-다중-접속-서버" class="headerlink" title="멀티플렉싱 기반의 다중 접속 서버"></a>멀티플렉싱 기반의 다중 접속 서버</h1><p><code>입출력 다중화</code>란 하나의 프로세스 혹은 스레드에서 입력과 출력을 모두 다룰 수 있는 기술을 말합니다. 커널(kernel)에서는 <strong>하나의 스레드가 여러 개의 소켓(파일)을 핸들링 할 수 있는 <code>select</code>, <code>poll</code>, <code>epoll</code>과 같은 시스템 콜(system call)을 제공하고 있습니다.</strong></p><p>한개의 프로세스 혹은 스레드에서 한개의 클라이언트에 대한 입출력만 처리할 수 있었던 이유는 입출력 함수가 봉쇄(block)되었기 때문에, 입출력 데이터가 준비될때까지 무한정 봉쇄되어 여러 클라이언트의 입출력을 처리할 수 없었기 때문입니다.</p><p><strong>그러나 I/O 멀티플렉싱 기법을 사용하면 입출력 다중화에서도 입출력 함수는 여전히 봉쇄로 작동하지만, 입출력 함수를 호출하기전에 어떤 파일에서 입출력이 준비가 되었는지 확인할 수가 있습니다.</strong></p><blockquote><p><strong>봉쇄 (block)</strong></p><p>봉쇄를 이해하기 위해 먼저 두가지 짚고 넘어가야할 사항이 있습니다.</p><ol><li>애플리케이션에서 I/O 작업을 하는 경우, 스레드는 데이터 준비가 완료될 때까지 대기합니다. 예를 들어 소켓을 통해 read(recvfrom)를 수행하는 경우 데이터가 네트워크를 통해 도착하는 것을 기다립니다. 패킷이 네트워크를 통해 도착하면 커널 내의 버퍼에 복사됩니다. (처음에 커널 공간에 생성된 소켓의 구조에서 송신 버퍼와 수신 버퍼가 있는 것을 보았습니다.)</li><li>커널 내의 버퍼에 복사된 데이터를 애플리케이션에서 사용하기 위해서는 <code>커널 버퍼(kernel space)</code>에서 <code>유저 버퍼(user space)</code>로 복사 후 이용해야 합니다. 애플리케이션은 유버 모드에서 유저 버퍼에만 접근이 가능하기 때문입니다.</li></ol><p><strong>Blocking I/O Model</strong><br><img src="/images/post/2019-02-21/blocking_io_model.png" alt="blocking_io_model"><br>프로세스(스레드)는 하나의 소켓에 대해 recvfrom을 호출하고 데이터가 kernel space 도착해 user space의 프로세스 버퍼에 복사 될 때까지 시스템 호출이 반환되지 않습니다. <strong>즉 recvfrom은 kernel space에 데이터가 도착하길 기다리는것 부터 시작됩니다.</strong> 프로세스는 recvfrom을 호출할 때부터 반환 할 때까지 전체 프로세스가 봉쇄됩니다.</p></blockquote><p><strong>I/O Multiplexing Model</strong><br><img src="/images/post/2019-02-21/multiplexing_io_model.png" alt="multiplexing_io_model"><br>멀티플렉싱 모델에서는 select 함수를 호출해, 여러개의 소켓들 중 recvfrom이 가능한 소켓이 생길 때까지 대기합니다. select의 결과로 recvfrom을 호출할 수 있는 소켓의 목록이 반환되면, 해당 소켓들에 대해 recvfrom을 호출합니다.</p><p>봉쇄 모델(Blocking I/O model)에서는 하나의 프로세스(스레드)에서 하나의 소켓(파일 디스크립터)에 대해 recvfrom을 호출해 데이터가 kernel space에 도착했는지 확인하고 현재 읽을 수 있는 데이터가 없다면 봉쇄되어 대기했다면, <strong>멀티플렉싱 모델(I/O Multiplexing Model)에서는 하나 이상의 소켓(파일 디스크립터)이 준비 될 때까지 대기할 수 있습니다.</strong></p><h2 id="select"><a href="#select" class="headerlink" title="select"></a>select</h2><p><strong><code>select</code> 방식은 이벤트(입력|출력|에러) 별로 감시할 파일들을 fd_set 이라는 파일 상태 테이블(fd 비트 배열)에 등록하고, 등록된 파일(파일 디스크립터)에 어떠한 이벤트가 발생했을 경우 fd_set을 확인하는 방식으로 동작합니다.</strong><br><img src="/images/post/2019-02-21/select_model.png" alt="select_model"><br>예를 들어 위와 같이 6개의 파일을 다루어야 한다고 했을 때, 6개의 파일에 대해 입출력 데이터가 준비될 때까지 이벤트를 기다리는 파일 상태 테이블을 준비합니다. 그 후 6개의 파일 중 입출력이 준비된 파일에 대해서 이벤트가 발생하면 이벤트가 발생한 파일 디스크립터의 수를 반환합니다. 이후 이벤트가 준비된 파일에 대해 입출력을 수행하는데 이미 데이터가 준비된 파일에 대해 입출력을 수행하기 때문에 봉쇄가 발생하지 않을 것이라는게 보장됩니다.</p><blockquote><p>int select(int nfds, fd_set <em>readfds, fd_set </em>writefds, fd_set <em>exceptfds, struct timeval </em>timeout)</p><ul><li>nfds: 검사 대상이 되는 파일 디스크립터의 수</li><li>readfs: 읽기 이벤트를 검사할 파일 디스크립터의 목록</li><li>writefds: 쓰기 이벤트를 검사할 파일 디스크립터의 목록</li><li>exceptfds: 예외 이벤트를 검사할 파일 디스크립터의 목록</li><li>timeout: 이벤트를 기다릴 시간 제한</li><li>반환 값: <strong>이벤트가 발생한 파일의 갯수</strong></li></ul><p>반환 값이 이벤트가 발생한 파일의 디스크립터 목록이 아닌 파일의 갯수임에 주의해야합니다. </p></blockquote><h3 id="echo_select_serverc"><a href="#echo-select-server-c" class="headerlink" title="echo_select_server.c"></a>echo_select_server.c</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/select.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BUF_SIZE 100</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">error_handling</span><span class="params">(<span class="keyword">char</span> *buf)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> serv_sock, clnt_sock;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">serv_adr</span>, <span class="title">clnt_adr</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">timeval</span> <span class="title">timeout</span>;</span></span><br><span class="line">    <span class="comment">// 파일 상태 테이블 선언</span></span><br><span class="line">    fd_set reads, cpy_reads;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">socklen_t</span> adr_sz;</span><br><span class="line">    <span class="keyword">int</span> fd_max, str_len, fd_num, i;</span><br><span class="line">    <span class="keyword">char</span> buf[BUF_SIZE];</span><br><span class="line">    <span class="keyword">if</span> (argc != <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Usage : %s &lt;port&gt;\n"</span>, argv[<span class="number">0</span>]);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    serv_sock = socket(PF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">memset</span>(&amp;serv_adr, <span class="number">0</span>, <span class="keyword">sizeof</span>(serv_adr));</span><br><span class="line">    serv_adr.sin_family = AF_INET;</span><br><span class="line">    serv_adr.sin_addr.s_addr = htonl(INADDR_ANY);</span><br><span class="line">    serv_adr.sin_port = htons(atoi(argv[<span class="number">1</span>]));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (bind(serv_sock, (struct sockaddr*) &amp;serv_adr, <span class="keyword">sizeof</span>(serv_adr)) == <span class="number">-1</span>)</span><br><span class="line">        error_handling(<span class="string">"bind() error"</span>);</span><br><span class="line">    <span class="keyword">if</span> (listen(serv_sock, <span class="number">5</span>) == <span class="number">-1</span>)</span><br><span class="line">        error_handling(<span class="string">"listen() error"</span>);</span><br><span class="line"></span><br><span class="line">    FD_ZERO(&amp;reads); <span class="comment">// fd_set 테이블을 초기화한다.</span></span><br><span class="line">    FD_SET(serv_sock, &amp;reads); <span class="comment">// 서버 소켓(리스닝 소켓)의 이벤트 검사를 위해 fd_set 테이블에 추가한다.</span></span><br><span class="line">    fd_max = serv_sock;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">        cpy_reads = reads;</span><br><span class="line">        timeout.tv_sec = <span class="number">5</span>;</span><br><span class="line">        timeout.tv_usec = <span class="number">5000</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// result</span></span><br><span class="line">        <span class="comment">// -1: 오류 발생</span></span><br><span class="line">        <span class="comment">// 0: 타임 아웃</span></span><br><span class="line">        <span class="comment">// 1 이상 : 등록된 파일 디스크립터에 해당 이벤트가 발생하면 이벤트가 발생한 파일 디스크립터의 수를 반환한다.</span></span><br><span class="line">        <span class="keyword">if</span> ((fd_num = select(fd_max+<span class="number">1</span>, &amp;cpy_reads, <span class="number">0</span>, <span class="number">0</span>, &amp;timeout)) == <span class="number">-1</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (fd_num == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;fd_max+<span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (FD_ISSET(i, &amp;cpy_reads)) &#123; <span class="comment">// fd_set 테이블을 검사한다.</span></span><br><span class="line">                <span class="comment">// 서버 소켓(리스닝 소켓)에 이벤트(연결 요청) 발생</span></span><br><span class="line">                <span class="keyword">if</span> (i == serv_sock) &#123;     <span class="comment">// connection request!</span></span><br><span class="line">                    adr_sz = <span class="keyword">sizeof</span>(clnt_adr);</span><br><span class="line">                    clnt_sock= accept(serv_sock, (struct sockaddr*)&amp;clnt_adr, &amp;adr_sz);</span><br><span class="line">                    FD_SET(clnt_sock, &amp;reads); <span class="comment">// fd_set 테이블에 클라이언트 소켓 디스크립터를 추가한다.</span></span><br><span class="line">                    <span class="keyword">if</span> (fd_max &lt; clnt_sock)</span><br><span class="line">                        fd_max = clnt_sock;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">"connected client: %d \n"</span>, clnt_sock);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 클라이언트와 연결된 소켓에 이벤트 발생</span></span><br><span class="line">                <span class="keyword">else</span> &#123;   <span class="comment">// read message!</span></span><br><span class="line">                    str_len = read(i, buf, BUF_SIZE);</span><br><span class="line">                    <span class="keyword">if</span> (str_len == <span class="number">0</span>) &#123;   <span class="comment">// close request!</span></span><br><span class="line">                        FD_CLR(i, &amp;reads); <span class="comment">// fd_set 테이블에서 파일 디스크립터를 삭제한다.</span></span><br><span class="line">                        close(i);</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">"closed client: %d \n"</span>, i);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        write(i, buf, str_len);    <span class="comment">// echo!</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    close(serv_sock);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">error_handling</span><span class="params">(<span class="keyword">char</span> *buf)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">fputs</span>(buf, <span class="built_in">stderr</span>);</span><br><span class="line">    fputc(<span class="string">'\n'</span>, <span class="built_in">stderr</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="결과-확인"><a href="#결과-확인-3" class="headerlink" title="결과 확인"></a>결과 확인</h3><p><img src="/images/post/2019-02-21/echo_result_select.gif" alt="echo_result_select"></p><h3 id="고찰"><a href="#고찰-3" class="headerlink" title="고찰"></a>고찰</h3><ul><li>장점<ul><li>단일 프로세스(스레드)에서 여러 파일의 입출력 처리가 가능합니다.</li><li>지원 하는 OS가 많아 이식성이 좋습니다. (POSIX 표준)</li></ul></li><li>단점<ul><li>커널에 의해서 완성되는 기능이 아닌, 순수하게 함수에 의해 완성되는 기능이다. </li><li>select 함수의 호출을 통해서 전달된 정보는 커널에 등록되지 않은 것이며, 그래서 select 함수를 호출할 때마다 매번 관련 정보를 전달해야 합니다. </li><li>select 함수의 호출 결과가 이벤트가 발생한 파일 디스크립터의 개수이기 때문에 어떤 파일 디스크립터에서 이벤트가 발생했는지 확인하기 위해서는 fd_set 테이블 전체를 검사해야 합니다. (속도가 느립니다)</li><li>검사할 수 있는 fd 개수에 제한이 있습니다. (최대 1024개)</li><li>select 호출 때마다 데이터를 복사해야합니다. (select 함수를 호출한 후 이벤트를 처리할 때 fd_set 테이블 변경이 필요하기 때문에 미리 복사가 필요합니다)</li></ul></li></ul><blockquote><p><a href="https://ko.wikipedia.org/wiki/POSIX" target="_blank" rel="noopener">POSIX란?</a></p><p>POSIX(Portable Operating System Interface)는 이식 가능 운영 체제 인터페이스의 약자로, 서로 다른 UNIX OS의 공통 API를 정리하여 이식성이 높은 유닉스 응용 프로그램을 개발하기 위한 목적으로 IEEE가 책정한 애플리케이션 인터페이스 규격입니다.</p></blockquote><h2 id="poll"><a href="#poll" class="headerlink" title="poll"></a>poll</h2><p>poll도 select와 마찬가지로 멀티플렉싱을 구현하기 위한 방법입니다. poll이 여러 개의 파일을 다루는 방법은 select와 마찬가지로 fd(파일 디스크립터)의 이벤트를 기다리다가 이벤트가 발생하면, poll에서의 block이 해제되고, 다음 루틴에서 어떤 fd에 이벤트가 발생했는지 검사하는 방식을 사용합니다.</p><p>poll의 동작 원리는 select와 비슷하므로 생략합니다. 간단히 select와 비교해 차이점에 대해서만 알아보겠습니다.</p><ul><li>장점<ul><li>select와 단일 프로세스(스레드)에서 여러 파일의 입출력 처리가 가능합니다.</li><li>select 방식처럼 표준 입력|출력|에러을 따로 감시할 필요가 없습니다.</li><li>select는 timeval이라는 구조체를 사용해 타임아웃 값을 세팅하지만, poll은 별다른 구조체 없이 타임아웃 기능을 지원합니다. </li></ul></li><li>단점<ul><li>일부 unix 시스템에서는 poll을 지원하지 않습니다.</li></ul></li></ul><h2 id="epoll"><a href="#epoll" class="headerlink" title="epoll"></a>epoll</h2><p>epoll은 select 함수의 단점 극복을 위해 <strong>커널 레벨멀티플렉싱을 지원해줍니다.</strong> 커널에 관찰대상에 대한 정보를 한 번만 전달하고, 관찰대상의 범위, 또는 내용에 변경이 있을 때만 변경 사항을 알려줍니다. <strong>리눅스에서는 <code>epoll</code>, 윈도우에서는 <code>IOCP</code>, 맥에서는 <code>Kqueue</code>가 이에 해당합니다.</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">int epoll_create(int size); //size는 epoll_fd의 크기정보를 전달한다.</span><br><span class="line">// 반환 값 : 실패 시 -1, 일반적으로 epoll_fd의 값을 리턴</span><br><span class="line"></span><br><span class="line">int epoll_ctl(int epoll_fd,             // epoll_fd</span><br><span class="line">              int operate_enum,         // 어떤 변경을 할지 결정하는 enum값</span><br><span class="line">              int enroll_fd,            // 등록할 fd</span><br><span class="line">              struct epoll_event* event // 관찰 대상의 관찰 이벤트 유형</span><br><span class="line">              ); </span><br><span class="line">// 반환 값 : 실패 시 -1, 성공시 0</span><br><span class="line"></span><br><span class="line">int epoll_wait(int epoll_fd,              // epoll_fd</span><br><span class="line">               struct epoll_event* event, // event 버퍼의 주소</span><br><span class="line">               int maxevents,             // 버퍼에 들어갈 수 있는 구조체 최대 개수</span><br><span class="line">               int timeout                // select의 timeout과 동일 단위는 1/1000</span><br><span class="line">               );</span><br><span class="line">// 성공시 이벤트 발생한 파일 디스크립터 개수 반환, 실패시 -1 반환</span><br></pre></td></tr></table></figure><blockquote><ul><li>epoll_create : epoll 파일 디스크립터 저장소 생성</li><li>epoll_ctl : 저장소에 파일 디스크립터 등록 및 삭제</li><li>epoll_wait : select 함수와 마찬가지로 파일 디스크립터의 변화를 대기한다.</li></ul><p>epoll_create를 통해 생성된 epoll 인스턴스에 관찰대상을 저장 및 삭제하는 함수가 epoll_ctl이고, epoll 인스턴스에 등록된 파일 디스크립터를 대상으로 이벤트의 발생 유무를 확인하는 함수가 epoll_wait이다.</p></blockquote><h3 id="echo_epoll_serverc"><a href="#echo-epoll-server-c" class="headerlink" title="echo_epoll_server.c"></a>echo_epoll_server.c</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="comment">// 리눅스에서만 사용 가능</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/epoll.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BUF_SIZE 100</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EPOLL_SIZE 50</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">error_handling</span><span class="params">(<span class="keyword">char</span> *buf)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> serv_sock, clnt_sock;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">serv_adr</span>, <span class="title">clnt_adr</span>;</span></span><br><span class="line">    <span class="keyword">socklen_t</span> adr_sz;</span><br><span class="line">    <span class="keyword">int</span> str_len, i;</span><br><span class="line">    <span class="keyword">char</span> buf[BUF_SIZE];</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">epoll_event</span> *<span class="title">ep_events</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">epoll_event</span> <span class="title">event</span>;</span></span><br><span class="line">    <span class="keyword">int</span> epfd, event_cnt;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (argc != <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Usage : %s &lt;port&gt;\n"</span>, argv[<span class="number">0</span>]);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    serv_sock = socket(PF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">memset</span>(&amp;serv_adr, <span class="number">0</span>, <span class="keyword">sizeof</span>(serv_adr));</span><br><span class="line">    serv_adr.sin_family = AF_INET;</span><br><span class="line">    serv_adr.sin_addr.s_addr = htonl(INADDR_ANY);</span><br><span class="line">    serv_adr.sin_port = htons(atoi(argv[<span class="number">1</span>]));</span><br><span class="line">    <span class="keyword">if</span> (bind(serv_sock, (struct sockaddr*) &amp;serv_adr, <span class="keyword">sizeof</span>(serv_adr)) == <span class="number">-1</span>)</span><br><span class="line">        error_handling(<span class="string">"bind() error"</span>);</span><br><span class="line">    <span class="keyword">if</span> (listen(serv_sock, <span class="number">5</span>) == <span class="number">-1</span>)</span><br><span class="line">        error_handling(<span class="string">"listen() error"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 커널이 관리하는 epoll 인스턴스라 불리는 파일 디스크립터의 저장소 생성</span></span><br><span class="line">    <span class="comment">// 성공 시 epoll 파일 디스크립터, 실패시 -1 반환</span></span><br><span class="line">    epfd = epoll_create(EPOLL_SIZE);</span><br><span class="line">    ep_events = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct epoll_event)*EPOLL_SIZE);</span><br><span class="line"></span><br><span class="line">    event.events = EPOLLIN;</span><br><span class="line">    event.data.fd = serv_sock;</span><br><span class="line">    <span class="comment">// 파일 디스크립터(serv_sock)를 epoll 인스턴스에 등록한다. (관찰대상의 관찰 이벤트 유형은 EPOLLIN)</span></span><br><span class="line">    epoll_ctl(epfd, EPOLL_CTL_ADD, serv_sock, &amp;event);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">// 성공 시 이벤트가 발생한 파일 디스크립터이ㅡ 수, 실패 시 -1 반환</span></span><br><span class="line">        <span class="comment">// 두 번째 인자로 전달된 주소의 메모리 공간에 이벤트 발생한 파일 디스크립터에 대한 정보가 들어있다.</span></span><br><span class="line">        event_cnt = epoll_wait(epfd, ep_events, EPOLL_SIZE, <span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">if</span> (event_cnt == <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">"epoll_wait() error"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;event_cnt; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ep_events[i].data.fd == serv_sock) &#123;</span><br><span class="line">                adr_sz = <span class="keyword">sizeof</span>(clnt_adr);</span><br><span class="line">                clnt_sock= accept(serv_sock, (struct sockaddr*)&amp;clnt_adr, &amp;adr_sz);</span><br><span class="line">                event.events = EPOLLIN;</span><br><span class="line">                event.data.fd = clnt_sock;</span><br><span class="line">                <span class="comment">// 파일 디스크립터(clnt_sock)를 epoll 인스턴스에 등록한다. (관찰대상의 관찰 이벤트 유형은 EPOLLIN)</span></span><br><span class="line">                epoll_ctl(epfd, EPOLL_CTL_ADD, clnt_sock, &amp;event);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"connected client: %d \n"</span>, clnt_sock);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                str_len = read(ep_events[i].data.fd, buf, BUF_SIZE);</span><br><span class="line">                <span class="keyword">if</span> (str_len == <span class="number">0</span>) &#123; <span class="comment">// close request!</span></span><br><span class="line">                    epoll_ctl(epfd, EPOLL_CTL_DEL, ep_events[i].data.fd, <span class="literal">NULL</span>);</span><br><span class="line">                    close(ep_events[i].data.fd);</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">"closed client: %d \n"</span>, ep_events[i].data.fd);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    write(ep_events[i].data.fd, buf, str_len);    <span class="comment">// echo!</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    close(serv_sock);</span><br><span class="line">    close(epfd);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">error_handling</span><span class="params">(<span class="keyword">char</span> *buf)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">fputs</span>(buf, <span class="built_in">stderr</span>);</span><br><span class="line">    fputc(<span class="string">'\n'</span>, <span class="built_in">stderr</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="결과-확인"><a href="#결과-확인-4" class="headerlink" title="결과 확인"></a>결과 확인</h3><p><img src="/images/post/2019-02-21/echo_result_epoll.gif" alt="echo_result_epoll"></p><h3 id="고찰"><a href="#고찰-4" class="headerlink" title="고찰"></a>고찰</h3><ul><li>장점<ul><li>상태변화의 확인을 위한, 전체 파일 디스크립터를 대상으로 하는 반복문이 필요 없습니다.</li><li>select 함수에 대응하는 epoll_wait 함수호출 시, 커널에서 상태정보를 유지하기 때문에 관찰대상의 정보를 매번 전달할 필요가 없습니다.</li></ul></li><li>단점<ul><li>리눅스의 select 기반 서버를 윈도우의 select 기반 서버로 변경하는 것은 간단하나, 리눅스의 epoll 기반의 서버를 윈도우의 IOCP 기반으로 변경하는 것은 select를 이용하는 것보다 번거롭습니다.</li></ul></li></ul><h1 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h1><ul><li><a href="http://www.masterraghu.com/subjects/np/introduction/unix_network_programming_v1.3/ch06lev1sec2.html" target="_blank" rel="noopener">I/O Models</a></li><li><a href="https://notes.shichao.io/unp/ch6/" target="_blank" rel="noopener">I/O Multiplexing: The select and poll Functions</a> </li><li><a href="http://www.hanbit.co.kr/store/books/look.php?p_code=B2142415021" target="_blank" rel="noopener">뇌를 자극하는 TCP/IP 소켓 프로그래밍</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;소켓이란&quot;&gt;&lt;a href=&quot;#소켓이란&quot; class=&quot;headerlink&quot; title=&quot;소켓이란?&quot;&gt;&lt;/a&gt;소켓이란?&lt;/h1&gt;&lt;p&gt;&lt;code&gt;소켓&lt;/code&gt;은 네트워크 상에서 서버와 클라이언트 두개의 프로그램이 특정 포트를 통해 양방향 
      
    
    </summary>
    
      <category term="Programming" scheme="https://jongmin92.github.io/categories/Programming/"/>
    
      <category term="Java" scheme="https://jongmin92.github.io/categories/Programming/Java/"/>
    
    
      <category term="select" scheme="https://jongmin92.github.io/tags/select/"/>
    
      <category term="multiplexing" scheme="https://jongmin92.github.io/tags/multiplexing/"/>
    
      <category term="socket" scheme="https://jongmin92.github.io/tags/socket/"/>
    
      <category term="nonblocking" scheme="https://jongmin92.github.io/tags/nonblocking/"/>
    
      <category term="poll" scheme="https://jongmin92.github.io/tags/poll/"/>
    
      <category term="epoll" scheme="https://jongmin92.github.io/tags/epoll/"/>
    
  </entry>
  
  <entry>
    <title>컴퓨터 구조와 I/O</title>
    <link href="https://jongmin92.github.io/2019/02/18/Programming/computer-structure/"/>
    <id>https://jongmin92.github.io/2019/02/18/Programming/computer-structure/</id>
    <published>2019-02-18T14:22:00.000Z</published>
    <updated>2019-03-09T04:50:29.894Z</updated>
    
    <content type="html"><![CDATA[<h1 id="computer-system"><a href="#Computer-system" class="headerlink" title="Computer system"></a>Computer system</h1><p>일반적인 컴퓨터 시스템은 <strong><code>CPU, 메모리, 외부 장치</code></strong>(ex. 하드디스크, 키보드, 모니터, 마우스)로 구성된다. CPU와 장치 컨트롤러들은 메모리 사이클을 두고 경쟁하며 동시에 실행된다. 경쟁상황에서 공유하는 메모리에 순차적으로 접근할 수 있도록 메모리 컨트롤러가 메모리에 대한 접근을 제어한다.</p><blockquote><p><code>장치 컨트롤러</code>: 컴퓨터 내의 각 하드웨어 장치에는 컨트롤러(Controller: 제어기)가 존재한다. 컨트롤러는 일종의 작은 CPU로서, 컴퓨터 전체에 CPU라는 중앙 처리 장치가 있듯이 컨트롤러는 각 하드웨어 장치마다 존재하면서 이들을 제어하는 작은 CPU라고 할 수 있다.<br><code>로컬 버퍼</code>: 장치 컨트롤러에는 장치로부터 들어오고 나가는 데이터를 임시로 저장하기 위한 작은 메모리를 가지고 있다. 이를 로컬 버퍼(local buffer)라고 부른다.<br>디스크나 키보드 등에서 데이터를 읽어오는 경우, 우선 로컬 버퍼에 데이터가 임시로 저장된 후 메모리에 전달된다. 이 때, 장치에서 로컬 버퍼로 읽어오는 일은 컨트롤러가 담당한다.</p></blockquote><p><img src="/images/post/2019-02-18/computer_structure.png" alt="Computer system"></p><h1 id="io-inputoutput"><a href="#I-O-Input-Output" class="headerlink" title="I/O (Input/Output)"></a>I/O (Input/Output)</h1><p>컴퓨터는 목적을 달성하기 위해 CPU/메모리와 외부 장치간에 정보를 주고 받는다. 이를 I/O라고 말할 수 있다.<br>컴퓨터에서 연산을 한다는 것은 CPU가 무언가 일을 한다는 뜻이다. 입출력 장치들의 I/O 연산은 I/O 컨트롤러가 담당하고, 컴퓨터 내에서 수행되는 연산은 메인 CPU가 담당한다.<br><img src="/images/post/2019-02-18/input_output.png" alt="Computer system"></p><h1 id="cpu-context"><a href="#CPU-context" class="headerlink" title="CPU context"></a>CPU context</h1><p>어느 시점에나 CPU의 모든 레지스터 값은 CPU 컨텍스트를 정의한다. CPU 컨텍스트라 하면 프로세스 혹은 스레드에서 사용되는 데이터의 집합으로, 진행중이던 작업을 중단하고 나중에 같은 지점에서 다시 계속할 수 있도록 필요한 내용들을 포함하고 있다.</p><h1 id="dual-mode-operation"><a href="#Dual-mode-operation" class="headerlink" title="Dual mode operation"></a>Dual mode operation</h1><p>사용자 프로세스에서 운영체제(OS)를 보하하기 위해 하드웨어는 <code>사용자 모드(user mode)</code>와 <code>커널 모드(kernel mode)</code>라는 두 가지 모드를 제공한다. 두 가지 모드 작동은 CPU가 실행할 수 있는 작업의 유형과 범위에 제한을 둔다. (운영 체제 커널이 사용자 응용 프로그램 프로세스보다 많은 권한을 갖고 있다.)<br><img src="/images/post/2019-02-18/usermode_kernelmode.png" alt="usermode, kernelmode"></p><h1 id="system-call"><a href="#System-call" class="headerlink" title="System call"></a>System call</h1><p><strong>사용자 프로그램은 <code>시스템 호출(System call)</code>을 사용해서 운영 체제에게 서비스를 요청한다.</strong> 시스템 호출은 특별한 시스템 호출 예외를 사용하여 구현되어 있으며, 시스템 호출은 트랩(trap)이라고도 불린다.</p><blockquote><p>시스템 호출(System call)은 운영 체제의 커널이 제공하는 서비스에 대해, 응용 프로그램의 요청에 따라 커널에 접근하기 위한 인터페이스이다. 보통 C나 C++과 같은 고급 언어로 작성된 프로그램들은 직접 시스템 호출을 사용할 수 없기 때문에 API를 통해 시스템 호출에 접근하게 하는 방법이다.<br>하드웨어 제어를 하는 모든 권한을 커널에서 가지고 있기 때문에 파일 시스템 같은 경우 응용 프로그램에서는 직접 제어할 수 없다. 따라서 응용 프로그램에서 하드웨어의 데이터를 가져오거나 쓰려면 커널의 장치 드라이버와 연동되어 실행되어야 한다. 결국 응용 프로그램이 파일 시스템을 이용하려면 커널의 파일 시스템 드라이버로 넘어가 실행되어야 하므로 시스템 호출 방법을 사용한다.</p></blockquote><p><img src="/images/post/2019-02-18/system_call.png" alt="system call"></p><h1 id="exceptions-and-interrupt"><a href="#Exceptions-and-Interrupt" class="headerlink" title="Exceptions and Interrupt"></a>Exceptions and Interrupt</h1><p><code>예외(Exception)</code>와 <code>인터럽트(Interrupt)</code>는 즉각 실행되어야 하는 이벤트를 CPU에게 알리는데 사용된다. <strong>인터럽트는 컨트롤러가 CPU에게 이벤트를 알리기 위해 사용한다.</strong></p><blockquote><p>CPU 옆에는 인터럽트 라인(interrupt line)이 있어서, CPU가 자신의 작업을 하던 중간에 인터럽트 라인에 신호가 들어오면 하던 일을 멈추고, 인터럽트와 관련된 일을 처리한다. 좀더 정확히 CPU는 명령 하나를 수행할 때마다 인터럽트가 발생했는지를 체크하고, 인터럽트가 발생했으면 다음 명령을 수행하기 전에 인터럽트 처리를 하게 되고 그렇지 않으면 다음 명령을 계속 수행하게 된다.</p></blockquote><h1 id="exception-and-interrupt-handler"><a href="#Exception-and-Interrupt-handler" class="headerlink" title="Exception and Interrupt handler"></a>Exception and Interrupt handler</h1><p>예외 혹은 인터럽트가 발생하면 사용자 모드에서 커널 모드로 실행이 전환된다. 예외 혹은 인터럽트가 처리된 후 다시 사용자 모드로 전환된다.<br><img src="/images/post/2019-02-18/interrupt_handler.png" alt="exception and interrupt handler"></p><p>조금 더 상세하게는 다음과 같은 과정을 거친다.<br><img src="/images/post/2019-02-18/interrupt_handle_detail.png" alt="interrupt handle detail"></p><ol><li>커널에 들어가는 동안 현재 실행중인 프로세스의 컨텍스트(CPU의 모든 레지스터의 값)가 먼저 메모리에 저장된다.</li><li>예외 / 인터럽트를 처리한다.</li><li>복원 및 재개할 프로세스를 선택한다.</li><li>선택한 프로세스의 컨텍스트를 복구한다.</li><li>선택한 프로세스의 실행을 재개한다.</li></ol><h1 id="read-string-system-call-design"><a href="#Read-string-system-call-design" class="headerlink" title="Read string system call design"></a>Read string system call design</h1><p>문자열(String)을 입력받는 System call을 디자인 해보자.</p><h2 id="input-buffer-amp-memory-safety"><a href="#Input-buffer-amp-Memory-safety" class="headerlink" title="Input buffer &amp; Memory safety"></a>Input buffer &amp; Memory safety</h2><ul><li>사용자 프로세스가 커널에 저장된 임의의 데이터를 읽을 수 있는 것은 바람직하지 않다.</li><li>사용자 프로세스가 입력 버퍼 외부에 데이터를 기록하여 커널을 손상시킬 수 있다. 이를 <a href="https://en.wikipedia.org/wiki/Buffer_overflow" target="_blank" rel="noopener">Buffer overflow</a>라고 한다.</li><li>메모리 보안을 위해 사용자 프로세스는 커널 데이터에 읽고 쓸 수 없지만, 커널은 사용자 공간에 데이터를 읽고 쓸 수 있다.</li></ul><h2 id="buffer-pointer"><a href="#Buffer-pointer" class="headerlink" title="Buffer pointer"></a>Buffer pointer</h2><p>커널은 사용자 공간에서 입력 버퍼에 대한 주소(pointer)를 알아야 한다.</p><h2 id="buffer-size"><a href="#Buffer-size" class="headerlink" title="Buffer size"></a>Buffer size</h2><p>커널은 입력 버퍼의 크기를 알아야하고 버퍼가 꽉 찼을 때 수행 할 작업을 결정해야한다.</p><h2 id="read-string-system-call-example"><a href="#Read-string-system-call-example" class="headerlink" title="Read string system call example"></a>Read string system call example</h2><p><img src="/images/post/2019-02-18/string_system_call.png" alt="string system call"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;computer-system&quot;&gt;&lt;a href=&quot;#Computer-system&quot; class=&quot;headerlink&quot; title=&quot;Computer system&quot;&gt;&lt;/a&gt;Computer system&lt;/h1&gt;&lt;p&gt;일반적인 컴퓨터 시스템은 &lt;str
      
    
    </summary>
    
      <category term="Programming" scheme="https://jongmin92.github.io/categories/Programming/"/>
    
    
      <category term="Computer System" scheme="https://jongmin92.github.io/tags/Computer-System/"/>
    
      <category term="Interrupt" scheme="https://jongmin92.github.io/tags/Interrupt/"/>
    
      <category term="System call" scheme="https://jongmin92.github.io/tags/System-call/"/>
    
      <category term="User mode" scheme="https://jongmin92.github.io/tags/User-mode/"/>
    
      <category term="Kernel mode" scheme="https://jongmin92.github.io/tags/Kernel-mode/"/>
    
  </entry>
  
  <entry>
    <title>&lt;객체지향의 사실과 오해&gt; 정리</title>
    <link href="https://jongmin92.github.io/2019/02/10/Programming/object_oriented_facts_and_misunderstandings/"/>
    <id>https://jongmin92.github.io/2019/02/10/Programming/object_oriented_facts_and_misunderstandings/</id>
    <published>2019-02-10T11:50:00.000Z</published>
    <updated>2019-02-10T12:32:41.034Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/post/2019-02-10/cover.png" alt=""><br><a href="https://book.naver.com/bookdb/book_detail.nhn?bid=9145968" target="_blank" rel="noopener">객체지향의 사실과 오해 (역할, 책임, 협력 관점에서 본 객체지향)</a></p><h1 id="협력하는-객체들의-공동체"><a href="#협력하는-객체들의-공동체" class="headerlink" title="협력하는 객체들의 공동체"></a>협력하는 객체들의 공동체</h1><ul><li>객체지향의 목표는 실세계를 모방하는 것이 아니다. 오히려 새로운 세계를 창조하는 것이다.</li><li>객체를 스스로 생각하고 스스로 결정하는 현실 세계의 생명체에 비유하는 것은 상태와 행위를 ‘캡슐화’하는 소프트웨어 객체의 ‘자율성’을 설명하는 데 효과적이다. 현실 세계의 사람들이 암묵적인 약속과 명시적인 계약을 기반으로 목표를 달성해 나가는 과정은 ‘메시지’를 주고받으며 공동의 목표를 달성하기 위해 ‘협력’하는 객체들의 관계를 설명하는 데 적합하다.</li><li>실세계의 모방이라는 객체지향의 개념은 훌륭한 프로그램을 설계하고 구현하는 실무적인 관점에서는 부적합하지만 객체지향이라는 용어에 담긴 기본 사상을 이해하고 학습하는 데는 매우 효과적이다.</li><li>역할은 관련성 높은 책임의 집합이다. 객체의 역할은 사람의 역할과 유사하게 다음과 같은 특징을 지닌다.<ul><li>여러 객체가 동일한 역할을 수행할 수 있다.</li><li>역할은 대체 가능성을 의미한다.</li><li>각 객체는 책임을 수행하는 방법을 자율적으로 선택할 수 있다.</li><li>하나의 객체가 동시에 여러 역할을 수행할 수 있다.</li></ul></li><li>객체를 상태와 행동을 함께 지닌 실체라고 정의한다. 이 말은 객체가 협력에 참여하기 위해 어떤 행동을 해야 한다면 그 행동을 하는 데 필요한 상태도 함께 지니고 있어야 한다는 것을 의미한다.</li><li>과거의 전통적인 개발 방법은 데이터와 프로세스를 엄격하게 구분한다. 이에 반해 객체지향에서는 데이터와 프로세스를 객체라는 하나의 틀 안에 함께 묶어 놓음으로써 객체의 자율성을 보장한다. 이것이 전통적인 개발 방법과 객체지향을 구분 짓는 가장 핵심적인 차이다.</li><li>객체지향의 세계에서는 오직 한 가지 의사소통 수단만이 존재한다. 이를 메시지라고 한다.</li><li>객체지향이란?<ul><li>객체지향이란 시스템을 상호작용하는 자율적인 객체들의 공동체로 바라보고 객체를 이용해 시스템을 분할하는 방법이다.</li><li>자율적인 객체란 상태와 행위를 함께 지니며 스스로 자기 자신을 책임지는 객체를 의미한다.</li><li>객체는 시스템의 행위를 구현하기 위해 다른 객체와 협력한다. 각 객체는 협력 내에서 정해진 역할을 수행하며 역할은 관련된 책임의 집합이다.</li><li>객체는 다른 객체와 협력하기 위해 메시지를 전송하고, 메시지를 수신한 객체는 메시지를 처리하는 데 적합한 메서드를 자율적으로 선택한다.</li></ul></li></ul><h1 id="이상한-나라의-객체"><a href="#이상한-나라의-객체" class="headerlink" title="이상한 나라의 객체"></a>이상한 나라의 객체</h1><ul><li>인간은 행동의 과정과 결과를 단순하게 기술하기 위해 상태라는 개념을 고안했다. 상태를 이용하면 과거에 얽매이지 않고 현재를 기반으로 객체의 행동 방식을 이해할 수 있다.</li><li>객체와 객체 사이의 의미 있는 연결을 링크라고 한다. 객체와 객체 사이에는 링크가 존재해야만 요청(메시지)을 보내고 받을 수 있다.</li><li>객체 간의 선으로 표현되는 링크와 달리 객체를 구성하는 단순한 값은 속성이라고 한다.</li><li>객체는 자율적인 존재이다. 객체지향의 세계에서 객체는 다른 객체의 상태에 직접적으로 접근할 수도, 상태를 변경할 수도 없다. 자율적인 객체는 스스로 자신의 상태를 책임져야 한다.</li><li>객체의 상태는 저절로 변경되지 않는다. 객체의 상태를 변경하는 것은 객체의 자발적인 행동뿐이다.</li><li>객체는 협력에 참여하는 과정에서 자기 자신의 상태뿐만 아니라 다른 객체의 상태 변경을 유발할 수도 있다.</li><li>객체의 행동으로 인해 발생하는 결과는 두 가지 관점에서 설명할 수 있다.<ul><li>객체 자신의 상태 변경</li><li>행동 내에서 협력하는 다른 객체에 대한 메시지 전송</li></ul></li><li>현실 세계의 객체와 객체지향 세계의 객체 사이에는 중요한 차이점이 있다. 현실과 달리 객체지향의 세계에서 모든 객체는 자신의 상태를 스스로 관리하는 자율적인 존재다.</li><li>객체는 상태를 캡슐 안에 감춰둔 채 외부로 노출하지 않는다. 객체가 외부에 노출하는 것은 행동뿐이며, 외부에서 객체에 접근할 수 있는 유일한 방법 역시 행동뿐이다.</li><li>객체의 행동을 유발하는 것은 외부로부터의 전달된 메시지지만 객체의 상태를 변경할지 여부는 객체 스스로 결정한다. 사실 객체에게 메시지를 전달하는 외부의 객체는 메시지를 수신하는 객체의 상태가 변경된다는 사실조차 알지 못한다.</li><li>상태를 외부에 노출시키지 않고 행동을 경계로 캡슐화하는 것은 결과적으로 객체의 자율성을 높인다.</li><li>상태를 잘 정의된 행동 뒤로 캡슐화하는 것은 객체의 자율성을 높이고 협력을 단순하고 유연하게 만든다.</li><li>상태를 먼저 결정하고 행동을 나중에 결정하는 방법은 설계에 나쁜 영향을 끼친다.<ul><li>상태를 먼저 결정할 경우 캡슐화가 저해된다.</li><li>객체를 협력자가 아닌 고립된 섬으로 만든다.</li><li>객체의 재사용성이 저하된다.</li></ul></li><li>객체지향 설계는 애플리케이션에 필요한 협력을 생각하고 협력에 참여하는 데 필요한 행동을 생각한 후 행동을 수행할 객체를 선택하는 방식으로 수행된다. 행동을 결정한 후에야 행동에 필요한 정보가 무엇인지를 고려하게 되며 이 과정에서 필요한 상태가 결정된다.</li><li>객체지향 세계는 현실 세계의 단순한 모방이 아니다. 소프트웨어 안에 구현된 상품 객체는 실제 세계의 상품과는 전혀 다른 양상을 띤다.<ul><li>현실 속에서는 수동적인 존재가 소프트웨어 객체로 구현될 때는 능동적으로 변한다.</li><li>소프트웨어 객체가 현실 객체의 부분적인 특징을 모방하는 것이 아니라 현실 객체가 가지지 못한 추가적인 능력을 보유하게 된다.</li><li>현실 세계와 객체지향 세계 사이의 관계를 좀 더 정확하게 설명할 수 있는 단어는 은유다.</li><li>현실 속의 객체의 의미 일부가 소프트웨어 객체로 전달되기 때문에 프로그램 내의 객체는 현실 속의 객체에 대한 은유다.</li></ul></li></ul><h1 id="역할-책임-협력"><a href="#역할-책임-협력" class="headerlink" title="역할, 책임, 협력"></a>역할, 책임, 협력</h1><ul><li>객체의 세계에서는 협력이라는 문맥이 객체의 행동 방식을 결정한다. 중요한 것은 개별 객체가 아니라 객체들 사이에 이뤄지는 협력이다.</li><li>객체지향 개발에서 가장 중요한 능력은 책임을 능숙하게 소트웨어 객체에 할당하는 것이다. 책임을 어떻게 구현할 것인가 하는 문제는 객체와 책임이 제자리를 잡은 후에 고려해도 늦지 않다. 객체와 책임이 이리저리 부유하는 상황에서 성급하게 구현에 뛰어드는 것은 변경에 취약하고 다양한 협력에 참여할 수 없는 비자율적인 객체를 낳게 된다.</li><li>객체의 책임은 크게 ‘하는 것’과 ‘아는 것’의 두 가지 범주로 분류된다.<ul><li>하는 것<ul><li>객체를 생성하거나 계산을 하는 등의 스스로 하는 것</li><li>다른 객체의 행동을 시작시키는 것</li><li>다른 객체의 활동을 제어하고 조절하는 것</li></ul></li><li>아는 것<ul><li>개인적인 정보에 관해 아는 것</li><li>관련된 객체에 관해 아는 것</li><li>자신이 유도하거나 계산할 수 있는 것에 관해 아는 것</li></ul></li></ul></li><li>책임은 객체의 외부에 제공해 줄 수 있는 정보(아는 것의 측면)와 외부에 제공해 줄 수 있는 서비스(하는 것의 측면)의 목록이다. 따라서 책임은 객체의 공용 인터페이스를 구성한다.</li><li>객체가 다른 객체에게 주어진 책임을 수행하도록 요청을 보내는 것을 메시지 전송이라고 한다. 따라서 두 객체 간의 협력은 메시지를 통해 이뤄진다.</li><li>객체지향 설계는 협력에 참여하기 위해 어떤 객체가 어떤 책임을 수행해야 하고 어떤 객체로부터 메시지를 수신할 것인지를 결정하는 것으로부터 시작된다. 어떤 클래스가 필요하고 어떤 메서드를 포함해야 하는지를 결정하는 것은 책임과 메시지에 대한 대략적인 윤곽을 잡은 후에 시작해도 늦지 않다.</li><li>역할은 협력 내에서 다른 객체로 대체할 수 있음을 나타내는 일종의 표식이다. 협력 안에서 역할은 “이 자리는 해당 역할을 수행할 수 있는 어떤 객체라도 대신할 수 있습니다”라고 말하는 것과 같다.</li><li>역할을 대체하기 위해서는 각 역할이 수신할 수 있는 메시지를 동일한 방식으로 이해해야 한다.</li><li>역할은 객체지향 설계의 단순성, 유연성, 재사용성을 뒷받침하는 핵심 개념이다.</li><li>역할의 대체 가능성은 행위 호환성을 의미하고, 행위 호환성은 동일한 책임의 수행을 의미한다.</li></ul><h2 id="객체지향-설계-기법"><a href="#객체지향-설계-기법" class="headerlink" title="객체지향 설계 기법"></a>객체지향 설계 기법</h2><ul><li>책임-주도 설계(Responsibility-Driven Design)<ul><li>객체지향 설계란 애플리케이션의 기능을 구현하기 위한 협력 관계를 고안하고, 협력에 필요한 역할과 책임을 식별한 후 이를 수행할 수 있는 적절한 객체를 식별해 나가는 과정이다. 객체지향 설계의 핵심은 올바른 책임을 올바른 객체에게 할당하는 것이다.</li><li>책임-주도 설계에서는 시스템의 책임을 객체의 책임으로 변환하고, 각 객체가 책임을 수행하는 중에 필요한 정보나 서비스를 제공해줄 협력자를 찾아 해당 협력자에게 책임을 할당하는 순차적인 방식으로 객체들의 협력 공동체를 구축한다. 책임-주도 설계는 개별적인 객체의 상태가 아니라 객체의 책임과 상호작용에 집중한다.</li></ul></li><li>디자인 패턴(Design Pattern)<ul><li>디자인 패턴은 책임-주도 설계의 결과를 표현한다. 패턴은 모범이되는 설계다.</li><li>패턴은 반복해서 일어나는 특정한 상황에서 어떤 설계가 왜 더 효과적인지에 대한 이유를 설명한다.</li><li>특정 상황에 적용 가능한 디자인 패턴을 잘 알고 있다면 책임-주도 설계의 절차를 순차적으로 따르지 않고도 시스템 안에 구현할 객체들의 역할과 책임, 협력 관계를 빠르고 손 쉽게 포착할 수 있을 것이다.</li></ul></li><li>테스트-주도 개발(Test-Driven Development)<ul><li>테스트-주도 개발의 기본 흐름은 실패하는 테스트를 작성하고, 테스트를 통과하는 가장 간단한 코드를 작성한 후, 리팩터링을 통해 중복을 제거하는 것이다.</li><li>테스트-주도 개발은 객체가 이미 존재한다고 가정하고 객체에게 어떤 메시지를 전송할 것인지에 관해 먼저 생각하라고 충고한다. 그러나 이 같은 종류의 충고는 역할, 책임, 협력의 관점에서 객체를 바라보지 않을 경우 무의미하다.</li><li>테스트-주도 개발은 테스트를 작성하는 것이 아니라 책임을 수행할 객체 또는 클라이언트가 기대하는 객체의 역할이 메시지를 수신할 때 어떤 결과를 반환하고 그 과정에서 어떤 객체와 협력할 것인지에 대한 기대를 코드의 형태로 작성하는 것이다.</li><li>테스트를 작성하기 위해 객체의 메서드를 호출하고 반환값을 검증하는 것은 순간적으로 객체가 수행해야 하는 책임에 관해 생각한 것이다. 테스트에 필요한 간접 입력 값을 제공하기 위해 스텁(stub)을 추가하거나 간접 출력 값을 검증하기 위해 목 객체(mock object)를 사용하는 것은 객체와 협력해야 하는 협력자에 관해 고민한 결과를 코드로 표현한 것이다.</li></ul></li></ul><h1 id="책임과-메시지"><a href="#책임과-메시지" class="headerlink" title="책임과 메시지"></a>책임과 메시지</h1><ul><li>객체가 어떤 행동을 하는 유일한 이유는 다른 객체로부터 요청을 수신했기 때문이다. 요청을 처리하기 위해 객체가 수행하는 행동을 책임이라고 한다. 따라서 자율적인 객체란 스스로의 의지와 판단에 따라 각자 맡은 책임을 수행하는 객체를 의미한다.</li><li>적절한 책임이 자율적인 객체를 낳고, 자율적인 객체들이 모여 유연하고 단순한 협력을 낳는다. 따라서 협력에 참여하는 객체가 얼마나 자율적인지가 전체 애플리케이션의 품질을 결정한다.</li><li>추상적이고 포괄적인 책임은 협력을 좀 더 다양한 환경에서 재사용할 수 있도록 유연성이라는 축복을 내려준다. 그러나 책임은 협력에 참여하는 의도를 명확하게 설명할 수 있는 수준 안에서 추상적이어야 한다.</li><li>객체가 다른 객체에게 접근할 수 있는 유일한 방법은 요청을 전송하는 것뿐이다. 그리고 이 요청을 메시지라고 부른다. 메시지는 객체로 하여금 자신의 책임, 즉 행동을 수행하게 만드는 유일한 방법이다.</li><li>메시지를 처리할 수 있다는 것은 객체가 해당 메시지에 해당하는 행동을 수행해야 할 책임이 있다는 것을 의미한다. 따라서 메시지의 개념은 책임의 개념과 연결된다. 송신자는 메시지 전송을 통해서만 다른 객체의 책임을 요청할 수 있고, 수신자는 오직 메시지 수신을 통해서만 자신의 책임을 수행할 수 있다. 따라서 객체가 수신할 수 있는 메시지의 모양이 객체가 수행할 책임의 모양을 결정한다.</li><li>객체가 유일하기 이해할 수 있는 의사소통 수단은 메시지 뿐이며 객체는 메시지를 처리하기 위한 방법을 자율적으로 선택할 수 있다. 외부의 객체는 메시지에 관해서만 볼 수 있고 객체 내부는 볼 수 없기 때문에 자연스럽게 객체의 외부와 내부가 분리된다.</li><li>메시지를 수신한 객체가 실행 시간에 메서드를 선택할 수 있다는 사실은 다른 프로그래밍 언어와 객체지향 프로그래밍 언어를 구분 짓는 핵심적인 특징 중 하나다. 이것은 프로시저 호출에 대한 실행 코드를 컴파일 시간에 결정하는 절차적인 언어와 확연히 구분되는 특징이다.</li></ul><ul><li>다형성이란 서로 다른 유형의 객체가 동일한 메시지에 대해 서로 다르게 반응하는 것을 의미한다. 서로 다른 타입에 속하는 객체들이 동일한 메시지를 수신할 경우 서로 다른 메서드를 이용해 메시지를 처리할 수 있는 메커니즘을 가리킨다.</li><li>다형성은 역할, 책임, 협력과 깊은 관련이 있다. 서로 다른 객체들이 다형성을 만족시킨다는 것은 객체들이 동일한 책임을 공유한다는 것을 의미한다.</li><li>다형성에서 중요한 것은 메시지 송신자의 관점이다. 메시지 수신자들이 동일한 오퍼레이션을 서로 다른 방식으로 처리하더라도 메시지 송신자의 관점에서 이 객체들은 동일한 책임을 수행하는 것이다. 즉, 다형성은 수신자의 종류를 캡슐화한다.</li><li>다형성은 송신자와 수신자 간의 객체 타입에 대한 결합도를 메시지에 대한 결합도로 낮춤으로써 달성된다. 다형성을 사용하면 메시지를 이해할 수 있는 어떤 객체와도 협력할 수 있는 유연하고 확장 가능한 구조를 만들 수 있다. 객체지향 패러다임이 강력한 이유는 다형성을 이용해 협력을 유연하게 만들 수 있기 때문이다.</li></ul><ul><li>객체지향의 기본 개념은 책임을 수행하는 자율적인 객체들의 협력을 통해 애플리케이션을 구축하는 것이다. 객체지향의 세계에서 객체들이 서로 협력하기 위해 사용할 수 있는 유일한 방법은 메시지를 전송하는 것이다.</li><li>객치지향 애플리케이션의 중심 사상은 연쇄적으로 메시지를 전송하고 수신하는 객체들 사이의 협력 관계를 기반으로 사용자에게 유용한 기능을 제공하는 것이다.</li><li>클래스 기반의 객체지향 언어를 사용하는 대부분의 사람들은 객체지향 애플리케이션을 클래스의 집합으로 생각한다. 프로그래머 입장에서 클래스는 실제로 볼 수 있고 수정할 수 있는 구체적인 존재다. 그러나 클래스는 단지 동적인 객체들의 특성과 행위를 정적인 텍스트로 표현하기 위해 사용할 수 있는 추상화 도구일 뿐이다. 중요한 것은 클래스가 아니라 객체다. 클래스를 정의하는 것이 먼저가 아니라 객체들의 속성과 행위를 식별하는 것이 먼저다. 클래스는 객체의 속성과 행위를  담는 틀일 뿐이다.</li><li>객체지향 패러다임으로의 전환은 시스템을 정적인 클래스들의 집합이 아니라 메시지를 주고받는 동적인 객체들의 집합으로 바라보는 것에서 시작된다. 클래스에 담길 객체들의 공통적인 행위와 속성을 포착하기 위해서는 먼저 협력하는 객체들의 관점에서 시스템을 바라봐야 한다. 진정한 객체지향 패러다임으로의 도약은 개별적인 객체가 아니라 메시지를 주고받는 객체들 사이의 커뮤니케이션에 초점을 맞출 때 일어난다.</li><li>훌륭한 객체지향 설계는 어떤 객체가 어떤 메시지를 전송할 수 있는가와 어떤 객체가 어떤 메시지를 이해할 수 있는가를 중심으로 객체 사이의 협력 관계를 구성하는 것이다. 이것은 개별 객체에 초점을 맞추는 관점과는 매우 다르다. 사실 협력이라는 문맥에서 벗어나 독립적인 객체에 관해 고민하는 것은 클래스에 초점을 맞추는 것과 별다른 차이가 없다.</li><li>객체지향 설계의 중심에는 메시지가 위치한다. 객체가 메시지를 선택하는 것이 아니라 메시지가 객체를 선택하게 해야 한다. 메시지가 객체를 선택하게 만들려면 메시지를 중심으로 협력을 설계해야 한다.</li></ul><ul><li>책임-주도 설계의 핵심은 어떤 행위가 필요한지를 먼저 결정한 후에 이 행위를 수행할 객체를 결정하는 것이다. 이 과정을 흔히 What/Who 사이클이라고 한다.</li><li>결론적으로 협력이라는 문맥 안에서 필요한 메시지를 먼저 결정한 후에 메시지를 수신하기에 적합한 객체를 선택한다. 그리고 수신된 메시지가 객체의 책임을 결정한다. 이것은 객체를 고립된 상태로 놓고 어떤 책임이 적절한지를 결정하는 것과는 근본적으로 다른 접근 방법이다.</li><li>협력이라는 문맥 안에서 객체의 책임을 결정하는 것은 메시지다. 책임이 먼저 오고 객체가 책임을 따른다. 결과적으로 시스템이 수행해야 하는 전체 행위는 협력하는 객체들의 책임으로 분배된다.</li><li>객체가 자신이 수신할 메시지를 결정하게 하지 말고 메시지가 협력에 필요한 객체를 발견하게 해야 한다.</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/images/post/2019-02-10/cover.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;a href=&quot;https://book.naver.com/bookdb/book_detail.nhn?bid=9145968&quot; target=&quot;_blan
      
    
    </summary>
    
      <category term="Programming" scheme="https://jongmin92.github.io/categories/Programming/"/>
    
    
      <category term="book" scheme="https://jongmin92.github.io/tags/book/"/>
    
      <category term="review" scheme="https://jongmin92.github.io/tags/review/"/>
    
      <category term="OOP" scheme="https://jongmin92.github.io/tags/OOP/"/>
    
  </entry>
  
  <entry>
    <title>Mockito annotation을 사용하는 field 초기화 하기</title>
    <link href="https://jongmin92.github.io/2019/02/10/Java/mockito-anotation-field-initialize/"/>
    <id>https://jongmin92.github.io/2019/02/10/Java/mockito-anotation-field-initialize/</id>
    <published>2019-02-10T01:35:00.000Z</published>
    <updated>2019-02-10T15:13:48.128Z</updated>
    
    <content type="html"><![CDATA[<h1 id="mockito-junit-rule"><a href="#Mockito-JUnit-rule" class="headerlink" title="Mockito JUnit rule"></a>Mockito JUnit rule</h1><p>Mockito에서 제공하는 <strong>@Mock, @Spy, @InjectMocks과 같은 annotation을 사용하는 field를 초기화 하는 방법</strong>으로는 2가지가 제공되고 있었다.</p><ul><li><p>JUnit test class에 <code>@RunWith(MockitoJUnitRunner.class)</code>를 추가하는 방법</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(MockitoJUnitRunner.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MockitoTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Mock</span></span><br><span class="line">    <span class="keyword">private</span> List list;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shouldDoSomething</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        list.add(<span class="number">100</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>MockitoAnnotations.initMocks(Object)</code>을 @Before 메서드에서 실행하는 방법</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MockitoTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        MockitoAnnotations.initMocks(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Mock</span></span><br><span class="line">    <span class="keyword">private</span> List list;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shouldDoSomething</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        list.add(<span class="number">100</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>그리고 추가로 Mockito <a href="https://static.javadoc.io/org.mockito/mockito-core/2.24.0/org/mockito/Mockito.html#mockito_junit_rule" target="_blank" rel="noopener">1.10.17</a> 버전부터 제공하는 <code>JUnit rule</code>을 이용하는 방법이 있다.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MockitoTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Rule</span></span><br><span class="line">    <span class="keyword">public</span> MockitoRule mockito = MockitoJUnit.rule();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Mock</span></span><br><span class="line">    <span class="keyword">private</span> List list;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shouldDoSomething</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        list.add(<span class="number">100</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>그럼 위의 3가지 방법 중 어떤 방법을 사용하는 것이 좋을까? 먼저, 3가지 방식들을 비교하기전에 <strong>Test Runner, @RunWith, Rule</strong>에 대해서 간단하게 알아보자.</p><h1 id="test-runner"><a href="#Test-Runner" class="headerlink" title="Test Runner"></a>Test Runner</h1><p><strong>JUnit 프레임워크에서 테스트 클래스 내에 존재하는 각각의 테스트 메소드 실행을 담 당하고 있는 클래스를 Test Runner라고 한다.</strong> Test Runner는 테스트 클래스의 구조에 맞게 테스트 메소드들을 실행하고 결과를 표시하는 역할을 수행한다. 우리 눈에는 보이지 않지만, 테스트 케이스를 IDE에서 실행하면 내부적으로 는 JUnit의 BlockJUnit4ClassRunner라는 Test Runner 클래스가 실행되고, IDE는 그 결과를 해석해서 우리에게 보기 편한 화면으로 보여준다.</p><blockquote><p>대부분의 Java 통합개발환경(IDE)은 JUnit 프레임워크를 내장 지원하고 있다. 그래서 종종 JUnit이 독립적인 프레임워크라기보다는 하나의 기능처럼 생각될 수 있다. 하지만 JUnit 프레임워크는 분명 독립적인 소프트웨어이고, 애초부터 그렇게 만들어 졌다. 그렇기 때문에 명령행 프롬프트에서 실행하거나 셸 스크립트 등을 이용해서 실행할 수도 있다.</p></blockquote><h1 id="runwith"><a href="#RunWith" class="headerlink" title="@RunWith"></a>@RunWith</h1><p>@RunWith annotation은 JUnit에 내장된 기본 테스트 러너인 BlockJUnit4ClassRunner 대신에 <strong>@RunWith(클래스이름.class)를 이용해 JUnit Test 클래스를 실행하기 위한 Test Runner를 명시적으로 지정할 수 있다.</strong> 지정된 클래스를 이용해 테스트 클래스 내의 테스트 메소드들을 수행하도록 지정해주는 annotation이다. 일종의 JUnit 프레임워크의 확장지점이다. 이런 구조를 이용해서 많은 애플리케이션이나 프레임워크가 자신에게 필요한 Test Runner를 직접 만들어 자신만의 고유한 기능을 추가해 테스트를 수행하고 있다. 예를 들면, 스프링 프레임워크에서 제공하는 SpringJUnit4ClassRunner, SpringRunner같은 클래스는 이 확장 기능을 이용한 대표적인 사례 중 하나다.</p><h1 id="rule"><a href="#Rule" class="headerlink" title="Rule"></a>Rule</h1><p>JUnit 4.7 버전부터 추가된 기능으로 <strong>하나의 테스트 클래스 내에서 각 테스트 메소드의 동작 방식을 재정의하거나 추가하기 위해 사용하는 기능이다.</strong> 테스트 케이스 수행을 좀 더 세밀하게 조작할 수 있게 된다.</p><h1 id="결론"><a href="#결론" class="headerlink" title="결론"></a>결론</h1><p>MockitoJUnit의 rule을 사용하면 MockitoJUnitRunner와 똑같은 기능을 수행하면서, 다른 Test Runner를 사용할 수 있다. 사용하고 있는 Mockito의 버전이 1.10.17, JUnit 버전이 4.7 이상이라면 <strong>@RunWith가 아닌 MockitoJUnit의 rule을 사용해서 Mockito annotation을 사용하는 field를 초기화 하자</strong></p><h1 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h1><ul><li><a href="https://stackoverflow.com/questions/10806345/runwithmockitojunitrunner-class-vs-mockitoannotations-initmocksthis/10812752#10812752" target="_blank" rel="noopener">@RunWith(MockitoJUnitRunner.class) vs MockitoAnnotations.initMocks(this)</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;mockito-junit-rule&quot;&gt;&lt;a href=&quot;#Mockito-JUnit-rule&quot; class=&quot;headerlink&quot; title=&quot;Mockito JUnit rule&quot;&gt;&lt;/a&gt;Mockito JUnit rule&lt;/h1&gt;&lt;p&gt;Mockit
      
    
    </summary>
    
      <category term="Programming" scheme="https://jongmin92.github.io/categories/Programming/"/>
    
      <category term="Java" scheme="https://jongmin92.github.io/categories/Programming/Java/"/>
    
    
      <category term="Java" scheme="https://jongmin92.github.io/tags/Java/"/>
    
      <category term="Mockito" scheme="https://jongmin92.github.io/tags/Mockito/"/>
    
      <category term="TDD" scheme="https://jongmin92.github.io/tags/TDD/"/>
    
  </entry>
  
  <entry>
    <title>Design Pattern - Adapter</title>
    <link href="https://jongmin92.github.io/2018/08/20/Java/design-pattern-adapter/"/>
    <id>https://jongmin92.github.io/2018/08/20/Java/design-pattern-adapter/</id>
    <published>2018-08-20T13:22:00.000Z</published>
    <updated>2018-08-20T13:30:12.885Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>해당 포스팅은 <a href="https://book.naver.com/bookdb/book_detail.nhn?bid=4529127" target="_blank" rel="noopener">Java 언어로 배우는 디자인 패턴 입문</a> 책을 참고해 작성했습니다.<br>사용된 코드는 <a href="https://github.com/jongmin92/Design-Pattern" target="_blank" rel="noopener">jongmin92/Design-Pattern</a> repository 에서 확인할 수 있습니다.</p></blockquote><h1 id="adapter-패턴"><a href="#Adapter-패턴" class="headerlink" title="Adapter 패턴"></a>Adapter 패턴</h1><p>이미 제공되어 있는 것을 그대로 사용할 수 없을 때, 필요한 형태로 교환하고 사용하는 일이 자주 있습니다. <strong>‘이미 제공되어 있는 것’과 ‘필요한 것’ 사이(서로 다른 두 개)의 ‘차이’를 없애주는 디자인 패턴이 <code>Adapter 패턴</code> 입니다.</strong></p><p>Adapter 패턴은 Wrapper 패턴으로 불리기도 하며, 다음과 같은 두 가지 종류가 있습니다.</p><ul><li>클래스에 의한 Adapter 패턴 (상속을 사용한 Adapter 패턴)</li><li>인스턴스에 의한 Adapter 패턴 (위임을 사용한 Adapter 패턴)</li></ul><h2 id="예제-프로그램1-상속을-사용한-adapter-패턴"><a href="#예제-프로그램-1-상속을-사용한-Adapter-패턴" class="headerlink" title="예제 프로그램(1) - 상속을 사용한 Adapter 패턴"></a>예제 프로그램(1) - 상속을 사용한 Adapter 패턴</h2><p>만들 예제 프로그램은 주어진 문자열을 아래와 같이 표시하는 간단한 것입니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(Hello)</span><br><span class="line">*Hello*</span><br></pre></td></tr></table></figure><p>Banner 클래스에는 문자열을 괄호로 묶어서 표시하는 showWithParen 메소드와 문자열 전후에 *를 붙여 표시하는 showWithAster 메소드가 준비되어 있습니다. (이미 제공되어 있는 것)</p><p>Print 인터페이스에는 문자열을 느슨하게(괄호 사용) 표시하기 위한 printWeak 메소드와 문자열을 강하게 표시하기 위한 (* 표시를 앞뒤에 붙여 강조) printStrong 메소드가 선언되어 있습니다.</p><p>지금 하고 싶은 일은 Banner 클래스를 사용해서 Print 인터페이스를 충족시키는 클래스를 만드는 일입니다.</p><p>PrintBanner 클래스가 어댑터의 역할을 담당합니다. 이 클래스는 제공되어 있는 Banner 클래스를 <strong>상속</strong>해서, 필요로 하는 Print 인터페이스를 <strong>구현</strong>합니다.</p><p><img src="/images/post/2018-08-20/adapter-uml_1.png" alt=""></p><h3 id="banner-클래스"><a href="#Banner-클래스" class="headerlink" title="Banner 클래스"></a>Banner 클래스</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Banner</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String string;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Banner</span><span class="params">(String string)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.string = string;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showWithParen</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">'('</span> + string + <span class="string">')'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showWithAster</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">'*'</span> + string + <span class="string">'*'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="print-인터페이스"><a href="#Print-인터페이스" class="headerlink" title="Print 인터페이스"></a>Print 인터페이스</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Print</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">printWeak</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">printStrong</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="printbanner-클래스"><a href="#PrintBanner-클래스" class="headerlink" title="PrintBanner 클래스"></a>PrintBanner 클래스</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PrintBanner</span> <span class="keyword">extends</span> <span class="title">Banner</span> <span class="keyword">implements</span> <span class="title">Print</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PrintBanner</span><span class="params">(String string)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(string);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printWeak</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        showWithParen();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printStrong</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        showWithAster();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="main-클래스"><a href="#Main-클래스" class="headerlink" title="Main 클래스"></a>Main 클래스</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Print p = <span class="keyword">new</span> PrintBanner(<span class="string">"Hello"</span>);</span><br><span class="line">        p.printWeak();</span><br><span class="line">        p.printStrong();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Main 클래스는 Print 인터페이스를 사용하고 있습니다. Banner 클래스나 showWithParen 메소드나 showWithAster 메소드는 Main 클래스 소스 코드 상에서는 완전히 감추어져 있습니다.</p><h2 id="예제-프로그램2-위임을-사용한-adapter-패턴"><a href="#예제-프로그램-2-위임을-사용한-Adapter-패턴" class="headerlink" title="예제 프로그램(2) - 위임을 사용한 Adapter 패턴"></a>예제 프로그램(2) - 위임을 사용한 Adapter 패턴</h2><p>Main 클래스, Banner 클래스, Print 인터페이스는 예제 프로그램(1)과 동일합니다.</p><p>PrintBanner 클래스는 banner 필드에서 Banner 클래스의 인스턴스를 가집니다. 이 인스턴스는 PrintBanner 클래스의 생성자에서 생성합니다.</p><p>이전 예와는 달리, 이번에는 필드를 경우해서 호출하고 있습니다. 즉 위임을 하고 있습니다.</p><p><img src="/images/post/2018-08-20/adapter-uml_2.png" alt=""></p><h3 id="printbanner-클래스"><a href="#PrintBanner-클래스-1" class="headerlink" title="PrintBanner 클래스"></a>PrintBanner 클래스</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PrintBanner</span> <span class="keyword">implements</span> <span class="title">Print</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Banner banner;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PrintBanner</span><span class="params">(String string)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.banner = <span class="keyword">new</span> Banner(string);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printWeak</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        banner.showWithParen();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printStrong</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        banner.showWithAster();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="adapter-패턴의-구성요소"><a href="#Adapter-패턴의-구성요소" class="headerlink" title="Adapter 패턴의 구성요소"></a>Adapter 패턴의 구성요소</h2><ul><li><strong>Target(대상)의 역할</strong><br>지금 필요한 메소드를 결정합니다. 예제 프로그램에서 Print 인터페이스(상속의 경우)나 Print 클래스(위임의 경우)가 이 역할을 합니다.</li><li><strong>Client(의뢰자)의 역할</strong><br>Target 역할의 메소드를 사용해서 일을 합니다. 예제 프로그램에서 Main 클래스가 이 역할을 합니다.</li><li><strong>Adaptee(개조되는 쪽)의 역할</strong><br>Adaptee는 이미 준비되어 있는 메소드를 갖고 있는 역할입니다. Adaptee역의 메소드가 Target 역할의 메소드와 일치하면 다음 Adapter의 역할은 필요없습니다.</li><li><strong>Adapter의 역할</strong><br>Adapter 패턴의 주인공입니다. Adaptee 역할의 메소드를 사용해서 어떻게든 Target 역할을 만족시키기 위한 것이 Adapter 패턴의 목적이며, Adapter 역할의 임무입니다. 예제 프로그램에서는 PrintBanner 클래스가 Adapter의 역할을 합니다.</li></ul><h2 id="사고-넓히기"><a href="#사고-넓히기" class="headerlink" title="사고 넓히기"></a>사고 넓히기</h2><h3 id="어떤-경우에-사용할까"><a href="#어떤-경우에-사용할까" class="headerlink" title="어떤 경우에 사용할까?"></a>어떤 경우에 사용할까?</h3><p><strong>Adapter 패턴은 기존의 클래스를 개조해서 필요한 클래스를 만듭니다.</strong> 이 패턴으로 필요한 메소드를 빠르게 만들 수 있습니다.</p><p>이미 만들어진 클래스를 새로운 인터페이스(API)에 맞게 개조시킬 때 기존 클래스의 소스를 바꾸어서 ‘수정’하려고 합니다. 그러나 그렇게하면 테스트가 이미 끝난 기존의 클래스를 수정한 후에 다시 한 번 테스트 해야 합니다. Adapter 패턴은 기존의 클래스를 전혀 수정하지 않고 목적한 인터페이스(API)에 맞추려는 것입니다.</p><p>만약 버그가 발생해도 기존의 클래스(Adaptee의 역할)에는 버그가 없으므로 Adapter 역할의 클래스를 중점적으로 조사하면 되고, 프로그램 검사도 상당히 쉬워집니다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;해당 포스팅은 &lt;a href=&quot;https://book.naver.com/bookdb/book_detail.nhn?bid=4529127&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Java 언어로 배우는 디자인 
      
    
    </summary>
    
      <category term="Programming" scheme="https://jongmin92.github.io/categories/Programming/"/>
    
      <category term="Java" scheme="https://jongmin92.github.io/categories/Programming/Java/"/>
    
    
      <category term="java" scheme="https://jongmin92.github.io/tags/java/"/>
    
      <category term="design pattern" scheme="https://jongmin92.github.io/tags/design-pattern/"/>
    
      <category term="adapter" scheme="https://jongmin92.github.io/tags/adapter/"/>
    
  </entry>
  
  <entry>
    <title>&lt;웹 프로그래머를 위한 서블릿 컨테이너의 이해&gt; 리뷰</title>
    <link href="https://jongmin92.github.io/2018/08/18/Book/servlet_container_review/"/>
    <id>https://jongmin92.github.io/2018/08/18/Book/servlet_container_review/</id>
    <published>2018-08-18T04:00:00.000Z</published>
    <updated>2018-08-18T04:19:07.827Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/post/2018-08-18_2/cover.jpg" alt=""><br><a href="http://www.hanbit.co.kr/store/books/look.php?p_code=E1064947038" target="_blank" rel="noopener">한빛미디어 - 웹 프로그래머를 위한 서블릿 컨테이너의 이해</a></p><p>스프링을 이용해 개발하고 있지만 스프링이 구동되는 서블릿 컨테이너에 대한 이해가 부족해 읽게 되었다. (어떻게 돌아가고 있는지 궁금했다…)</p><p>책의 구성은 <strong>서블릿 컨테이너를 학습해야 하는 이유</strong>를 시작으로 <strong>HTTP 프로토콜에 대한 이해</strong> 그리고 <strong>서블릿의 이해</strong>로 이어진다.<br>그 후에는 실제 <strong>서블릿 컨테이너에서 HTTP 프로토콜을 어떻게 분석해 서블릿에 전달</strong>해주는지, <strong>스레드 풀을 이용해 동시에 들어오는 request 들을 어떻게 처리</strong>하는지에 대한 내용을 다루고 있다.</p><p>도입 부분(서블릿 컨테이너를 학습해야 하는 이유)에 다음과 같은 이야기가 있다.</p><blockquote><p>특히 성능과 관련된 문제가 발생했을 때, 웹 기반 시스템의 하위 레벨 영역인 웹 애플리케이션 서버가 담당하는 부분을 모르고서는 근본적인 원인 규명 자체가 불가능합니다. 웹 애플리케이션 서버의 내부구조와 동작 원리를 이해하지 못하는지가 웹 프로그램의 고성능, 고가용성에 대한 요구를 충족시킬 수 있는지 결정한다고 할 수 있습니다.</p></blockquote><p>위의 말에 전적으로 동의한다. 스프링을 이용해 웹 애플리케이션을 만들기 위해 스프링을 공부하고 이해하듯, 스프링이 실행되는 서블릿 컨테이너에 대한 공부와 이해도 필요하다. 아마 나와 같이 서블릿을 이용한 개발 경험 없이, 스프링을 시작했다면 이 책을 읽어보기를 더욱 추천하고 싶다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/images/post/2018-08-18_2/cover.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;a href=&quot;http://www.hanbit.co.kr/store/books/look.php?p_code=E1064947038&quot; targe
      
    
    </summary>
    
      <category term="Book" scheme="https://jongmin92.github.io/categories/Book/"/>
    
    
      <category term="java" scheme="https://jongmin92.github.io/tags/java/"/>
    
      <category term="book" scheme="https://jongmin92.github.io/tags/book/"/>
    
      <category term="review" scheme="https://jongmin92.github.io/tags/review/"/>
    
      <category term="servlet container" scheme="https://jongmin92.github.io/tags/servlet-container/"/>
    
  </entry>
  
  <entry>
    <title>Design Pattern - Iterator</title>
    <link href="https://jongmin92.github.io/2018/08/18/Java/design-pattern-iterator/"/>
    <id>https://jongmin92.github.io/2018/08/18/Java/design-pattern-iterator/</id>
    <published>2018-08-18T03:20:00.000Z</published>
    <updated>2018-08-20T13:30:27.330Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>해당 포스팅은 <a href="https://book.naver.com/bookdb/book_detail.nhn?bid=4529127" target="_blank" rel="noopener">Java 언어로 배우는 디자인 패턴 입문</a> 책을 참고해 작성했습니다.<br>사용된 코드는 <a href="https://github.com/jongmin92/Design-Pattern" target="_blank" rel="noopener">jongmin92/Design-Pattern</a> repository 에서 확인할 수 있습니다.</p></blockquote><h1 id="iterator-패턴"><a href="#Iterator-패턴" class="headerlink" title="Iterator 패턴"></a>Iterator 패턴</h1><p>Java 언어에서 배열 arr의 모든 요소를 표시하기 위해서는 다음과 같이 for문을 사용합니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    System.out.println(arr[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>for문의 i++에서 i를 하나씩 증가시키면서 배열 arr의 요소 전체를 처음부터 차례대로 검색하게 됩니다. 여기서 사용되고 있는 변수 i의 기능을 추상화해서 일반화한 것을 디자인 패턴에서는 <code>Iterator 패턴</code>이라고 합니다.</p><p><strong><code>Iterator 패턴</code>이란, 무엇인가 많이 모여있는 것들을 순서대로 지정하면서 전체를 검색하는 처리를 실행하기 위한 것입니다.</strong> Iterator는 무엇인가를 ‘반복한다’라는 의미이며, 반복자라고도 합니다.</p><h2 id="예제-프로그램"><a href="#예제-프로그램" class="headerlink" title="예제 프로그램"></a>예제 프로그램</h2><p>Iterator 패턴을 사용해 책장에 꽂혀 있는 책들을 하나씩 검색해 책 이름을 출력해보는 예제 프로그램을 작성해 보겠습니다.</p><p><img src="/images/post/2018-08-18/iterator-uml.png" alt=""></p><h3 id="aggregate-인터페이스"><a href="#Aggregate-인터페이스" class="headerlink" title="Aggregate 인터페이스"></a>Aggregate 인터페이스</h3><p><strong><code>Aggregate</code> 인터페이스는 요소들이 나열되어 있는 ‘집합체’를 나타냅니다.</strong> 이 인터페이스를 구현하고 있는 클래스는 배열과 같이 무엇인가가 많이 모여 있습니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Aggregate</span> </span>&#123;</span><br><span class="line">    <span class="function">Iterator <span class="title">iterator</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Aggregate 인터페이스에 선언되어 있는 메소드는 iterator 메소드 하나뿐입니다. 이 메소드는 집합체에 대응하는 Iterator를 1개 작성하기 위한 것입니다.</p><h3 id="iterator-인터페이스"><a href="#Iterator-인터페이스" class="headerlink" title="Iterator 인터페이스"></a>Iterator 인터페이스</h3><p><strong><code>Iterator</code> 인터페이스는 요소를 하나씩 나열하면서 루프 변수와 같은 역할을 수행합니다.</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> interface <span class="title">Iterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">Object <span class="title">next</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>hasNext</strong> 메소드는  다음 요소가 존재하는지를 조사하기 위한 메소드입니다. 다음 요소가 존재하면 true를 반환하고, 다음 요소가 존재하지 않는 마지막 요소라면 false를 반환합니다. 즉, hasNext는 루프의 종료 조건으로 사용됩니다.</p><p><strong>next</strong> 메소드는 집합체의 요소를 1개 반환합니다. 또한 next 메소드를 호출했을 때 다음 요소를 반환하도록 내부 상태를 다음으로 진행시켜 두는 역할도 함께합니다.</p><h3 id="book-클래스"><a href="#Book-클래스" class="headerlink" title="Book 클래스"></a>Book 클래스</h3><p><code>Book</code> 클래스는 책을 나타내는 클래스입니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Book</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="bookshelf-클래스"><a href="#BookShelf-클래스" class="headerlink" title="BookShelf 클래스"></a>BookShelf 클래스</h3><p><code>BookShelf</code> 클래스는 책장을 나타내는 클래스입니다. 이 클래스를 <strong>집합체로 다루기 위해 Aggregate 인터페이스를 구현합니다.</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookShelf</span> <span class="keyword">implements</span> <span class="title">Aggregate</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Book[] books;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> last = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BookShelf</span><span class="params">(<span class="keyword">int</span> maxsize)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.books = <span class="keyword">new</span> Book[maxsize];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Book <span class="title">getBookAt</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> books[index];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">appendBook</span><span class="params">(Book book)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.books[last] = book;</span><br><span class="line">        last++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getLength</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> last;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterator <span class="title">iterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BookShelfIterator(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>iterator 메소드는 BookShelf 클래스에 대응하는 Iterator로서, BookShelfIterator라는 클래스의 인스턴스를 생성해서 그것을 반환합니다.</p><h3 id="bookshelfiterator-클래스"><a href="#BookShelfIterator-클래스" class="headerlink" title="BookShelfIterator 클래스"></a>BookShelfIterator 클래스</h3><p><code>BookshelfIterator</code> 를 Iterator로서 다루기 위해 Iterator 인터페이스를 구현합니다. bookShelf 필드는 BookShelfIterator가 검색할 책장이고, index 필드는 현재 가리키는 책을 가리키는 첨자입니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookShelfIterator</span> <span class="keyword">implements</span> <span class="title">Iterator</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> BookShelf bookShelf;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> index;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BookShelfIterator</span><span class="params">(BookShelf bookShelf)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.bookShelf = bookShelf;</span><br><span class="line">        <span class="keyword">this</span>.index = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> index &lt; bookShelf.getLength();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Book book = bookShelf.getBookAt(index);</span><br><span class="line">        index++;</span><br><span class="line">        <span class="keyword">return</span> book;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="main-클래스"><a href="#Main-클래스" class="headerlink" title="Main 클래스"></a>Main 클래스</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        BookShelf bookShelf = <span class="keyword">new</span> BookShelf(<span class="number">4</span>);</span><br><span class="line">        bookShelf.appendBook(<span class="keyword">new</span> Book(<span class="string">"Effective Java"</span>));</span><br><span class="line">        bookShelf.appendBook(<span class="keyword">new</span> Book(<span class="string">"Head First Java"</span>));</span><br><span class="line">        bookShelf.appendBook(<span class="keyword">new</span> Book(<span class="string">"Thinking In Java"</span>));</span><br><span class="line">        bookShelf.appendBook(<span class="keyword">new</span> Book(<span class="string">"Agile Java"</span>));</span><br><span class="line"></span><br><span class="line">        Iterator it = bookShelf.iterator();</span><br><span class="line">        <span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">            Book book = (Book) it.next();</span><br><span class="line">            System.out.println(book.getName());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 실행결과</span></span><br><span class="line">Effective Java</span><br><span class="line">Head First Java</span><br><span class="line">Thinking In Java</span><br><span class="line">Agile Java</span><br></pre></td></tr></table></figure><h2 id="iterator-패턴의-구성요소"><a href="#Iterator-패턴의-구성요소" class="headerlink" title="Iterator 패턴의 구성요소"></a>Iterator 패턴의 구성요소</h2><ul><li><p><strong>Iterator(반복자)의 역할</strong><br>요소를 순서대로 검색해가는 인터페이스(API)를 결정 (hasNext, next)</p></li><li><p><strong>ConcreteIterator(구체적인 반복자)의 역할</strong><br>Iterator가 결정한 인터페이스(API)를 실제로 구현</p></li><li><p><strong>Aggregate(집합체)의 역할</strong><br>Iterator 역할을 만들어내는 인터페이스(API)를 결정</p></li><li><p><strong>ConcreteAggregate(구체적인 집합체)의 역할</strong><br>Aggregate 역할이 결정한 인터페이스(API)를 실제로 구현</p></li></ul><h2 id="사고-넓히기"><a href="#사고-넓히기" class="headerlink" title="사고 넓히기"></a>사고 넓히기</h2><h3 id="구현에-상관-없이-iterator를-사용할-수-있다"><a href="#구현에-상관-없이-Iterator를-사용할-수-있다" class="headerlink" title="구현에 상관 없이 Iterator를 사용할 수 있다."></a>구현에 상관 없이 Iterator를 사용할 수 있다.</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">Book book = (Book) it.next();</span><br><span class="line">System.out.println(book.getName());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>여기서 사용되고 있는 것은 hasNext와 next라는 Iterator의 메소드 뿐입니다. BooShelf의 구현에서 사용되고 있는 메소드는 호출되고 있지 않습니다. 결국 위 코드의 <strong>while 루프는 BookShelf의 구현에 의존하지 않습니다.</strong></p><p>그렇기 때문에 현재 배열을 사용해 구현하고 있는 BookShelf를 List를 사용하도록 수정해도, 위의 while 루프는 전혀 <strong>변경하지 않아도 동작</strong>합니다.</p><h3 id="aggregate와-iterator의-대응"><a href="#Aggregate와-Iterator의-대응" class="headerlink" title="Aggregate와 Iterator의 대응"></a>Aggregate와 Iterator의 대응</h3><p>BookShelfIterator는 BookShelf가 어떻게 구현되고 있는지 알기 때문에, ‘다음 책’을 얻기 위해 getBookAt 메소드를 호출할 수 있었습니다.</p><p>만약 BookShelf의 구현을 전부 변경하고, getBookAt 메소드라는 인터페이스(API)도 변경된다면 BookShelfIterator의 수정이 필요하게 됩니다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;해당 포스팅은 &lt;a href=&quot;https://book.naver.com/bookdb/book_detail.nhn?bid=4529127&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Java 언어로 배우는 디자인 
      
    
    </summary>
    
      <category term="Programming" scheme="https://jongmin92.github.io/categories/Programming/"/>
    
      <category term="Java" scheme="https://jongmin92.github.io/categories/Programming/Java/"/>
    
    
      <category term="java" scheme="https://jongmin92.github.io/tags/java/"/>
    
      <category term="design pattern" scheme="https://jongmin92.github.io/tags/design-pattern/"/>
    
      <category term="iterator" scheme="https://jongmin92.github.io/tags/iterator/"/>
    
  </entry>
  
  <entry>
    <title>소나큐브</title>
    <link href="https://jongmin92.github.io/2018/08/12/Tool/sonarqube/"/>
    <id>https://jongmin92.github.io/2018/08/12/Tool/sonarqube/</id>
    <published>2018-08-12T08:30:00.000Z</published>
    <updated>2018-08-12T08:50:21.958Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>해당 포스팅은 <strong>‘<a href="http://www.hanbit.co.kr/store/books/look.php?p_code=B8716214772" target="_blank" rel="noopener">자바 필수 프로젝트 유틸리티</a>‘</strong> 책의 <code>8.3 소나큐브</code> 부분을 참고해 작성했습니다.</p></blockquote><h1 id="소나큐브"><a href="#소나큐브" class="headerlink" title="소나큐브"></a>소나큐브</h1><p>소나큐브를 사용해서 작성한 코드를 정적 분석하고 작성한 테스트로 얼마나 검증했는지 측정할 수 있다.</p><p>소나큐브를 로컬 환경에 설치하고 젠킨스와 소나큐브를 연결해서 소나큐브의 기본 퀄리티 게이트(Quality Gate)를 실행시켜보자. 퀄리티 게이트는 조직의 모든 소스가 통과해야만 하는 소스의 품질을 정의해둔 것으로 소스의 품질을 보증하는 수단으로 이용된다.</p><h2 id="기능과-특징"><a href="#기능과-특징" class="headerlink" title="기능과 특징"></a>기능과 특징</h2><p><strong>소나큐브의 주요 기능</strong>은 아래와 같다.</p><ul><li>복잡도 확인</li><li>코드 중복 검출</li><li>코딩 규칙 확인</li><li>잠재적 버그 검출</li><li>단위 테스트</li><li>커버리지</li></ul><p>소나큐브 자체에서 지원하는 심플한 UI를 이용해 프로젝트의 소스 코드가 얼마나 개선되고 있는지를 직관적으로 확인할 수 있다. <strong>소나큐브의 특징</strong>은 다음과 같다.</p><ul><li>서버는 크게 웹 서버, 검색 서버, 연산 서버로 구성된다.</li><li>데이터베이스는 소나큐브 자체의 설정과 각 프로젝트의 정보가 저장된다.</li><li>플러그인을 추가할 수 있다.</li><li>소나큐브 스캐너(SonarQube Scanner)로 코드를 분석한다.</li></ul><h2 id="설치"><a href="#설치" class="headerlink" title="설치"></a>설치</h2><p>brew를 이용해 설치 후 실행한다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ brew install sonarqube</span><br><span class="line">$ brew services start sonarqube</span><br></pre></td></tr></table></figure><p>brew를 이용해 설치하게 되면 다음과 <strong>/usr/local/Cellar/sonarqube/7.2.1/libexec/conf</strong> 디렉터리에 설치된다. 각 디렉터리의 역할은 다음과 같다.</p><ul><li>bin : 운영체제별 실행파일이 있다.</li><li>conf : 소나큐브의 설정 팡리이 있다. 설정 파일에서 데이터베이스 연결과 웹 서버의 설정 등을 한다.</li><li>data : 기본 데이터베이스인 H2 데이터베이스를 사용할 때 데이터가 저장되는 곳이다. 테스트 목적이 아니라면, 실제 운영할 때는 다른 데이터베이스를 사용해야 한다.</li><li>elasticsearch : 루씬 기반의 검색 엔진인 elasticsearch가 포함되어 있다.</li><li>extensions : jdbc-driver와 플러그인이 포함된다.</li><li>lib : 실제 애플리케이션 바이너리가 포함되어 있다.</li><li>logs : 각 로그가 출력되는 디렉터리이다. 설정 파일에서 변경 가능하다.</li><li>temp : 서버 실행 시에 필요한 임시 파일이 저장된다. 실행 중에 삭제하면 안된다.</li><li>web : UI에 필요한 이미지와 CSS, JS 파일이 있다.</li></ul><p>실행 후 <a href="http://localhost:9000에" target="_blank" rel="noopener">http://localhost:9000에</a> 접속하면 다음과 같은 화면을 볼 수 있다.<br><img src="/images/post/2018-08-12/sonar_1.png" alt=""></p><p>관리자로 접속해서 젠킨스와 연결할 사용자를 만들어 보자. 오른쪽 상단 위에 있는 <strong>‘Log in’</strong> 을 클릭한 후 초기 ID/PW인 admin/admin을 입력해서 로그인한다.<br><img src="/images/post/2018-08-12/sonar_2.png" alt=""></p><p>로그인이 완료되면 튜토리얼 페이지가 나온다. 우측 상단의 <strong>‘Skip this tutorial’</strong> 을 클릭해서 스킵한다.<br><img src="/images/post/2018-08-12/sonar_3.png" alt=""></p><p>아래와 같이 프로젝트 페이지를 확인할 수 있다.<br><img src="/images/post/2018-08-12/sonar_4.png" alt=""></p><h2 id="젠킨스-사용자-생성"><a href="#젠킨스-사용자-생성" class="headerlink" title="젠킨스 사용자 생성"></a>젠킨스 사용자 생성</h2><p>젠킨스에서 소나큐브에 접속할 때 사용할 사용자를 생성한다.</p><p>화면 상단의 메뉴에서 <strong>‘Administration’ -&gt; ‘Security’ -&gt; ‘Users’ -&gt; ‘Create User’</strong> 를 클릭해서 사용자 생성 창을 출력한다.<br><img src="/images/post/2018-08-12/sonar_5.png" alt=""></p><p>jenkins라는 이름으로 사용자를 생성한다.<br><img src="/images/post/2018-08-12/sonar_6.png" alt=""></p><p>젠킨스에서 접속할 때 사용할 토큰을 생성한다. 조금전 생성한 jenkins 유저의 <strong>‘Token’</strong> 을 클릭한다.<br><img src="/images/post/2018-08-12/sonar_7.png" alt=""></p><p><strong>‘Enter Token Name’</strong> 에 적당한 이름을 넣고 <strong>‘Generate’</strong> 버튼을 눌러서 생성한다.<br><img src="/images/post/2018-08-12/sonar_8.png" alt=""></p><p>생성된 토큰 앞에 있는 <strong>‘Copy’</strong> 버튼을 눌러 젠킨스에서 사용할 키를 저장한다.<br><img src="/images/post/2018-08-12/sonar_9.png" alt=""></p><h2 id="소나큐브-스캐너-설정"><a href="#소나큐브-스캐너-설정" class="headerlink" title="소나큐브 스캐너 설정"></a>소나큐브 스캐너 설정</h2><p>이번에는 젠킨스의 빌드 과정에서 소나큐브를 연동한다.</p><p><strong>‘Jenkins 관리’ -&gt; ‘플러그인 관리’에서 ‘SonarQube Scanner’를 설치</strong> 한다.<br><img src="/images/post/2018-08-12/sonar_10.png" alt=""></p><p><strong>‘Jenkins 관리’ -&gt; ‘시스템 설정’</strong> 으로 이동하면, <strong>‘SonarQube servers’</strong> 라는 설정이 추가된것을 확인할 수 있다. 만약 플러그인을 설치했는데도 해당 설정이 표시되지 않는다면 젠킨스 서버를 재실행해본다.</p><p><strong>‘Add SonarQube’</strong> 를 클릭한다.<br><img src="/images/post/2018-08-12/sonar_11.png" alt=""></p><p><strong>‘고급’</strong> 버튼을 클릭한 후 시스템 환경 변수를 사용하도록 각각 다음과 같이 설정한다.</p><ul><li>Environment variables : 체크 박스 선택</li><li>Name : SonarQube-Local 입력 (스페이스와 한글을 입력하지 않는다.)</li><li>Server URL : 소나큐브의 URL 입력(여기서는 default인 <a href="http://localhost:9000" target="_blank" rel="noopener">http://localhost:9000</a>)</li><li>Server authentication token : 소나큐브에서 생성한 토큰 입력</li><li>Additional analysis properties :<br>sonar.sources=src sonar.java.binaries=target/classes, target/test-classes<br><img src="/images/post/2018-08-12/sonar_12.png" alt=""></li></ul><p><strong>‘저장’</strong> 을 클릭해서 저장한다.</p><p>소나큐브 스캐너를 추가하는 작업을 진행한다. <strong>‘Jenkins 관리’ -&gt; ‘Global Tool Configuration’</strong> 을 클릭한다.<br><img src="/images/post/2018-08-12/sonar_13.png" alt=""></p><p><strong>‘SonarQube Scanner for MSBuild’와 ‘SonarQube Scanner’</strong> 아래의 버튼을 클릭해서 각각 스캐너를 추가한다.<br><img src="/images/post/2018-08-12/sonar_14.png" alt=""></p><p>‘Name’에 적당한 이름을 넣고 <strong>‘Install automatically’</strong> 가 체크되어 있는지 확인 후 저장한다.<br><img src="/images/post/2018-08-12/sonar_15.png" alt=""></p><p><img src="/images/post/2018-08-12/sonar_16.png" alt=""></p><p>새로운 잡을 생성해서 테스트 해보자.</p><ol><li><p>젠킨스 메인 페이지에서 ‘새로운 Item’을 클릭하고 잡 이름에 ‘SonarQubeTset’를 입력하고 ‘Freestyle project’를 선택 후 저장 버튼을 클릭한다.</p></li><li><p>소스 코드 관리 : 테스트 프로젝트의 깃허브 주소를 넣는다. (여기서는 ‘<a href="http://www.hanbit.co.kr/store/books/look.php?p_code=B8716214772" target="_blank" rel="noopener">자바 필수 프로젝트 유틸리티</a>‘ 책에서 제공한 ‘<a href="https://github.com/jongmin92/spring-mvc-example" target="_blank" rel="noopener">spring-mvc-example</a>‘ 프로젝트를 fork해 사용했다.)</p></li><li><p>Credentials : 저장되어 있는 자격증명에서 선택한다.</p></li><li><p>빌드 환경에서 ‘Prepare SonarQube Scanner environment’를 선택한다. (이번 테스트에서는 필요하지는 않지만, ‘빌드 환경’에서 호나경 변수를 사용할 수 있게 하려고 체크하는 것이다.)</p></li><li><p>Build : ‘Invoke top-level Maven targets’를 선택한다.</p></li><li><p>Goals : ‘clean install’을 입력한다. (다른 골을 추가해도 된다.)</p></li><li><p>다시 Build의 ‘Add build step’을 클릭해서 ‘Execute SonarQube Scaner’를 추가한 후 ‘Analysis properties’에 아래의 정보를 입력한다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sonar.projectKey=spring-mvc-example</span><br><span class="line">sonar.projectName=spring-mvc-example</span><br><span class="line">sonar.projectVersion=1.0.0</span><br></pre></td></tr></table></figure><p>이 테스트에서는 고정값으로 입력했지만 매개변수로 처리하거나 환경 변수에서 치환하는 방법도 많이 사용한다.</p></li><li><p>‘저장’ 버튼을 클릭해서 잡 대시보드로 이동한다.</p></li></ol><p>소나큐브의 아이콘이 추가된것을 확인할 수 있다.<br><img src="/images/post/2018-08-12/sonar_17.png" alt=""></p><h2 id="소나큐브-빌드"><a href="#소나큐브-빌드" class="headerlink" title="소나큐브 빌드"></a>소나큐브 빌드</h2><p><strong>‘Build Now’</strong> 를 클릭해서 빌드한다. 정상 종료되면 <strong>‘SonarQube Quality Gate’</strong> 가 표시되고 실행 결과를 알려준다.</p><p>화면에 표시되는 ‘SonarQube’ 링크나 ‘OK’를 클릭하면 소나큐브의 대시보드로 이동한다.<br><img src="/images/post/2018-08-12/sonar_18.png" alt=""></p><p><img src="/images/post/2018-08-12/sonar_19.png" alt=""></p><p>상단의 메뉴에서 ‘Issues’, ‘Code’를 통해 각 결과를 확인할 수 있다.<br><img src="/images/post/2018-08-12/sonar_20.png" alt=""></p><p><img src="/images/post/2018-08-12/sonar_21.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;해당 포스팅은 &lt;strong&gt;‘&lt;a href=&quot;http://www.hanbit.co.kr/store/books/look.php?p_code=B8716214772&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;자바
      
    
    </summary>
    
      <category term="Programming" scheme="https://jongmin92.github.io/categories/Programming/"/>
    
      <category term="Tool" scheme="https://jongmin92.github.io/categories/Programming/Tool/"/>
    
    
      <category term="jenkins" scheme="https://jongmin92.github.io/tags/jenkins/"/>
    
      <category term="ci &amp; cd" scheme="https://jongmin92.github.io/tags/ci-cd/"/>
    
      <category term="sonarqube" scheme="https://jongmin92.github.io/tags/sonarqube/"/>
    
  </entry>
  
  <entry>
    <title>젠킨스</title>
    <link href="https://jongmin92.github.io/2018/08/09/Tool/jenkins/"/>
    <id>https://jongmin92.github.io/2018/08/09/Tool/jenkins/</id>
    <published>2018-08-08T16:50:00.000Z</published>
    <updated>2018-08-12T08:31:15.974Z</updated>
    
    <content type="html"><![CDATA[<h1 id="젠킨스"><a href="#젠킨스" class="headerlink" title="젠킨스"></a>젠킨스</h1><p><strong><code>젠킨스</code></strong> 는 자바로 작성된 오픈 소스 소트트웨어로 <strong>지속적 통합</strong>(Continuous Integration, <strong>CI</strong>)과 <strong>지속적 배포</strong>(Continuous Delivery, <strong>CD</strong>)를 제공한다.</p><p>웹 애플리케이션 형태로 제공되고 있어서 어떠한 환경에서도 손쉽게 설치할 수 있으며 도커를 사용해 설치할 수도 있다. 또한 천 개 이상의 플러그인으로 다양한 시스템과 연동할 수 있다.</p><p>젠킨스의 주요 기능은 다음과 같다.</p><ul><li>형상관리 도구와의 연동</li><li>소스 코드 체크아웃</li><li>웹 인터페이스</li><li>테스트 보고서 생성</li><li>빌드 및 테스트 자동화</li><li>실행 결과 통보</li><li>코드 품질 감시</li><li>다양한 인증 기반과 결합한 인증 및 권한 관리</li><li>배포 관리 자동화</li><li>분산 빌드(마스터 슬레이브)</li><li>그루비 스크립트를 이용한 자유로운 잡 스케줄링</li></ul><p>젠킨스는 개발자가 소스코드를 추가, 수정한 뒤 형상관리 도구에 저장하면 자동으로 읽어 빌드 및 테스트를 실행한다.</p><h2 id="젠킨스-설치"><a href="#젠킨스-설치" class="headerlink" title="젠킨스 설치"></a>젠킨스 설치</h2><p>젠킨스를 사용하려면 JDK와 메이븐이 필요하다.</p><p>macOS에서 brew를 이용해 쉽게 설치가 가능하다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ brew install jenkins</span><br></pre></td></tr></table></figure><p>추후 필요하다면 다음과 같이 삭제할 수도 있다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ brew remove jenkins</span><br></pre></td></tr></table></figure><p>설치 후 다음과 같이 젠킨스를 백그라운드 서비스로 구동 및 중지가 가능하다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ brew services start jenkins</span><br><span class="line">$ brew services stop jenkins</span><br></pre></td></tr></table></figure><p>젠킨스를 실행 후 웹사이트에 접속한다. <a href="http://localhost:8080" target="_blank" rel="noopener">http://localhost:8080</a><br><img src="/images/post/2018-08-09/set_up_1.png" alt=""></p><p>처음 접속 시 Administrator password를 입력하게 되어 있는데 아래의 경로에 있는 파일에서 키를 확인해 입력한다.</p><p><code>/Users/{사용자 계정}/.jenkins/secrets/initialAdminPassword</code></p><p><img src="/images/post/2018-08-09/set_up_2.png" alt=""><br>젠킨스를 어떻게 설치할지 결정할 수 있다. ‘Install suggested plugins’를 선택하면 젠킨스에서 추천하는 플러그인들이 같이 설치되고, ‘Select plugins to install’을 선택하면 필요한 플러그인을 선택하여 설치할 수 있다.</p><p><img src="/images/post/2018-08-09/set_up_3.png" alt=""><br>필요한 플러그인들을 자동으로 설치하기 시작한다.</p><p><img src="/images/post/2018-08-09/set_up_4.png" alt=""><br>설치가 끝나면 관리자 정보 입력 화면이 나온다. 정보를 입력한 후 ‘Save and Finish’ 버튼을 클릭한다.</p><p><img src="/images/post/2018-08-09/set_up_5.png" alt=""><br><img src="/images/post/2018-08-09/set_up_6.png" alt=""></p><h2 id="빌드-잡job-생성하기"><a href="#빌드-잡-job-생성하기" class="headerlink" title="빌드 잡(job) 생성하기"></a>빌드 잡(job) 생성하기</h2><ol><li>좌측 메뉴 상단에 있는 ‘새로운 Item’을 클릭한다. ‘Enter an item name’에 적당한 이름을 넣고 아래의 템플릿 중 ‘Freestyle project’를 선택한 후 ‘OK’ 버튼을 클릭한다. (Freestyle project는 거의 모든 젠킨스의 설정을 자유롭게 설정할 수 있다.)<br> <img src="/images/post/2018-08-09/set_up_7.png" alt=""></li><li>Github에 테스트를 위해 간단하게 만들어 놓은 프로젝트를 가져와 빌드를 테스트 한다.<br> <img src="/images/post/2018-08-09/set_up_8.png" alt=""></li><li>Github에서 프로젝트를 가져오기 위해서는 자격 증명을 추가해야 한다. ssh-key를 등록하거나 Github의 계정을 입력해야 한다.<br> <img src="/images/post/2018-08-09/set_up_9.png" alt=""></li><li>Credentials 선택 박스에서 조금 전 추가한 계정을 선택한 후 ‘저장’ 버튼을 클릭한다.<br> <img src="/images/post/2018-08-09/set_up_10.png" alt=""></li><li>‘Build Now’를 클릭해 빌드를 진행한다.<br> <img src="/images/post/2018-08-09/set_up_11.png" alt=""></li><li>‘Console Output’을 누르면 빌드가 성공한 것을 확인할 수 있다.<br> <img src="/images/post/2018-08-09/set_up_12.png" alt=""></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;젠킨스&quot;&gt;&lt;a href=&quot;#젠킨스&quot; class=&quot;headerlink&quot; title=&quot;젠킨스&quot;&gt;&lt;/a&gt;젠킨스&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;&lt;code&gt;젠킨스&lt;/code&gt;&lt;/strong&gt; 는 자바로 작성된 오픈 소스 소트트웨어로 &lt;strong&gt;지
      
    
    </summary>
    
      <category term="Programming" scheme="https://jongmin92.github.io/categories/Programming/"/>
    
      <category term="Tool" scheme="https://jongmin92.github.io/categories/Programming/Tool/"/>
    
    
      <category term="jenkins" scheme="https://jongmin92.github.io/tags/jenkins/"/>
    
      <category term="ci &amp; cd" scheme="https://jongmin92.github.io/tags/ci-cd/"/>
    
  </entry>
  
  <entry>
    <title>그레이들 기초</title>
    <link href="https://jongmin92.github.io/2018/08/08/Tool/gradle_basic/"/>
    <id>https://jongmin92.github.io/2018/08/08/Tool/gradle_basic/</id>
    <published>2018-08-07T16:25:00.000Z</published>
    <updated>2018-08-08T16:49:27.534Z</updated>
    
    <content type="html"><![CDATA[<h1 id="그레이들"><a href="#그레이들" class="headerlink" title="그레이들"></a>그레이들</h1><h2 id="그루비와-그레이들"><a href="#그루비와-그레이들" class="headerlink" title="그루비와 그레이들"></a>그루비와 그레이들</h2><p><strong><code>그루비</code></strong>는 자바 가상머신에서 동작하는 오픈 소스 스크립트 언어이다. 그루비는 자바 문법을 더욱 쉽게 쓰기 위해 스크립트 언어와 비슷한 문법으로 되어 있어서, 대부분의 자바 프로그래머는 자바 코드를 작성하는 느낌으로 그루비를 작성할 수 있다. 동적 언어이며 자바와 달리 작성한 스크립트를 컴파일할 필요 없이 직접 실행할 수도 있다.</p><p>또한, 일부 자바 프레임워크에서는 그루비를 지원한다. 대표적인 스프링 프레임워크에서도 그루비를 이용할 수 있다.</p><p>이처럼 자바와 거의 같고, 스크립트 언어처럼 부담 없이 작성해서 바로 실행할 수 있는 특징을 고려하면, 그루비를 사용해서 자바 빌드 도구를 만들려는 생각은 자연스럽다.</p><p>그루비의 이러한 이점을 최대한 활용해서 개발한 빌드 도구가 <strong><code>그레이들</code></strong>이다.</p><h2 id="그레이들이란"><a href="#그레이들이란" class="headerlink" title="그레이들이란"></a>그레이들이란</h2><p><strong>그레이들은 그루비를 사용한 빌드 도구이다.</strong> 메이븐은 XML을 이용하여 빌드 정보를 기술했는데, 그레이들은 그루비를 이용해 빌드 정보를 기술하기 한다. 때문에 자바 프로그래머가 좀 더 쉽게 다룰 수 있다.</p><p>그레이들의 특징은 다음과 같다.</p><ul><li><strong>유연한 언어로 기술</strong><br>그루비라는 프로그래밍 언어를 사용해서 기술하기 때문에 유연하게 각종 처리를 수행할 수 있다. 또한 기술하는 내용을 분할하거나 구조화하는 것도 간단하다.</li><li><strong>태스크로 처리</strong><br>그레이들은 ‘태스크’라는 개념을 이용해 프로그램을 작성한다. 다양한 용도별로 태스크를 만들어서 그 안에 처리를 기술한다.</li><li><strong>자바/그루비/스칼라 기본 지원 + 알파</strong><br>그레이들은 자바 가상 머신에서 동작하는 언어를 중심으로 지원한다. (별도의 네이티브 코드 플러그인을 사용하면 C/C++ 등, 다른 언어에도 대응할 수 있다.)</li><li><strong>각종 도구와 통합</strong><br>여러 도구들(앤트, 아파치 아이비 등)과 통합되어 처리를 실행할 수 있다. 또한, 메이븐의 pom.xml을 그레이들용으로 변환하는 도구도 있다.</li><li><strong>메이븐 중앙 저장소 대응</strong><br>그레이들에서는 메이븐 중앙 저장소를 지원하기 때문에, 중앙 저장소에 있는 라이브러리 모두 그대로 이용 가능하다.</li></ul><h2 id="그레이들-사용하기"><a href="#그레이들-사용하기" class="headerlink" title="그레이들 사용하기"></a>그레이들 사용하기</h2><p>그레이들 소프트웨어에는 그루비가 포함되어 있기 때문에, 단지 그레이들을 사용하는 용도라면 그루비를 설치할 필요는 없다. (그레이들을 설치하는 것만으로는 그루비 언어를 이용해서 프로그래밍할 수는 없다.)</p><h2 id="그레이들-프로젝트-생성"><a href="#그레이들-프로젝트-생성" class="headerlink" title="그레이들 프로젝트 생성"></a>그레이들 프로젝트 생성</h2><p>그레이들 명령어를 사용해 프로젝트를 생성할 수 있다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir gradle-app</span><br><span class="line"><span class="built_in">cd</span> gradle-app</span><br><span class="line">gradle init --<span class="built_in">type</span> java-library</span><br></pre></td></tr></table></figure><p><strong>gradle init</strong></p><p>그레이들 명령어는 gradle OO 형태로 실행한다. 위에서 프로젝트를 생성하며 사용한 init은 그레이들에서 <strong><code>&#39;태스크&#39;</code></strong>라고 부른다. 이 init은 프로젝트의 기본적은 파일과 폴더를 생성한다.</p><p>–type은 생성할 프로젝트의 타입을 지정하는 옵션인데, java-library는 자바 프로젝트임을 나타낸다. 지정한 언어의 샘플 코드를 생성한다. 이 옵션을 생략하면 그레이들 프로젝트의 기본적인 파일들만 생성된다.</p><blockquote><p><strong>그레이들 실행과 태스크</strong></p><p>그레이들에서는 다양한 처리를 위해 ‘태스크’를 이용한다. 태스크란, 실행할 처리를 모아놓은 단위로 그레이들에서 처음부터 포함된 것도 있고, 프로그래머가 작성할 수도 있다. 이 태스크를 실행하는 것이 그레이들에서 빌드를 관리하는 기본적인 방법이다. 프로젝트를 컴파일하거나, 실행하는 모든 처리에 태스크를 이용한다.</p></blockquote><p>생성된 gradle-app 폴더 내부의 구조를 살펴보자.</p><ul><li>.gradle 폴더 : 태스크로 생성된 파일 등을 보존한다.</li><li>gradle 폴더 : 기본값으로는 그레이들 환경을 모아놓은 wrapper 파일이라고 하는 파일들이 들어 있다.</li><li>src 폴더 : 소스 코드 관련 파일을 이곳에 작성한다.</li><li>build.gradle : 그레이들 빌드 파일, 이곳에 프로젝트의 빌드 내용을 기술한다.</li><li>settings.gradle : 빌드 설정 정보를 기술한 파일. 빌드를 실행하기 전에 읽히기 때문에, 필요한 라이브러리를 읽는 등의 기술을 할 수 있다.</li></ul><p>이번에는 생성된 파일의 코드를 확인해보자.</p><p><strong>build.gradle</strong></p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 자바 프로그램을 빌드할 경우에는 java 플러그인을 로드한다.</span></span><br><span class="line">apply <span class="string">plugin:</span> <span class="string">'java'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 저장소 정보를 관리하는 프로퍼티이다. 이곳에서 저장소를 설정할 수 있다. (로컬 환경이나 원격 저장소 기술)</span></span><br><span class="line"><span class="comment">// jcenter는 그레이들에서 중앙 저장소로 이용되는 저장소이다.</span></span><br><span class="line"><span class="comment">// 메이븐 중앙 저장소는 mavenCentral 메서드를 이용해서 사용할 수 있다.</span></span><br><span class="line">repositories &#123;</span><br><span class="line">    jcenter()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 의존성에 관한 설정을 관리하는 프로퍼티이다. 필요한 라이브러리등의 정보를 기술한다.</span></span><br><span class="line">dependencies &#123;</span><br><span class="line">    compile <span class="string">'org.slf4j:slf4j-api:1.7.21'</span></span><br><span class="line">    testCompile <span class="string">'junit:junit:4.12'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>settings.gradle</strong></p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 루트 프로젝트의 이름을 설정한다. 루트 프로젝트는 다수의 프로젝트를 관리할 때 기본이 되는 프로젝트를 가리킨다. 여기에서는 '이 빌드 파일로 빌드할 프로젝트의 이름'이라고 생각하면 된다.</span></span><br><span class="line">rootProject.name = <span class="string">'gradle-app'</span></span><br></pre></td></tr></table></figure><h2 id="인텔리제이에서-사용하기"><a href="#인텔리제이에서-사용하기" class="headerlink" title="인텔리제이에서 사용하기"></a>인텔리제이에서 사용하기</h2><p>인텔리제이는 표준으로 그레이들을 지원한다. 인텔리제이에서 그레이들용 프로젝트를 생성할 경우, <strong>gradle init –type java-library</strong> 명령어를 사용하는 경우와 결과가 조금 다르다.</p><p><strong>build.gradle</strong></p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">group <span class="string">'com.jongmin'</span></span><br><span class="line">version <span class="string">'1.0-SNAPSHOT'</span></span><br><span class="line"></span><br><span class="line">apply <span class="string">plugin:</span> <span class="string">'java'</span></span><br><span class="line"></span><br><span class="line">sourceCompatibility = <span class="number">1.8</span></span><br><span class="line"></span><br><span class="line">repositories &#123;</span><br><span class="line">    mavenCentral()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    testCompile <span class="string">group:</span> <span class="string">'junit'</span>, <span class="string">name:</span> <span class="string">'junit'</span>, <span class="string">version:</span> <span class="string">'4.12'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>시작 부분에 그룹 ID와 버전을 지정하는 문장이 포함되어 있다. gradle init으로 작성한 build.gradle에서는 포함되지 않았는데, 그 이유는 메이븐 저장소를 이용하기 때문이다. 메이븐에는 모든 프로그램에 그룹 ID와 아티팩트 ID가 할당되어 있다.</p><p>sourceCompatibility는 자바 소스 코드의 버전을 가리킨다.</p><h2 id="태스크-실행"><a href="#태스크-실행" class="headerlink" title="태스크 실행"></a>태스크 실행</h2><p>메이븐과 마찬가지로 실행할 내용을 <strong>‘Run…’ -&gt; ‘Edit Configurations’</strong> 메뉴에서 컨피그레이션에 설정하면 인텔리제이의 ‘Run’으로 프로그램의 빌드와 실행, 디버그 등의 기능을 수행할 수 있다.</p><h2 id="buildgradle"><a href="#build-gradle" class="headerlink" title="build.gradle"></a>build.gradle</h2><p>그래이들은 build.gradle에 기술한 코드를 필요에 따라 실행하여 빌드를 실행한다.</p><p>그레이들은 ‘그루비를 사용하는 빌드 도구’이다. 하지만 이는 정확한 설명은 아니다. 그레이들은 ‘그루비 그 자체’는 아니고 <strong>‘그루비 기반의 DSL(Domain Specific Language)’</strong>이다.</p><p>DSL은 ‘도메인 고유 언어’라고 불리는데, 특정한 용도에 한정된 언어를 말한다. 그 언어 그 자체는 아니고, 특정한 용도에 맞게 해당 언어를 기반으로 각색한 것이다. 그레이들에서 사용되는 언어는 ‘그루비를 기반으로 작성된 Gradle DLS’이다.</p><p><strong>그레이들은 기본적으로 태스크를 작성하여 실행한다.</strong> 태스크는 실행할 처리를 모아서 명령어로서 실행할 수 있게 한 것이다. 다음과 같은 형식으로 정의한다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">task 이름&#123;</span><br><span class="line">    ...실행할 처리...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이렇게 정의한 태스크는 명령행에서 <strong>gradle 이름</strong> 형태로 실행할 수 있다.</p><p>간단한 예제를 작성해 실행해보자. 다음과 같이 build.gradle을 수정한다.</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">task hello &#123;</span><br><span class="line">   doLast &#123;</span><br><span class="line">       println();</span><br><span class="line">       println(<span class="string">"================="</span>);</span><br><span class="line">       println(<span class="string">"Welcome to Gradle!"</span>);</span><br><span class="line">       println(<span class="string">"================="</span>);</span><br><span class="line">       println();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>수정한 후, 명령행에서 다음과 같이 실행한다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gradle hello</span><br></pre></td></tr></table></figure><p>결과는 다음과 같다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt; Task :hello</span><br><span class="line"></span><br><span class="line">=================</span><br><span class="line">Welcome to Gradle!</span><br><span class="line">=================</span><br><span class="line"></span><br><span class="line">BUILD SUCCESSFUL <span class="keyword">in</span> 2s</span><br><span class="line">1 actionable task: 1 executed</span><br></pre></td></tr></table></figure><p>그레이들은 기본적으로 빌드 도구이지만, 여기에서는 빌드도 컴파일도 하지 않고, 단지 메시지를 표시했다. 태스크는 작성된 처리를 실행할 뿐이지, 반드시 빌드와 관련된 기능이 포함되어야 하는 것은 아니다.</p><h3 id="quiet-모드로-실행"><a href="#quiet-모드로-실행" class="headerlink" title="quiet 모드로 실행"></a>quiet 모드로 실행</h3><p>이번에는 <strong>quiet 모드</strong>로 실행해보자.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gradle -q hello</span><br></pre></td></tr></table></figure><p>결과는 다음과 같다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">=================</span><br><span class="line">Welcome to Gradle!</span><br><span class="line">=================</span><br></pre></td></tr></table></figure><p>이렇게 하면 hello에서 println한 내용만 출력되며, 그 이외의 내용은 표시되지 않는다. <code>-q 옵션</code>은 태스크를 quiet 모드로 실행해 예외 발생 등 중요한 문제 이외의 표시가 제한된다. 태스크의 실행 결과만 알고 싶을 때 편리한 옵션이다.</p><blockquote><p><strong>액션 리스트</strong></p><p>태스크는 다양한 ‘액션’을 내부에 가지고 있다. 태스크를 실행하면 준비된 액션이 순서대로 실행된다. 이 액션을 관리하는 것이 ‘액션 리스트’이다. 액션은 어떤 역할을 하는지가 정해져 있다. 필요에 따라 액션에 처리를 추가해 태스크를 조합할 수 있다.</p><p>액션 중에서도 <strong>doFirst</strong>와 <strong>doLast</strong>가 가장 많이 사용된다. 각각 ‘처음에 실행되는 액션’과 ‘마지막에 실행되는 액션’이다. 이들을 이용해 태스크의 처음과 마지막에 처리를 실행할 수 있다.</p></blockquote><h3 id="매개변수-이용"><a href="#매개변수-이용" class="headerlink" title="매개변수 이용"></a>매개변수 이용</h3><p>태스크를 실행할 때 어떤 정보를 태스크에 전달하고 싶은 경우도 있다. 이럴 때 매개변수를 이용할 수 있다.</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">task hello &#123;</span><br><span class="line">   doLast &#123;</span><br><span class="line">       <span class="keyword">def</span> total = <span class="number">0</span>;</span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">def</span> i <span class="keyword">in</span> <span class="number">1.</span>.num.toInteger()) &#123;</span><br><span class="line">           total += i;</span><br><span class="line">       &#125;</span><br><span class="line">       println(<span class="string">"total: "</span> + total);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1에서 num까지 합하는 태스크이다. 여기서 사용되는 num이 매개변수로 전달되는 프로퍼티이다. 이처럼 매개변수에서 전달되는 값을 프로퍼티로 사용할 수 있다. 단, 주의할 점은 값이 String이라는 것이다.</p><p>hello 태스크는 다음과 같이 실행한다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gradle hello -q -Pnum=100</span><br></pre></td></tr></table></figure><p>이처럼 태스크를 실행하는 동안에는 <strong>-P프로퍼티=값</strong> 형태로 특정 변수에 값을 전달할 수 있다.</p><h3 id="동적-태스크-실행"><a href="#동적-태스크-실행" class="headerlink" title="동적 태스크 실행"></a>동적 태스크 실행</h3><p>스크립트를 사용해서 동적으로 태스크를 생성할 수도 있다.</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> arr = [<span class="string">"one"</span>, <span class="string">"two"</span>, <span class="string">"three"</span>];</span><br><span class="line">arr.each &#123;s -&gt;</span><br><span class="line">    task <span class="string">"$s"</span> &#123;</span><br><span class="line">        doLast &#123;</span><br><span class="line">            println(<span class="string">"this is $s task."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>다음과 같이 실행한다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gradle -q one</span><br></pre></td></tr></table></figure><h3 id="java-플러그인-사용하기"><a href="#java-플러그인-사용하기" class="headerlink" title="java 플러그인 사용하기"></a>java 플러그인 사용하기</h3><p>자바로 개발할 때 필요한 기본적인 기능은 ‘java’ 플러그인에 포함되어 있다. build.gradle에서 로드하여 이용한다.</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apply <span class="string">plugin:</span> <span class="string">'java'</span></span><br></pre></td></tr></table></figure><p>다음의 명령어로 빌드한다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gradle java</span><br></pre></td></tr></table></figure><p>위 명령어를 실행하면 프로젝트가 컴파일되고 JAR 파일이 생성된다. 컴파일로 생성된 파일들은 build 폴더에 보관된다. 이 안의 libs 폴더 안에 gradle-app.jar 파일이 생성된다.</p><p>build 폴더 안에는 classes 폴더도 있는데, 여기에는 컴파일된 클래스 파일이 보관된다. gradle java에서는 우선 소스 코드를 컴파일하여 클래스 파일을 작성한 후, 이를 모아서 JAR 파일로 만드는 일련의 처리가 자동으로 수행된다.</p><blockquote><p><strong>gradle java와 gradle build</strong></p><p>grade java는 자바 프로그램의 빌드를 수행하지만, gradle build는 어떤 언어로 작성된 프로젝트라도 빌드한다. (그레이들은 자바 이외에도 그루비나 스칼라 등 많은 언어를 지원하고 각각의 언어에서 빌드를 수행하는 플러그인을 제공한다.)</p></blockquote><h3 id="java-플러그인의-태스크"><a href="#java-플러그인의-태스크" class="headerlink" title="java 플러그인의 태스크"></a>java 플러그인의 태스크</h3><p>java 플러그인에는 이 외에도 몇 가지 태스크가 더 있다.</p><ul><li><strong>java</strong><br>자바 소스 코드를 컴파일하고 그 외에 필요한 리소스 파일들을 모아서 JAR 파일을 생성한다. 프로그램을 배포할 때 이 태스크로 JAR 파일을 만들면 유용하다. <strong>단, 이 java 태스크로 생성된 JAR 파일은 Executable이 아니라는 점에 주의해야 한다.</strong></li><li><strong>compileJava</strong><br>자바 소스 코드를 모두 컴파일한다. 보존할 장소(build 안의 classes 폴더)가 없다면 폴더를 자동으로 생성하고 그 안에 클래스 파일을 작성한다.</li><li><strong>processResources</strong><br>리소스 파일을 클래스 디렉터리(classes 폴더) 안에 복사한다.</li><li><strong>classes</strong><br>소스 코드 컴파일과 리소스 파일 복사를 실행한다. compileJava와 processResources가 합쳐진 것이라 생각해도 된다.</li><li><strong>test</strong><br>프로그램 테스트를 실행한다. 소스 코드와 관련된 컴파일을 수행하고 테스트에 필요한 리소스 복사 등을 수행한 뒤 JUnit으로 테스트를 실행한다. JUnit 라이브러리를 이용할 수 없는 상태에서는 테스트를 실행할 때 오류가 발생한다.</li><li><strong>jar</strong><br>프로그램을 컴파일하고 리소스 파일 등을 준비한 뒤, JAR 파일로 패키징한다. 단, 파일을 단순히 JAR 파일에 모을 뿐이며 Executable jar을 작성하는 것은 아니다.</li><li><strong>javadoc</strong><br>소스 코드를 해석하여 Javadoc 파일을 생성한다. build 안의 docs 폴더 안에 javadoc 폴더를 작성하여 파일을 보관한다.</li><li><strong>clean</strong><br>빌드로 생성된 파일을 모두 삭제한다.</li></ul><h3 id="java-플러그인의-태스크-이용하기"><a href="#java-플러그인의-태스크-이용하기" class="headerlink" title="java 플러그인의 태스크 이용하기"></a>java 플러그인의 태스크 이용하기</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">task doit(<span class="string">dependsOn:</span> [compileJava, jar]) &#123;</span><br><span class="line">    doLast &#123;</span><br><span class="line">        println <span class="string">"*** compiled and created jar! ***"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>doit 태스크에는 매개변수가 포함되어 있다. <strong>dependsOn은 이 매개변수가 ‘의존성’을 지정하는 것을 가리킨다.</strong> ‘compileJava, jar’은 2개의 태스크를 모아놓은 배열이다. 즉, doit이 compileJava와 jar이라는 2개의 태스크에 의존한다.</p><p>이 상태에서 dependsOn에서 태스크를 지정하면 그 태스크가 실행되기 전에 의존하는 모든 태스크가 실행된다. 그리고 의존하는 태스크의 실행이 완료된 후에 doit 태스크의 doLast가 호출된다.</p><p>의존성을 지정해서 실행하는 방법 이외에 태스크를 직접 실행할 수도 있는데, 태스크의 <code>execute 메서드</code>를 호출하면 된다.</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">task doit &#123;</span><br><span class="line">    doLast &#123;</span><br><span class="line">        println <span class="string">"*** compiled now! ***"</span></span><br><span class="line">        tasks.compileJava.execute()</span><br><span class="line">        println <span class="string">"*** create jar! ***"</span></span><br><span class="line">        tasks.jar.execute()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>실행하면 의존성을 지정해서 실행할 때와 같은 결과를 얻지만, “Deprecated Gradle features were used in this build, making it incompatible with Gradle 5.0.” 라는 메시지가 출력된다. 그레이들 버전 5.0 부터는 execute 메서드를 직접 호출하는 것이 호환되지 않기 때문이다.</p><h3 id="application-플러그인"><a href="#application-플러그인" class="headerlink" title="application 플러그인"></a>application 플러그인</h3><p>java 플러그인에는 프로그램을 실행하는 태스크가 없어 application 플러그인을 사용해 애플리케이션을 실행해야 한다.</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apply <span class="string">plugin:</span> <span class="string">'application"</span></span><br></pre></td></tr></table></figure><p>build.gradle에 이처럼 작성하고 그 다음에 mainClassName 프로퍼티에 메인 클래스(실행할 클래스)를 설정한다.</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mainClassName = <span class="string">"com.jongmin.gradle.App"</span></span><br></pre></td></tr></table></figure><p>application 플러그인에는 run 태스크가 포함되어 있다. 이것을 실행하면 mainClassName에 지정된 클래스가 실행된다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gradle run</span><br></pre></td></tr></table></figure><p>다음과 같이 작성하면 jar을 실행한 후 run으로 클래스를 실행할 수 있다.</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">apply <span class="string">plugin:</span> <span class="string">'java'</span></span><br><span class="line">apply <span class="string">plugin:</span> <span class="string">'application'</span></span><br><span class="line"></span><br><span class="line">mainClassName = <span class="string">"com.jongmin.gradle.App"</span></span><br><span class="line"></span><br><span class="line">task doit(<span class="string">dependsOn:</span>[jar, run]) &#123;</span><br><span class="line">    doLast &#123;</span><br><span class="line">        println(<span class="string">"*** do it! ***"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;그레이들&quot;&gt;&lt;a href=&quot;#그레이들&quot; class=&quot;headerlink&quot; title=&quot;그레이들&quot;&gt;&lt;/a&gt;그레이들&lt;/h1&gt;&lt;h2 id=&quot;그루비와-그레이들&quot;&gt;&lt;a href=&quot;#그루비와-그레이들&quot; class=&quot;headerlink&quot; title=
      
    
    </summary>
    
      <category term="Programming" scheme="https://jongmin92.github.io/categories/Programming/"/>
    
      <category term="Tool" scheme="https://jongmin92.github.io/categories/Programming/Tool/"/>
    
    
      <category term="java" scheme="https://jongmin92.github.io/tags/java/"/>
    
      <category term="build tool" scheme="https://jongmin92.github.io/tags/build-tool/"/>
    
      <category term="gradle" scheme="https://jongmin92.github.io/tags/gradle/"/>
    
  </entry>
  
  <entry>
    <title>빌드 도구와 메이븐</title>
    <link href="https://jongmin92.github.io/2018/08/06/Tool/maven_basic/"/>
    <id>https://jongmin92.github.io/2018/08/06/Tool/maven_basic/</id>
    <published>2018-08-06T13:55:00.000Z</published>
    <updated>2018-08-08T16:49:35.237Z</updated>
    
    <content type="html"><![CDATA[<h1 id="빌드-도구"><a href="#빌드-도구" class="headerlink" title="빌드 도구"></a>빌드 도구</h1><h2 id="빌드-도구란"><a href="#빌드-도구란" class="headerlink" title="빌드 도구란?"></a>빌드 도구란?</h2><h3 id="개발-환경의-변화와-빌드"><a href="#개발-환경의-변화와-빌드" class="headerlink" title="개발 환경의 변화와 빌드"></a>개발 환경의 변화와 빌드</h3><p>자바를 처음 공부할 때는 이클립스 혹은 인텔리제이 같은 IDE만으로 프로그램을 뚝딱 만들 수 있다. 그러나 현업에 투입되면 무언가 복잡한 환경을 만나게 된다.</p><p>하지만 실제 자바 입문시절에 배운 과정과 현업에서 사용하는 과정에 차이는 없다. 다만 다양한 도구를 사용하여 더 전문화하여 현업 도구에 활용할 뿐이다.</p><ul><li><strong>명령행에서 컴파일하기</strong><br>아주 간단한 프로그램이라면 명령행에서 javac를 이용하는 것만으로도 충분하다. 하지만 라이브러리 등을 이용하면, classpath에 다수의 라이브러리 경로를 기술한 뒤에 컴파일 해야 한다. 또한 생성된 클래스 파일을 모아 JAR 파일을 생성하려면 이 역시 모두 명령어로 실행해야 한다.<br>소스 코드의 컴파일에서 JAR 파일의 생성까지 긴 과정을 수행하려면 방대한 명령어가 필요한데, 이를 매번 수작업으로 작성하면 큰 수고가 든다.</li><li><strong>프로젝트 및 라이브러리 설치</strong><br>최근에는 개발할 때 모든 프로그램을 처음부터 만드는 경우가 거의 없다. 프로그램에 필요한 기능은 라이브러리를 이용하거나, 프레임워크를 이용하여 애플리케이션을 개발한다.<br>이런 경우, 필요한 소프트웨어를 갖추고 정해진 대로 파일을 구성해야 한다.</li><li><strong>테스트 자동화</strong><br>단순한 프로그램이라면 컴파일 후 실행 및 동작만 확인하는 것으로 충분하지만, 어느 정도 규모 있는 프로그램은 프로그램 생성과 함께 테스트를 실행하는 것이 일반적이다.</li><li><strong>프로그램 배포</strong><br>웹 애플리케이션은 구현한 프로그램을 서버에 배포하게 된다. 이런 작업을 수작업으로 시행하기가 번거롭다.</li></ul><h3 id="빌드-도구의-역할"><a href="#빌드-도구의-역할" class="headerlink" title="빌드 도구의 역할"></a>빌드 도구의 역할</h3><p>‘빌드 도구’는 단순히 프로그램을 컴파일하여 애플리케이션을 생성하는 작업 그 이상으로 다양한 기능을 제공한다.</p><ul><li><strong>프로그램 빌드</strong><br>프로그램을 컴파일하고, 지정된 디렉터리에 필요한 리소스를 모아서 프로그램을 완성한다. 그때 라이브러리등 필요한 파일을 설치하도록 지정할 수 있다.</li><li><strong>프로그램 테스트와 실행</strong><br>빌드된 프로그램의 실행뿐 아니라 테스트 기능도 제공한다. 빌드를 실행 할 때, 빌드가 완료되면 곧바로 테스트를 실행하는 도구도 있다.</li><li><strong>라이브러리 관리</strong><br>프로그램에서 필요한 라이브러리들을 관리한다. 빌드 실행 시 자동으로 라이브러리를 다운로드하고 설치하는 등의 작업을 한다.</li><li><strong>배포 작업</strong><br>빌드한 프로그램을 배포하는 기능을 제공한다.</li></ul><h2 id="개발-도구와-빌드-도구"><a href="#개발-도구와-빌드-도구" class="headerlink" title="개발 도구와 빌드 도구"></a>개발 도구와 빌드 도구</h2><p>개발 도구에 있어 빌드 도구를 다루는 방식은 크게 두 가지이다.</p><ul><li><strong>빌드 도구를 이용하는 기능이 포함된 경우</strong><br>이클립스는 메이븐, 인텔리제이는 메이븐과 그레이들을 지원한다.</li><li><strong>개발 도구에서 명령어로 실행하는 경우</strong></li></ul><h1 id="메이븐-기초"><a href="#메이븐-기초" class="headerlink" title="메이븐 기초"></a>메이븐 기초</h1><p>메이븐은 아파치 소프트웨어 재단이 개발하는 오픈 소스 빌드 도구이다. ‘아파치 앤트(Ant)’의 후속으로 개발되었고, 자바 프로그램 개발을 대상으로 한 오픈 소스 빌드 도구이다.</p><h2 id="메이븐-특징"><a href="#메이븐-특징" class="headerlink" title="메이븐 특징"></a>메이븐 특징</h2><ul><li><strong>빌드 파일은 XML로 작성</strong></li><li><strong>단위 작업 ‘골’</strong><br>골은 메이븐에서 실행하는 작업의 목적을 지정한다. 메이븐 명령어를 실행할 때 골을 지정하면, 어떤 작업을 수행하여 무엇을 작성할지 지정할 수 있다.</li><li><strong>라이브러리 관리와 중앙 저장소</strong><br>빌드를 실행하는 사이에, 빌드 파일에 기술된 정보를 바탕으로 필요한 라이브러리를 자동으로 다운로드하여 포함시킨다. 이를 가능하게 하는 것이 중앙 저장소이다. 중앙 저장소는 메이븐에서 이용 가능한 라이브러리를 모아서 관리하는 웹 서비스이다.</li><li><strong>테스트와 문서 생성</strong><br>엔트의 표준에는 포함되지 않았던 JUnit 테스트 및 Javadoc 문서 생성 등의 기능을 갖추고 있다.</li><li><strong>플러그인을 이용한 확장</strong><br>플러그인을 사용하면 메이븐에 기능을 추가할 수 있다.</li></ul><h2 id="메이븐-프로젝트-생성"><a href="#메이븐-프로젝트-생성" class="headerlink" title="메이븐 프로젝트 생성"></a>메이븐 프로젝트 생성</h2><p>메이븐에 포함된 <strong><code>archetype:generate</code></strong>라는 골을 이용하면, 간단하게 프로젝트의 기본 부분을 만들 수 있다. 아키타입(archetype)은 프로그램의 템플릿 모음이다.</p><p>Intellij를 이용해서도 메이븐을 기반으로 프로그램을 빌드하는 프로젝트를 생성할 수 있다. New Project -&gt; 목록에서 Maven 선택 -&gt; Create from archetype 체크 -&gt; maven-archetype-quickstart 선택</p><p>메이븐에서는 mvn 명령어로 각종 조작을 할 수 있는데, 이 명령어들을 인텔리제이의 ‘Run’을 이용하여 실행할 수 있다. 실행할 내용을 컨피그레이션에 설정하면 인텔리제이의 ‘Run’으로 프로그램의 빌드와 실행, 디버그 등의 기능을 수행할 수 있다. (‘Run…’ -&gt; Edit Configurations’ 메뉴에서 설정 가능)</p><h2 id="pomxml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h2><p>pom.xml 파일에서 POM은 ‘Project Object Model’을 말한다. 이 파일에 프로젝트에 관한 각종 정보를 기술한다.</p><h3 id="ltprojectgt와-기본속성"><a href="#lt-project-gt-와-기본속성" class="headerlink" title="&lt;project&gt;와 기본속성"></a>&lt;project&gt;와 기본속성</h3><ul><li><p><strong>모델 버전</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">modeVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modeVersion</span>&gt;</span></span><br></pre></td></tr></table></figure><p>기본적으로 메이븐은 하위 호환성을 지원하기 때문에 이후 새로운 버전이 되더라도 이곳의 버전 번호를 바꾸면 이외 부분은 크게 수정하지 않고도 사용할 수 있다.</p></li><li><p><strong>그룹 ID</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.jongmin<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br></pre></td></tr></table></figure><p>그룹 ID는 작성할 프로그램이 어디에 소속되어 있는지를 나타낸다.</p></li><li><p><strong>아티팩트 ID</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mvn-app<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br></pre></td></tr></table></figure><p>그룹 ID와 함께 프로그램을 식별하는 데 사용된다. ID이기 때문에 같은 그룹 내에서 같은 프로젝트 이름이 중복되지 않도록 주의해야 한다.</p></li><li><p><strong>버전</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br></pre></td></tr></table></figure><p>메이븐을 사용하는 프로젝트를 빌드하거나 패키징한 경우 여기서 지정된 번호가 생성된 프로그램의 버전으로 설정된다. 보통은 생성된 JAR 파일의 파일명에도 사용된다.</p></li><li><p><strong>패키지 종류</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br></pre></td></tr></table></figure><p>보통은 jar을 지정하지만, zip이라고 지정하면 ZIP 파일로 패키징한다.</p></li><li><p><strong>애플리케이션 이름</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>mvn-app<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br></pre></td></tr></table></figure><p>작성하는 애플리케이션의 이름을 지정한다. 그룹 ID나 아티팩트 ID와 달리 유일한 값일 필요가 없다.</p></li><li><p><strong>URL</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.apache.org<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br></pre></td></tr></table></figure><p>기본값으로는 메이븐 사이트의 URL이 지정되어 있다.</p></li></ul><p><strong>&lt;properties&gt;</strong>는 pom.xml에서 이용되는 속성값을 설정한다.</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure><p>기본값으로는 &lt;project.build.sourceEncoding&gt;라는 항목이 설정되어 있는데 이는 소스 파일의 문자 인코딩 방식을 지정한다.</p><h3 id="ltdependenciesgt와-의존성-설정"><a href="#lt-dependencies-gt-와-의존성-설정" class="headerlink" title="&lt;dependencies&gt;와 의존성 설정"></a>&lt;dependencies&gt;와 의존성 설정</h3><p>dependencies 태크를 통해 필요한 라이브러리를 관리할 수 있다. 여기에 의존성을 적어두면 필요한 라이브러리 등을 자동으로 다운로드하여 설치 등을 할 수 있다.</p><blockquote><p> &lt;dependency&gt; 태그를 설정하는 것만으로 의존 라이브러리가 자동으로 로드되는 것은 <strong>메이븐의 중앙 저장소</strong> 때문이다. 중앙 저장소는 메이븐을 개발한 아파치 소프트웨어 재단이 운영하는 사이트이다.</p></blockquote><h2 id="기본적인-골"><a href="#기본적인-‘골’" class="headerlink" title="기본적인 ‘골’"></a>기본적인 ‘골’</h2><p>메이븐은 골을 지정하여 실행할 처리의 역할을 정한다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn 골</span><br></pre></td></tr></table></figure><ul><li><p><strong>compile</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn compile</span><br></pre></td></tr></table></figure><p>자바 소스 코드 파일을 컴파일 한다. 프로젝트 폴더 내에 target 폴더가 생성된다.</p></li><li><p><strong>test-compile</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn <span class="built_in">test</span>-compile</span><br></pre></td></tr></table></figure><p>유닛 테스트용 클래스를 컴파일한다. src 폴더 안의 test 안에 작성된 유닛 테스트용 소스 코드 파일을 컴파일하여, target 폴더 안에 test-class 폴더를 작성하고 그 안에 클래스 파일을 생성한다.</p></li><li><p><strong>test</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn <span class="built_in">test</span></span><br></pre></td></tr></table></figure><p>메이븐은 테스트(유닛 테스트)가 거의 표준 기능으로 포함되어 있다. 테스트를 개별적으로 실행하는 골이 test이다.작성한 유닛 테스트용 클래스를 이용하여 테스트가 실행되고 그 결과가 출력된다.</p></li><li><p><strong>package</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn package</span><br></pre></td></tr></table></figure><p>mvn compile을 실행하면 클래스 파일이 생성되지만, 일반적으로 자바 프로그램은 클래스파일을 그대로 배포하지는 않는다. 일반적으로 JAR 파일 등으로 패키징하여 배포한다.</p><p>명령 한 번으로 프로그램을 컴파일하여 유닛 테스트를 실행한 후 JAR 파일로 패키징하는 처리가 모두 자동적으로 수행된다.</p><p>실행 후 target 폴더 안에 jar 파일이 생성된다.</p></li><li><p><strong>clean</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn clean</span><br></pre></td></tr></table></figure><p>메이븐은 프로그램을 빌드하면서 컴파일된 클래스 파일 뿐만 아니라, 테스트, 압축을 실행하는 파일 등을 만든다. clean은 부가적으로 생성된 파일을 모두 지운다.</p></li></ul><h2 id="프로그램-실행하기"><a href="#프로그램-실행하기" class="headerlink" title="프로그램 실행하기"></a>프로그램 실행하기</h2><p>클래스가 하나인 코드는 java 명령어로도 쉽게 실행할 수 있다. 그러나 다양한 라이브러리를 이용하는 프로젝트에서는 모든 클래스 경로를 직접 지정해야 하기 때문에 java 명령어를 이용해 실행하는 일은 번거롭다.</p><p>메이븐에는 표준으로 자바 프로그램을 실행하는 골은 없다. 하지만 <code>exec-java-plugin</code> 플러그인을 이용하면 프로그램을 실행할 수 있다.</p><p>pom.xml의 &lt;project&gt; 태그 안에 있는 &lt;dependencies&gt; 종료 태그의 다음 행에 다음과 같이 플러그인을 추가한다.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.codehaus.mojo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>exec-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>com.jongmin.App<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>명령행에 다음과 같이 실행하면 App 클래스가 실행된다. 만약 mvn clean으로 프로젝트의 빌드 결과물을 제거한 경우 다시 mvn package로 빌드한 후에 실행한다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn <span class="built_in">exec</span>:java</span><br></pre></td></tr></table></figure><blockquote><p>exec-maven-plugin은 메인 클래스를 지정해야 한다. 플러그인에 정보를 지정할 때는 &lt;configuration&gt; 태그를 이용한다.</p></blockquote><h2 id="빌드-플러그인"><a href="#빌드-플러그인" class="headerlink" title="빌드 플러그인"></a>빌드 플러그인</h2><p>&lt;build&gt; 태그는 빌드에 관한 정보를 기술하는 태그이다. 형태는 다음과 같다.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span>...<span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span>...<span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        ...</span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>&lt;build&gt;와 &lt;plugins&gt; 태그는 여러 개 사용할 수 없다. 반드시 1개씩 있고, 그 안에 모든 &lt;plugin&gt;을 모아서 사용한다.</p><h2 id="메이븐의-골과-플러그인"><a href="#메이븐의-골과-플러그인" class="headerlink" title="메이븐의 골과 플러그인"></a>메이븐의 골과 플러그인</h2><p>exec:java 골은 플러그인을 사용해 추가된 것이다. 사실, 지금까지 사용했던 모든 골들도 플러그인으로 추가된 것이다.</p><ul><li>compile : maven-compiler-plugin</li><li>package : maven-jar-plugin</li><li>test : maven-surefire-plugin</li></ul><p>하지만 위의 플러그인은 표준으로 포함되어 있기 때문에 플러그인이라고 의식하지 못했던 것이다.</p><p>표준이 아닌 &lt;plugin&gt; 태그에 의해 추가된 플러그인의 골을 지정하는 경우에는 <code>xx:xx</code>와 같이 요소가 둘인 경우가 일반적이다. 플러그인 하나가 여러 골을 가질 수도 있기 때문에 ‘플로그인:골’ 형태로 기술한다.</p><blockquote><p>&lt;plugin&gt;이 필수는 아니다. 플러그인으로 추가하여 이용하는 골이라고 해서 &lt;plugin&gt;에 기술하지 않으면 사용하지 못하는 것은 아니다. &lt;plugin&gt;은 플러그인에 포함된 설정 등의 정보를 기술하는 태그이다. 그렇기 때문에 설정이 필요하지 않으면 기술할 필요가 없다.</p></blockquote><h2 id="인텔리제이에서-사용하기"><a href="#인텔리제이에서-사용하기" class="headerlink" title="인텔리제이에서 사용하기"></a>인텔리제이에서 사용하기</h2><p>플러그인을 통해 개발 도구의 프로젝트로 변환이 가능하다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn idea:idea</span><br></pre></td></tr></table></figure><p>위 골을 실행하면 인텔리제이에서 프로젝트를 다루는데 필요한 파일들이 생성된다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn idea:clean</span><br></pre></td></tr></table></figure><p>인텔리제이 프로젝트에서 인텔리제이 관련 파일을 삭제하여 원래의 메이븐 프로젝트로 돌리려면 위의 골을 실행한다.</p><h2 id="실행-가능한-jar-파일-만들기"><a href="#실행-가능한-JAR-파일-만들기" class="headerlink" title="실행 가능한 JAR 파일 만들기"></a>실행 가능한 JAR 파일 만들기</h2><p>앞서 mvn package로 패키징했지만 이렇게 생성된 JAR 파일은 단순히 패키징 된 것이기 때문에 실행되지는 않는다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar 00.jar</span><br></pre></td></tr></table></figure><p>따라서 위의 명렁을 실행해도 00.jar에 기본 Manifest 속성이 없어 실행에 실패하게 된다.</p><p>실행 가능한 JAR 파일을 만들기 위해서는 maven-jar-plugin을 이용해 다음과 같은 &lt;plugin&gt; 태그를 작성하면 된다.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-jar-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>버전<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">archive</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">manifest</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">addClasspath</span>&gt;</span>true<span class="tag">&lt;/<span class="name">addClasspath</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>메인 클래스<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">archive</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure><p>&lt;archive&gt; 태그는 압축에 관한 설정이다. addClasspath는 클래스 경로에 JAR 파일이 있는 경로를 추가하기 위한 태그인데 보통은 true로 지정한다.</p><p>이렇게 설정 후 다시 <strong>mvn package</strong>로 JAR 파일을 생성한 후 java -jar로 실행해보면 문제없이 실행할 수 있다.</p><h2 id="저장소-이용"><a href="#저장소-이용" class="headerlink" title="저장소 이용"></a>저장소 이용</h2><p>&lt;dependency&gt; 를 추가하는 것만으로 필요한 라이브러리를 추가해 사용할 수 있었던 것은 <strong>중앙 저장소</strong> 때문이다. 그런데 저장소가 중앙 저장소만 있는 것은 아니다. 다른 원격 저장소나 로컬 저장소도 있다.</p><h3 id="로컬-저장소"><a href="#로컬-저장소" class="headerlink" title="로컬 저장소"></a>로컬 저장소</h3><p>자신이 만든 라이브러린, 그다지 유명하지 않은 라이브러리라면 아직 중앙 저장소에 공개되지 않을 수도 있다. 이러한 라이브러리는 로컬 저장소를 이용해 사용할 수 있다.</p><ul><li>원격 저장소 : 네트워크를 거쳐 서버에 접속하여 이용하는 공개된 저장소. 중앙 저장소도 원격 저장소의 한 종류이다.</li><li>로컬 저장소 : 로컬 환경에 있는 저장소이다.</li></ul><h3 id="원격-저장소-이용"><a href="#원격-저장소-이용" class="headerlink" title="원격 저장소 이용"></a>원격 저장소 이용</h3><p>원격 저장소는 pom.xml에 &lt;repositories&gt; 태그 안에 저장소 정보를 기술한다.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>저장소 ID<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>이름<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>저장소 주소(URL)<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="로컬-저장소에-라이브러리-추가하기"><a href="#로컬-저장소에-라이브러리-추가하기" class="headerlink" title="로컬 저장소에 라이브러리 추가하기"></a>로컬 저장소에 라이브러리 추가하기</h3><p>추가하고자 하는 라이브러리 프로젝트에서 다음과 같이 실행하면 target에 빌드된 JAR 파일을 로컬 저장소에 설치한다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn install</span><br></pre></td></tr></table></figure><p>또는 설치할 JAR 파일이 별도로 준비되어 있다면 <strong>install:install-file</strong> 골을 실행해서 지정한 라이브러리 파일을 로컬 저장소에 설치할 수 있다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mvn install:install-file</span><br><span class="line">-Dfile=<span class="string">"라이브러리 jar의 경로"</span></span><br><span class="line">-DgroupId=<span class="string">"그룹 ID"</span></span><br><span class="line">-DartifactId=<span class="string">"아티팩트 ID"</span></span><br><span class="line">-Dpackaging=<span class="string">"패키징(jar)"</span></span><br><span class="line">-Dversio=<span class="string">"버전(1.0)"</span></span><br></pre></td></tr></table></figure><h3 id="로컬-저장소의-위치-알아보기"><a href="#로컬-저장소의-위치-알아보기" class="headerlink" title="로컬 저장소의 위치 알아보기"></a>로컬 저장소의 위치 알아보기</h3><p>로컬 저장소의 위치는 다음과 같다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">홈 디렉터리/.m2/repository</span><br></pre></td></tr></table></figure><p>이 폴더에는 라이브러리가 그룹 ID마다 폴더로 정리되어 있다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;빌드-도구&quot;&gt;&lt;a href=&quot;#빌드-도구&quot; class=&quot;headerlink&quot; title=&quot;빌드 도구&quot;&gt;&lt;/a&gt;빌드 도구&lt;/h1&gt;&lt;h2 id=&quot;빌드-도구란&quot;&gt;&lt;a href=&quot;#빌드-도구란&quot; class=&quot;headerlink&quot; title=&quot;빌
      
    
    </summary>
    
      <category term="Programming" scheme="https://jongmin92.github.io/categories/Programming/"/>
    
      <category term="Tool" scheme="https://jongmin92.github.io/categories/Programming/Tool/"/>
    
    
      <category term="java" scheme="https://jongmin92.github.io/tags/java/"/>
    
      <category term="build tool" scheme="https://jongmin92.github.io/tags/build-tool/"/>
    
      <category term="maven" scheme="https://jongmin92.github.io/tags/maven/"/>
    
      <category term="mvn" scheme="https://jongmin92.github.io/tags/mvn/"/>
    
  </entry>
  
  <entry>
    <title>&lt;이펙티브 자바 2판&gt; 리뷰</title>
    <link href="https://jongmin92.github.io/2018/08/05/Book/effective_java_2e_review/"/>
    <id>https://jongmin92.github.io/2018/08/05/Book/effective_java_2e_review/</id>
    <published>2018-08-05T10:45:00.000Z</published>
    <updated>2018-08-18T04:02:57.595Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/post/2018-08-05/effective_java.jpg" alt=""></p><p>Java 개발자라면 꼭 읽어보아야 한다는 <code>Effective Java</code> 책이다.<br>Java 언어를 처음 접하는 개발자보다는 어느정도 Java를 이용해 개발을 하고 있는 개발자에게 많이 추천되는 책이다. 실제 책 도입 부분에서도 <strong>Java 언어를 처음 공부하는 개발자 보다는 중급 이상의 프로그래머 반열에 오르려면 반드시 읽어야 할 내용들을 포함하고 있다고 말하고 있다.</strong></p><p>나는 아무래도 이직 후 자바 개발과 스프링 프레임워크를 처음 접하게 되었는데, 자바 웹 애플리케이션 개발 전반에 대해 이해하고자 스프링 관련된 서적을 먼저 읽고 있었지만, 여러 팀 동료분들이 코드리뷰를 해주시면서 “이펙티브 자바” 책을 읽어보면 도움이 많이 될 것 같다고 조언해주셔서 읽어보게 되었다.</p><p><strong>이 책은 총 78개의 규칙으로 구성되어 있으며, 각 규칙은 최고의 프로그래머와 노련한 프로그래머 대부분이 유용하다고 믿는 지침들을 요약한 것이다.</strong> 책에서 등장하는 첫 번째 규칙이 <strong>“규칙 1. 생성자 대신 정적 팩터리 메서드를 사용할 수 없는지 생각해 보라”</strong>인데, 동료분께 코드리뷰 받으면서 조언 받았던 부분이기도 했다. 그래서 첫 부분부터 아주 재밌게 읽어나갔다. 그 외에도 평소 코드리뷰에서 말씀해 주셨던 여러 내용들을 이 책을 통해 자세하게 알 수 있었다.</p><p>책 자체 내용은 쉽게 읽을 수 있는 정도는 아니었다. 오히려 이해하기 위해 고민하는 부분에서 깨닫게 되는 부분도 많은것 같다. (특히 제네릭 부분과 병행성 부분은 아직도 좀 어려운데 이 부분은 앞으로 어느 정도 시간이 지난 후 다시 읽어보면 또 다르게 받아들여지지 않을까 싶다.)<br>결과적으로 책을 읽고 난 후, 이부분을 개발할 때는 어떤 부분을 고려해 보아야 겠다라는 생각이 조금은 들게 된것 같다.</p><p><strong>책 자체는 얇지는 않지만 각 파트 별로 여러개의 규칙으로 구성되어 있고, 각 규칙들은 정말 길어봐야 5~6장 정도의 분량이기 때문에 짬내서 읽기에도 좋았던것 같다.</strong><br>Java를 사용해 개발하고 있는 개발자 분들 중 읽어 보시지 않은 분들이 계시다면 꼭 추천드리고 싶은 책이다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/images/post/2018-08-05/effective_java.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Java 개발자라면 꼭 읽어보아야 한다는 &lt;code&gt;Effective Java&lt;/code&gt; 책이다.&lt;br&gt;Java 언어를 
      
    
    </summary>
    
      <category term="Book" scheme="https://jongmin92.github.io/categories/Book/"/>
    
    
      <category term="java" scheme="https://jongmin92.github.io/tags/java/"/>
    
      <category term="book" scheme="https://jongmin92.github.io/tags/book/"/>
    
      <category term="review" scheme="https://jongmin92.github.io/tags/review/"/>
    
  </entry>
  
  <entry>
    <title>Intellij IDEA 단축키</title>
    <link href="https://jongmin92.github.io/2018/07/31/Tip/intellij-shortcut/"/>
    <id>https://jongmin92.github.io/2018/07/31/Tip/intellij-shortcut/</id>
    <published>2018-07-31T13:00:00.000Z</published>
    <updated>2018-07-31T14:29:14.819Z</updated>
    
    <content type="html"><![CDATA[<p>산뜻한 월요일 출근길 아침에 한통의 메시지를 받았다.</p><p><img src="/images/post/2018-07-31/message.png" alt=""></p><p>얼마전에 요런 이벤트에 응모했는데</p><p><img src="/images/post/2018-07-31/event.png" alt=""></p><p>오오…? 당첨된 것이다. 신가하게 개발 서적 혹은 강의 관련된 이벤트에 자주 당첨되는것 같다. 자세히 보니 5명 뽑는 이벤트에 15명이 지원한건가…<br>그래도 당첨됐다는 사실에 기뻤다!<br>평소에 자주보는 페이지이기도 하고 위의 IntelliJ 강의는 처음 나왔을 때, 들어보고 싶었다는 생각이 있었지만 공부할게 너무 많아 미뤄놨었는데 마침 당첨된 기념으로 월요일 <strong>퇴근 후 바로 끝장을 보았다.</strong></p><h1 id="어디에-도움이-될까"><a href="#어디에-도움이-될까" class="headerlink" title="어디에 도움이 될까?"></a>어디에 도움이 될까?</h1><p><strong>대부분의 개발자는 자신만의 개발 환경을 구축해서 사용한다.</strong> 예를 들면, 자신만의 dot file 들을 만들어 사용한다던가 IDEA의 세팅들을 커스터마이징해서 사용하는 것들이 있다.<br>나도 처음에는 IDEA의 “자동 정렬”과 같은 가장 간단한 단축키부터 사용하기 시작해 현재는 IntelliJ에 IdeaVim 플러그인 설치해서 사용할 정도로 나만의 개발환경을 구축하는데 적지 않은 시간을 쏟았다.</p><p>처음에는 물론 사용하기 쉽지 않다. 그러나 적응하기 시작하는 순간 엄청난 생산성의 향상을 가져온다. 손이 마우스로 가지 않고 <strong>vim을 사용하면 심지어 방향키 까지도 손이 가지 않는다.</strong></p><p><strong>이런 개발 환경을 구축하는데 있어 한가지 문제가 있다. 어떤 기능들이 있는지 알아야 찾아서 사용할텐데 어떤 기능들이 있는지 조차 파악하기가 마냥 쉬운게 아니라는 것이다.</strong> 대부분 내가 모르는 기능을 누군가 사용할때는 “이런 기능이 있었어?” 라는 반응이 많은데 이게 문제다! 한 번 사용하면 계속 사용하게 되는데 처음 사용하기가 어려운 이유이기도 하다.</p><p>다행히도 위의 강의는 이런 문제를 해소해준다! <strong>IntelliJ를 처음 사용하는 사람도! 이미 사용하고 있던 사람도! 모두 도움이 될 것이다.</strong> 어떤 기능이 있는지, 해당 기능을 어떤 단축키를 통해 사용할 수 있는지 강의를 보고 배워보자!</p><p>강의는 인프런을 통해서 수강할 수 있다. <strong>-&gt; <a href="https://www.inflearn.com/course/intellij-guide/#ref=event%EC%B4%88%EA%B0%9C%EB%AA%A8" target="_blank" rel="noopener">IntelliJ를 시작하는 분들을 위한 가이드</a></strong></p><p>강의를 수강하며 새롭게 알게된 기능중 <code>라인 합치기</code>의 경우 Vim의 <code>Shift + J</code> 단축키를 이용해 사용하고 있었는데, 단순히 두 라인을 합쳐주는 기능하는 걸 넘어서, IntelliJ의 <code>Shift + Cmd + J</code>는 문자열을 합칠 경우 더 유용하게 사용 가능했다. 그래서 Shift + Cmd + J를 Shift + J로 변경해버렸다!</p><h1 id="단축키"><a href="#단축키" class="headerlink" title="단축키"></a>단축키</h1><p>수강하며 실습해 볼 수 있는 단축키 리스트</p><ul><li><strong>코드 템플릿</strong><br>메인 메소드 : psvm<br>System.out.println() : sout</li></ul><ul><li><strong>실행환경 실행</strong><br>현재 포커스 : Ctrl + Shift + R<br>이전 실행 : Ctrl + R</li></ul><ul><li><strong>코드 Edit</strong><br>메인 메소드 실행 :<br>라인 복사 : Cmd + D<br>라인 삭제 : Cmd + 백스페이스<br>라인 합치기 : Ctrl + Shift + J<br>라인 이동 : Shfit + Option + 위 (아래)<br>구문 이동 : Shift + Cmd + 위 (아래)<br>Element 단위 이동 : Option + Shift + Cmd + 좌 (우)<br>인자값 즉시 보기 : Cmd + P<br>코드 구현부 즉시 보기 : Option + Space<br>Doc 즉시 보기 : F1</li></ul><ul><li><strong>포커스</strong><br>단어별 이동 : Option + &lt;, &gt;<br>단어별 선택 : Shift + Option + &lt;, &gt;<br>라인 첫/끝 이동 : Fn + &lt;, &gt;<br>라인 전체 선택 : Shift + Cmd + &lt;, &gt; / Shift + Fn + &lt;, &gt;<br>Page Up/Down : Fn + 위/아래<br>포커스 범위 한 단계씩 늘리기 : Option + 위 (아래)<br>포커스 뒤로/앞으로 가기 : Cmd + [, ]<br>멀티 포커스 : Option + Option + 아래<br>오류 라인 자동 포커스 : F2</li></ul><ul><li><strong>검색</strong><br>현재 파일에서 검색 : Cmd + F<br>현재 파일에서 교체 : Cmd + R<br>전체에서 검색 : Shift + Cmd + F<br>전체에서 교체 : Shift + Cmd + R<br>정규표현식으로 검색, 교체 : Regex 체크<br>파일 검색 : Shift + Cmd + O<br>메소드 검색 : Option + Cmd + O<br>Action 검색 : Shift + Cmd + A<br>최근 열었던 파일 목록 보기 : Cmd + E<br>최근 수정했던 파일 목록 보기 : Shift + Cmd + E</li></ul><ul><li><strong>자동완성</strong><br>스마트 자동 완성 : Shift + Ctrl + Space<br>스태틱 메소드 자동 완성 : Ctrl + Space + Space<br>Getter/Setter/생성자 자동 완성 : Cmd + N<br>Override 메소드 자동완성 : Ctrl + I<br>Live Template 목록 보기 : Cmd + J</li></ul><ul><li><strong>리팩토링</strong><br>변수 추출하기 : Cmd + Option + V<br>파라미터 추출하기 : Cmd + Option + P<br>메소드 추출하기 : Cmd + Option + M<br>이너클래스 추출하기 : F6<br>이름 일괄 변경하기 : Shift + F6<br>타입 일괄 변경하기 : Shift + Cmd + F6<br>Import 정리하기 : Ctrl + Option + O<br>코드 자동 정렬하기 : Cmd + Option + L</li></ul><ul><li><strong>디버깅</strong><br>Debug 모드로 실행하기 (현재 위치의 메소드) : Shift + Ctrl + D<br>Debug 모드로 실행하기 (이전에 실행한 메소드) : Ctrl + D<br>Resume (다음 브레이크 포인트로 이동하기) : Cmd + Option + R<br>Step Over (현재 브레이크에서 다음 한줄로 이동하기) : F8<br>Step Into (현재 브레이크의 다음 메소드로 이동) : F7<br>Step Out (현재 메소드의 밖으로 이동) : Shift + F8<br>Evaluate Expression (브레이크된 상태에서 코드 사용하기) : Option + F8<br>Watch (브레이크 이후의 코드 변경 확인하기) : 단축키 X</li></ul><ul><li><strong>Git</strong><br>Git View On : Cmd + 9<br>Git Option Popup : Ctrl + V<br>Git History : Ctrl + V =&gt; 4<br>Branch : Ctrl + V =&gt; 7<br>Commit : Cmd + K<br>Push : Shift + Cmd + K<br>Pull : Shift + Cmd + A =&gt; git pull<br>Github 연동하기 : Shift + Cmd + A =&gt; share GitHub</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;산뜻한 월요일 출근길 아침에 한통의 메시지를 받았다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/post/2018-07-31/message.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;얼마전에 요런 이벤트에 응모했는데&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/i
      
    
    </summary>
    
      <category term="Tip" scheme="https://jongmin92.github.io/categories/Tip/"/>
    
    
      <category term="IntelliJ" scheme="https://jongmin92.github.io/tags/IntelliJ/"/>
    
      <category term="단축키" scheme="https://jongmin92.github.io/tags/%EB%8B%A8%EC%B6%95%ED%82%A4/"/>
    
  </entry>
  
  <entry>
    <title>람다 &amp; 스트림</title>
    <link href="https://jongmin92.github.io/2018/07/03/Java/java-lambda-stream/"/>
    <id>https://jongmin92.github.io/2018/07/03/Java/java-lambda-stream/</id>
    <published>2018-07-03T13:35:00.000Z</published>
    <updated>2018-07-04T16:40:01.333Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>해당 포스팅의 내용은 <a href="http://www.kyobobook.co.kr/product/detailViewKor.laf?barcode=9788995379431" target="_blank" rel="noopener">Java의 정석 2권 - Chapter 14 람다 &amp; 스트림</a>에 있는 내용을 요약한 것입니다. 해당 책으로 복습하며 정리한 내용이고 문제가 된다면 바로 해당 포스팅을 삭제하도록 하겠습니다.</strong></p></blockquote><h1 id="람다와-스트림"><a href="#람다와-스트림" class="headerlink" title="람다와 스트림"></a>람다와 스트림</h1><h2 id="람다식이란"><a href="#람다식이란" class="headerlink" title="람다식이란?"></a>람다식이란?</h2><p><strong><code>람다식(Lambda expression)</code>은 간단히 말해서 메서드를 하나의 ‘식(expression)’으로 표현한 것이다.</strong> 람다식은 함수를 간략하면서도 명확한 식으로 표현할 수 있게 해준다.</p><p>메서드를 람다식으로 표현하면 메서드의 이름과 반환값이 없어지므로, 람다식을 ‘익명 함수(annonymous function)’이라고도 한다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">5</span>];</span><br><span class="line">Arrays.setAll(arr, i -&gt; (<span class="keyword">int</span>)(Math.random()*<span class="number">5</span>)+<span class="number">1</span>); <span class="comment">// arr=[1,5,2,1,1]</span></span><br></pre></td></tr></table></figure><p>위의 문장에서  ‘i -&gt; (int)(Math.random()*5)+1)’이 람다식이다. 이 람다식이 하는 일을 메서드로 표현하면 다음과 같다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">method</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">int</span>)(Math.random()*<span class="number">5</span>) + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위의 메서드보다 람다식이 간결하고 이해하기 쉽다. 게다가 모든 메서드는 클래스에 포함되어야 하므로 클래스도 새로 만들어야 하고, 객체도 생성해야만 비로소 이 메서드를 호출할 수 있다. 그러나 람다식은 이 모든 과정없이 오직 <strong>람다식 자체만으로도 이 메서드의 역할을 대신할 수 있다.</strong></p><p><strong>또한, 람다식은 메서드의 매개변수로 전달되어지는 것이 가능하고, 메서드의 결과로 반환될 수도 있다. 람다식으로 인해 메서드를 변수처럼 다루는 것이 가능해진 것이다.</strong></p><h2 id="람다식-작성하기"><a href="#람다식-작성하기" class="headerlink" title="람다식 작성하기"></a>람다식 작성하기</h2><p>랃마식은 ‘익명 함수’답게 메서드에서 이름과 반환타입을 제거하고 매개변수 선언부와 몸통{} 사이에 ‘-&gt;’를 추가한다.</p><p>반환값이 있는 경우, return문 대신 ‘식(expression)’으로 대신 할 수 있다. 식의 연산결과가 자동으로 반환값이 된다. 이때는 ‘문장(statement)’이 아닌 ‘식’이므로 끝에 ‘;’을 붙이지 않는다.</p><p>람다식에 선언된 매개변수의 타입은 추론이 가능한 경우는 생략할 수 있는데, 대부분의 경우에 생략가능하다. 람다식에 반환타입이 없는 이유도 항상 추론이 가능하기 때문이다.</p><p>매개변수가 하나뿐인 경우에는 괄호()를 생략할 수 있다. 단, 매개변수의 타입이 있으면 괄호()를 생략할 수 없다.</p><p>마찬가지로 괄호{}안의 문장이 하나일 때는 괄호{}를 생략할 수 있다. 이 때 문장의 끝에 ‘;’를 붙이지 않아야 한다. 그러나 괄호{} 안의 문장이 return문일 경우 괄호{}를 생략할 수 없다.</p><h2 id="함수형-인터페이스funtional-interface"><a href="#함수형-인터페이스-Funtional-Interface" class="headerlink" title="함수형 인터페이스(Funtional Interface)"></a>함수형 인터페이스(Funtional Interface)</h2><p>자바에서 모든 메서드는 클래스 내에 포함되어야 한다. 사실 람다식은 익명 클래스의 객체와 동일하다.</p><p>하나의 메서드가 선언된 인터페이스를 정의해서 람다식을 다루는 것은 기존의 자바의 규칙들을 어기지 않으면서도 자연스럽다. 그래서 인터페이스를 통해 람다식을 다루기로 결정되었으며, 람다식을 다루기 위한 인터페이스를 <code>함수형 인터페이스(functional interface)</code>라고 부른다.</p><p>단, 함수형 인터페이스에는 오직 하나의 추상 메서드만 정의되어 있어야 한다는 제약이 있다. 그래야 람다식과 인터페이스의 메서드가 1:1로 연결 될 수 있기 때문이다. 반면에 static 메서드와 default 메서드의 개수에는 제약이 없다.</p><blockquote><p><strong><code>@FunctionalInterface</code></strong>를 붙이면, 컴파일러가 함수형 인터페이스를 올바르게 정의했는지 확인해주므로, 꼭 붙이는 것이 좋다.</p></blockquote><p><strong>함수형 인터페이스 타입의 매개변수와 반환타입</strong><br>함수형 인터페이스 MyFunction이 아래와 같이 정의되어 있을 때,</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">MyFunction</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">myMethod</span><span class="params">()</span></span>;<span class="comment">// 추상 메서드</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>메서드의 매개변수가 MyFunction 타입이면, 이 메서드를 호출할 때 람다식을 참조하는 참조변수를 매개변수로 지정해야한다는 뜻이다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">aMethod</span><span class="params">(MyFunction f)</span> </span>&#123;</span><br><span class="line">    f.myMethod();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">MyFunction f = () -&gt; System.out.println(<span class="string">"myMethod()"</span>);</span><br><span class="line">aMethod(f);</span><br></pre></td></tr></table></figure><p>또는 참조변수 없이 직접 람다식을 매개변수로 지정하는 것도 가능하다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aMethod(() -&gt; System.out.println(<span class="string">"myMethod()"</span>));</span><br></pre></td></tr></table></figure><p>메서드의 반환타입이 함수형 인터페이스라면, 이 함수형 인터페이스의 추상 메서드와 동등한 람다식을 가리키는 참조변수를 반환하거나 람다식을 직접 반환할 수 있다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">MyFunction <span class="title">mymethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    MyFunction f = () -&gt; &#123;&#125;;</span><br><span class="line">    <span class="keyword">return</span> f;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>람다식을 참조변수로 다룰 수 있다는 것은 메서드를 통해 람다식을 주고받을 수 있다는 것을 의미한다. 즉, 변수처럼 메서드를 주고받는 것이 가능해진 것이다. (사실상 메서드가 아니라 객체를 주고받는 것이라 달라진 것은 없다.)</p><p><strong>람다식의 타입과 형변환</strong><br>함수형 인터페이스로 람다식을 참조할 수 있는 것일 뿐, 람다식의 타입이 함수형 인터페이스의 타입과 일치하는 것은 아니다. 람다식은 익명 객체이고 익명 객체는 타입이 없다. 정확히는 타입은 있지만 컴파일러가 임의로 이름을 정하기 때문에 알 수 없는 것이다. 그래서 대입 연산자의 양변의 타입을 일치시키기 위해 형변환이 필요하다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MyFunction f = (Myfunction)(() -&gt; &#123;&#125;);</span><br></pre></td></tr></table></figure><p>람다식은 MyFunction 인터페이스를 직접 구현하지 않았지만, 이 인터페이스를 구현한 클래스의 객체와 완전히 동일하기 때문에 위처럼 형변환을 허용한다. 그리고 이 형변환은 생략가능하다.</p><p>람다식은 이름이 없을 뿐 객체인데도, Object 타입으로 형변환 할 수 없다. 람다식은 오직 함수형 인터페이스로만 형변환이 가능하다.</p><p>일반적인 익명 객체라면, 객체의 타입이 <strong>‘외부클래스이름$번호’</strong>와 같은 형식으로 타입이 결정되었을 텐데, 람다식의 타입은 <strong>‘외부클래스이름$$Lambda$번호’</strong>와 같은 형식으로 되어 있다.</p><p><strong>외부 변수를 참조하는 람다식</strong><br>람다식도 익명 객체, 즉 익명 클래스의 인스턴스이므로 람다식에서 외부에 선언된 변수에 접근하는 규칙은 익명 클래스와 동일하다.</p><p>람다식 내에서 참조하는 지역변수는 final이 붙지 않았어도 상수로 간주한다.(인스턴스 변수는 변경 가능) 람다식 내에서 지역변수를 참조하면 람다식 내에서나 다른 어느 곳에서도 이 변수의 값을 변경할 수 없다.</p><h2 id="javautilfunction-패키지"><a href="#java-util-function-패키지" class="headerlink" title="java.util.function 패키지"></a>java.util.function 패키지</h2><p>java.util.function 패키지에 일반적으로 자주 쓰이는 형식의 메서드를 함수형 인터페이스로 미리 정의해 놓았다. 매번 새로운 함수형 인터페이스를 정의하지 말고, 가능하면 이 패키지의 인터페이스를 활용하는 것이 좋다.</p><p>그래야 함수형 인터페이스에 정의된 메서드 이름도 통일되고, 재사용성이나 유지보수 측면에서도 좋다. 자주 쓰이는 가장 기본적인 함수형 인터페이스는 다음과 같다.</p><ul><li>java.lang.Runnable<ul><li>메서드 : void run()</li><li>매개변수도 없고, 반환값도 없음.</li></ul></li><li>Supplier&lt;T&gt;<ul><li>메서드 : T get()</li><li>매개변수는 없고, 반환값만 있음.</li></ul></li><li>Consumer&lt;T&gt;<ul><li>메서드 : void accept(T t)</li><li>Supplier와 반대로 매개변수만 있고, 반환값이 없음</li></ul></li><li>Function&lt;T, R&gt;<ul><li>메서드 : R apply(T t)</li><li>일반적인 함수, 하나의 매개변수를 받아서 결과를 반환</li></ul></li><li>Predicate&lt;T&gt;<ul><li>메서드 : boolean test(T t)</li><li>조건식을 표현하는데 사용됨.</li></ul></li></ul><blockquote><p>타입 문자 ‘T’는 ‘Type’을, ‘R’은 ‘Return Type’을 의미한다.</p><p>인터페이스 이름 앞에 접두사 ‘Bi’가 붙으면 매개변수가 두 개인 함수형 인터페이스이다.</p><p>3개 이상의 매개변수를 갖는 함수형 인터페이스를 선언한다면 직접 만들어서 서야한다.</p></blockquote><p>컬렉션 프레임웍의 인터페이스에 디폴트 메서드가 추가되었다.</p><ul><li>Collection<ul><li>boolean removeIf(Predicate&lt;E&gt; filter)<br>: 조건에 맞는 요소를 삭제</li></ul></li><li>List<ul><li>void replaceAll(UnaryOperator&lt;E&gt; operator)<br>: 모든 요소를 변환하여 대체</li></ul></li><li>Iterable<ul><li>void forEach(Consumer&lt;T&gt; action)<br>: 모든 요소에 작업 action을 수행</li></ul></li><li>Map<ul><li>V compute(K key, BiFunction&lt;K,V,V&gt; f)<br>: 지정된 키의 값에 작업 f를 수행</li><li>V computeIfAbsent(K key, BiFunction&lt;K,V&gt; f)<br>: 키가 없으면, 작업 f 수행 후 추가</li><li>V computeIfPresentt(K key, BiFunction&lt;K,V,V&gt; f)<br>: 지정된 키가 있을 때, 작업 f 수행</li><li>V merge(K key, V value, BiFunction&lt;V,V,V&gt; f)<br>: 모든 요소에 병합작업 f를 수행</li><li>void forEach(BiConsumer&lt;K,V&gt; action)<br>: 모든 요소에 작업 action을 수행</li><li>void replaceAll(BiFunction&lt;K,V,V&gt; f)<br>: 모든 요소에 치환작업 f를 수행</li></ul></li></ul><p>래퍼클래스를 사용하는 것은 비효율적이다. 그래서 보다 효율적으로 처리할 수 있도록 기본형을 사용하는 함수형 인터페이스들이 제공된다.</p><ul><li>DoubleToIntfunction : AToBFunction은 입력이 A타입 출력이 B타입</li><li>ToIntFunction&lt;T&gt; : ToBFunction은 출력이 B타입이다. 입력은 generic 타입</li><li>intFunction&lt;R&gt; : AFunction은 입력이 A타입이고 출력은 generic 타입</li><li>ObjintConsumer&lt;T&gt; : ObjAFunction은 입력이 T, A타입이고 출력은 없다.</li></ul><h2 id="function의-합성과-predicate의-결합"><a href="#Function의-합성과-Predicate의-결합" class="headerlink" title="Function의 합성과 Predicate의 결합"></a>Function의 합성과 Predicate의 결합</h2><p>java.util.function 패키지의 함수형 인터페이스에는 추상형메서드 외에도 디폴트 메서드와 static 메서드가 정의되어 있다.</p><p><strong>Function의 합성</strong><br>함수 f, g가 있을 때, <strong>f.andThen(g)</strong>는 함수 f를 먼저 적용하고, 그 다음에 함수 g를 적용한다. 그리고 <strong>f.compose(g)</strong>는 반대로 g를 먼저 적용하고 f를 적용한다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Function&lt;String, Integer&gt; f = (s) -&gt; Integer.parseInt(s, <span class="number">16</span>);</span><br><span class="line">Function&lt;Integer, String&gt; g = (i) -&gt; Integer.toBinaryString(i);</span><br><span class="line">Function&lt;String, String&gt; h = f.andThen(g);</span><br><span class="line">Function&lt;Integer, Integer&gt; i = f.compose(g);</span><br></pre></td></tr></table></figure><p><strong>Predicate의 결합</strong><br>여러 조건식을 논리 연산자로 연결해서 하나의 식을 구성할 수 있는 것처럼, 여러 Predicate를 and(), or(), negate()로 연결해서 하나의 새로운 Predicate를 결합할 수 있다.</p><h2 id="메서드-참조"><a href="#메서드-참조" class="headerlink" title="메서드 참조"></a>메서드 참조</h2><p>람다식을 더욱 간결하게 표현할 수 있는 방법이 있다. 람다식이 하나의 메서드만 호출하는 경우에는 <code>메서드 참조</code>라는 방법으로 람다식을 간략히 할 수 있다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// 변환 전</span></span><br><span class="line">Function&lt;String, Integer&gt; f = (String s) -&gt; Integer.parseInt(s);</span><br><span class="line"></span><br><span class="line"><span class="comment">/// 변환 후</span></span><br><span class="line">Function&lt;String, Integer&gt; f = Integer::parseInt;</span><br></pre></td></tr></table></figure><blockquote><p>하나의 메서드만 호출하는 람다식은 ‘클래스이름::메서드이름’ 또는 ‘참조변수::메서드이름’</p><p>으로 바꿀 수 있다.</p></blockquote><p>메서드 참조는 람다식을 마치 static 변수처럼 다룰 수 있게 해준다. 메서드 참조는 코드를 간략히 하는데 유용해서 많이 사용된다.</p><h1 id="스트림stream"><a href="#스트림-stream" class="headerlink" title="스트림(stream)"></a>스트림(stream)</h1><h2 id="스트림이란"><a href="#스트림이란" class="headerlink" title="스트림이란?"></a>스트림이란?</h2><p><strong><code>스트림</code>은 데이터 소스를 추상화하고, 데이터를 다루는데 자주 사용되는 메서드들을 정의해 놓았다. 데이터 소스를 추상화했다는 것은, 데이터 소스가 무엇이던 간에 같은 방식으로 다룰 수 있게 되었다는 것과 코드의 재사용성이 높아진다는 것을 의미한다.</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">String[] strArr = &#123;<span class="string">"aaa"</span>, <span class="string">"bbb"</span>, <span class="string">"ccc"</span>&#125;;</span><br><span class="line">List&lt;String&gt; strList = Arrays.asList(strArr);</span><br><span class="line"></span><br><span class="line">stream&lt;String&gt; strStream1 = strList.stream();</span><br><span class="line">stream&lt;String&gt; strStream2 = Arrays.stream(strArr);</span><br><span class="line"></span><br><span class="line">strStream1.sorted().forEach(System.out::println);</span><br><span class="line">strStream2.sorted().forEach(System.out::println);</span><br></pre></td></tr></table></figure><p><strong>스트림은 데이터 소스를 변경하지 않는다.</strong><br>스트림은 데이터 소스로부터 데이터를 읽기만할 뿐, 데이터 소스를 변경하지 않는다. 필요하다면, 결과를 컬렉션이나 배열에 담아서 반환할 수도 있다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; sortedList = strStream2.sorted().collect(Collectors.toList());</span><br></pre></td></tr></table></figure><p><strong>스트림은 일회용이다.</strong><br>스트림은 Iterator처럼 일회용이다. 한번 사용하면 닫혀서 다시 사용할 수 없다. 필요하다면 스트림을 다시 생성해야 한다.</p><p><strong>스트림은 작업을 내부 반복으로 처리한다.</strong><br>내부 반복이라는 것은 반복문을 메서드의 내부에 숨길 수 있다는 것을 의미한다. forEach()는 스트림에 정의된 메서드 중의 하나로 매개변수에 대입된 람다식을 데이터 소스의 모든 요소에 적용한다. (forEach()는 메서드 안에 for문을 넣어버린 것이다.)</p><p><strong>스트림의 연산</strong><br>스트림이 제공하는 다양한 연산을 이용해서 복잡한 작업들을 간단히 처리할 수 있다.</p><ul><li>중간 연산 : 연산 결과가 스트림인 연산. 스트림에 연속해서 중간 연산을 할 수 있음</li><li>최종 연산 : 연산 결과가 스트림이 아닌 연산. 스트림의 요소를 소모하므로 단 한번만 가능</li></ul><p><strong>지연된 연산</strong><br>스트림 연산에서 한 가지 중요한 점은 최종 연산이 수행되기 전까지는 중간 연산이 수행되지 않는다는 것이다. 중간 연산을 호출하는 것은 단지 어떤 작업이 수행되어야하는지를 지정해주는 것일 뿐이다. 최종 연산이 수행되어야 비로소 스트림의 요소들이 중간 연산을 거쳐 최종 연산에서 소모된다.</p><p><strong>병렬 스트림</strong><br>스트림으로 데이터를 다룰 때의 장점 중 하나가 병렬 처리가 쉽다는 것이다. 병렬 스트림은 내부적으로 fork&amp;join을 이용해서 자동적으로 연산을 병렬로 수행한다. 모든 스트림은 기본적으로 병렬 스트림이 아니므로 병렬 스트림을 사용하려면 parallelStream() 메서드를 사용해 병렬 스트림으로 전환해야 한다.</p><h2 id="스트림-만들기"><a href="#스트림-만들기" class="headerlink" title="스트림 만들기"></a>스트림 만들기</h2><p>스트림의 소스가 될 수 있는 대상은 배열, 컬렉션, 임의의 수 등 다양하다.</p><p><strong>컬렉션</strong><br>컬렉션의 최고 조상인 Collection에 stream()이 정의되어 있다. 그래서 Collection의 자손인 List와 Set을 구현한 컬렉션 클래스들은 모두 이 메서드로 스트림을 생성할 수 있다. stream()은 해당 컬렉션을 소스로 하는 스트림을 반환한다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;T&gt; Collection.stream()</span><br></pre></td></tr></table></figure><p><strong>배열</strong><br>배열을 소스로 하는 스트림을 생성하는 메서드는 다음과 같이 Stream과 Arrays에 static 메서드로 정의되어 있다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;T&gt; Stream.of(T... values)</span><br><span class="line">Stream&lt;T&gt; Stream.of(T[])</span><br><span class="line">Stream&lt;T&gt; Arrays.stream(T[])</span><br><span class="line">Stream&lt;T&gt; Arrays.stream(T[] array, <span class="keyword">int</span> startInclusive, <span class="keyword">int</span> endExclusive)</span><br></pre></td></tr></table></figure><p>그리고 int, long, double과 같은 기본형 배열을 소스로 하는 스트림을 생성하는 메서드도 있다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">IntStream IntStream.of(<span class="keyword">int</span> ...values) <span class="comment">// 가변인자</span></span><br><span class="line">IntStream IntStream.of(<span class="keyword">int</span>[])</span><br><span class="line">IntStream Arrays.stream(<span class="keyword">int</span>[])</span><br><span class="line">IntStream Arrays.stream(<span class="keyword">int</span>[] array, <span class="keyword">int</span> startInclusive, <span class="keyword">int</span> endExclusive)</span><br></pre></td></tr></table></figure><p><strong>특정 범위의 정수</strong><br>IntStream과 LongStream은 지정된 범위의 연속된 정수를 스트림으로 생성해서 반환하는 range()와 rangeClosed()를 가지고 있다.</p><p><strong>임의의 수</strong><br>난수를 생성하는데 사용하는 Random 클래스에는 해당 타입의 난수들로 이루어지는 스트림을 반환하는 인스턴스 메서드들이 포함되어 있다.</p><h2 id="스트림의-중간연산"><a href="#스트림의-중간연산" class="headerlink" title="스트림의 중간연산"></a>스트림의 중간연산</h2><p><strong>스트림 자르기 - skip(), limit()</strong><br>skip()과 limit()은 스트림의 일부를 잘라낼 때 사용한다.</p><p><strong>스트림의 요소 걸러내기 - filter(), distinct()</strong><br>distinct()는 스트림에서 중복된 요소들을 제거하고, filter()는 주어진 조건(Predicate)에 맞지 않는 요소를 걸러낸다.</p><p><strong>정렬 - sorted()</strong><br>스트림을 정렬할 때는 sorted()를 사용하면 된다.</p><p>sorted()는 지정된 Comparator로 스트림을 정렬하는데, Comparator대신 int값을 반환하는 람다식을 사용하는 것도 가능하다. Comparator를 지정하지 않으면 스트림 요소의 기본 정렬 기준(Comparable)으로 정렬한다. 단, 스트림의 요소가 Comparable을 구현한 클래스가 아니면 예외가 발생한다.</p><p>JDK 1.8부터 Comparator 인터페이스에 static 메서드와 디폴트 메서드가 많이 추가되었는데, 이 메서드들을 이용하면 정렬이 쉬워진다. 이 메서드들은 모두 Comparator&lt;T&gt;를 반환한다.</p><p><strong>변환 - map()</strong><br>스트림의 요소에 저장된 값 중에서 원하는 필드만 뽑아내거나 특정 형태로 변환해야 할 때가 있다. 이 때 사용하는 것이 바로 map()이다. 이 메서드의 선언부는 아래와 같으며, 매개변수로 T타입을 R타입으로 변환해서 반환하는 함수를 지정해야한다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Stream&lt;R&gt; <span class="title">map</span><span class="params">(Function&lt;? <span class="keyword">super</span> T,? extends R&gt; mapper)</span></span></span><br></pre></td></tr></table></figure><p><strong>조회 - peek()</strong><br>연산과 연산 사이에 올바르게 처리되었는지 확인하고 싶다면, peek()를 사용한다. forEach()와 달리 스트림의 요소를 소모하지 않으므로 연산 사이에 여러 번 끼워 넣어도 문제가 되지 않는다.</p><p>filter()나 map()의 결과를 확인할 때 유용하게 사용될 수 있다.</p><p><strong>mapToInt(), mapToLong(), mapToDouble()</strong><br>map()은 연산의 결과로 Stream&lt;T&gt; 타입의 스트림을 반환하는데, 스트림의 요소를 숫자로 변환하는 경우 IntStream과 같은 기본형 스트림으로 변환하는 것이 더 유용할 수 있다.</p><p>count()만 지원하는 Stream&lt;T&gt;와 달리 IntStream과 같은 기본형 스트림은 아래와 같이 숫자를 다루는데 편리한 메서드들을 제공한다.</p><ul><li>Int sum() : 스트림의 모든 요소의 총합</li><li>OptionalDouble average() : sum() / (double)count()</li><li>OptionalInt max() : 스트림의 요소 중 제일 큰 값</li><li>OptionalInt min() : 스트림의 요소 중 제일 작은 값</li></ul><p>위의 메서드들은 최종연산이기 때문에 호출 후 스트림이 닫힌다는 점을 주의해야 한다.</p><p>sum()과 average()를 모두 호출해야할 때, 스트림을 또 생성해야하므로 불편하다. 그래서 summaryStatistics()라는 메서드가 따로 제공된다.</p><p>반대로 IntStream을 Stream&lt;T&gt;로 변환할 때는 mapToObj()를, Stream&lt;Integer&gt;로 변환할 때는 boxed()를 사용한다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">IntStream intStream = <span class="keyword">new</span> Random().ints(<span class="number">1</span>, <span class="number">46</span>); <span class="comment">// 1~45 사이의 정수</span></span><br><span class="line">Stream&lt;String&gt; lottoStream = intStream.distinct().limit(<span class="number">6</span>).sorted().mapToObj(i -&gt; i + <span class="string">","</span>);</span><br><span class="line">lottoStream.forEach(System.out::print);</span><br></pre></td></tr></table></figure><p><strong>flatMap() - Stream&lt;T[]&gt;를 Stream&lt;T&gt;로 변환</strong><br>스트림의 요소가 배열이거나 map()의 연산결과가 배열인 경우, 즉 스트림의 타입이 Stream&lt;T[]&gt;인 경우, Stream&lt;T&gt;로 다루는 것이 더 편리할 때가 있다. 그럴 때는 map()대신 flatMap()을 사용하면 된다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;String[]&gt; strArrStrm = Stream.of(</span><br><span class="line"><span class="keyword">new</span> String[]&#123;<span class="string">"abc"</span>, <span class="string">"def"</span>, <span class="string">"ghi"</span>&#125;,</span><br><span class="line">    <span class="keyword">new</span> String[]&#123;<span class="string">"ABC"</span>, <span class="string">"GHI"</span>, <span class="string">"JKLMN"</span>&#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;String&gt; strStrm = strArrStrm.flatMap(Arrays::stream);</span><br></pre></td></tr></table></figure><p>요소의 타입이 Stream&lt;String&gt;인 스트림(Stream&lt;Stream&lt;String&gt;&gt;)이 있을때, 이 스트림을 Stream&lt;T&gt;으로 변환하려면 다음과 같이 map()과 flatMap()을 함께 사용해야 한다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;String&gt; strStream = strStrm</span><br><span class="line">.map(s -&gt; s.toArray(String[]::<span class="keyword">new</span>)) <span class="comment">// Stream&lt;Stream&lt;String&gt;&gt; -&gt; Stream&lt;String[]&gt;</span></span><br><span class="line">.flatMap(Arrays::stream); <span class="comment">// Stream&lt;String[]&gt; -&gt; Stream&lt;String&gt;</span></span><br></pre></td></tr></table></figure><p>toArray()는 스트림을 배열로 변환해서 반환한다. 매개변수를 지정하지 않으면 Object[]을 반환하므로 특정 타입의 생성자를 지정해줘야 한다. 위에서는 String배열의 생성자(String[]::new)를 지정하였다.</p><h2 id="optionallttgt와-optionalint"><a href="#Optional-lt-T-gt-와-OptionalInt" class="headerlink" title="Optional&lt;T&gt;와 OptionalInt"></a>Optional&lt;T&gt;와 OptionalInt</h2><p>최종 연산의 결과 타입이 Optional인 경우가 있다. <code>Optional&lt;T&gt;</code>은 지네릭 클래스로 ‘T타입의 객체’를 감싸는 래퍼 클래스이다. 그래서 Optional타입의 객체에는 모든 타입의 참조변수를 담을 수 있다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Optional</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> T value; <span class="comment">// T타입의 참조변수</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>최종 연산의 결과를 그냥 반환하는게 아니라 Optional 객체에 담아서 반환한다. 이처럼 객체에 담아서 반환을 하면, 반환된 결과가 null인지 매번 if문으로 체크하는 대신 Optional에 정의된 메서드를 통해서 간단히 처리할 수 있다.</p><blockquote><p>Objects클래스에 isNull(), nonNull(), requireNonNull()과 같은 메서드가 있는 것도 널 체크를 위한 if문을 메서드 안으로 넣어서 코드의 복잡도를 낮추기 위한 것이다.</p></blockquote><p><strong>Optional 객체 생성하기</strong><br>Optional 객체를 생성할 때는 of() 또는 ofNullable()을 사용한다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String str = <span class="string">"abc"</span>;</span><br><span class="line">Optional&lt;String&gt; optVal = Optional.of(str);</span><br></pre></td></tr></table></figure><p>만일 참조변수의 값이 null일 가능성이 있으면, of()대신 ofNullable()을 사용해야 한다. of()는 매개변수의 값이 null이면 NullPointerException을 발생하기 때문이다.</p><p>Optional&lt;T&gt;타입의 참조변수를 기본값으로 초기화 할 때는 empty()를 사용한다. null로 초기화하는 것이 가능하지만, empty()로 초기화하는 것이 바람직하다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Optional&lt;String&gt; optVal = <span class="keyword">null</span>; <span class="comment">// null로 초기화</span></span><br><span class="line">Optional&lt;String&gt; optVal = Optional.&lt;String&gt;empty(); <span class="comment">// 빈 객체로 초기화</span></span><br></pre></td></tr></table></figure><p><strong>Optional 객체의 값 가져오기</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Optional&lt;String&gt; optVal = Optional.of(<span class="string">"abc"</span>);</span><br><span class="line">String str1 = optVal.get(); <span class="comment">// optVal에 저장된 값을 반환. null이면 예외 발생</span></span><br><span class="line">String str2 = optVal.orElse(<span class="string">""</span>); <span class="comment">// optVal에 저장된 값이 null일 때는, ""을 반환</span></span><br></pre></td></tr></table></figure></p><p><strong>orElse()</strong>의 변형으로 null을 대체할 값을 반환하는 람다식을 지정할 수 있는 <strong>orElseGet()</strong>과 null일 때 지정된 예외를 발생시키는 <strong>orElseThrow()</strong>가 있다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String str3 = optVal2.orElseGet(String::<span class="keyword">new</span>); <span class="comment">// () -&gt; new String()과 동일</span></span><br><span class="line">String str4 = optVal2.orElseThrow(NullPointerException::<span class="keyword">new</span>); <span class="comment">// null이면 예외 발생</span></span><br></pre></td></tr></table></figure><p><strong>Stream처럼 Optional 객체에도 filter()와 map(), 그리고 flatMap()을 사용할 수 있다.</strong></p><p><strong>isPresent()</strong>는 Optional 객체의 값이 null이면 false를, 아니면 true를 반환한다. <strong>ifPresent()</strong>은 값이 있으면 주어진 람다식을 실행하고 , 없으면 아무 일도 하지 않는다. ifPresent()는 Optional&lt;T&gt;를 반환하는 findAny()나 findFirst()와 같은 최종 연산과 잘 어울린다.</p><h2 id="스트림의-최종-연산"><a href="#스트림의-최종-연산" class="headerlink" title="스트림의 최종 연산"></a>스트림의 최종 연산</h2><p>최종 연산은 스트림의 요소를 소모해서 결과를 만들어낸다. 그래서 <strong>최종 연산후에는 스트림이 닫히게 되고 더 이상 사용할 수 없다. 최종 연산의 결과는 스트림 요소의 합과 같은 단일 값이거나, 스트림의 요소가 담긴 배열 또는 컬렉션일 수 있다.</strong></p><p><strong>forEach()</strong><br>반환 타입이 void이므로 스트림의 요소를 출력하는 용도로 많이 사용된다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">forEach</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> T&gt; action)</span></span></span><br></pre></td></tr></table></figure><p><strong>조건 검사 - allMatch(), anyMatch(), noneMatch(), findFirst(), findAny()</strong><br>스트림의 요소에 대해 지정된 조건에 모든 요소가 일치하는지, 일부가 일치하는지 아니면 어떤 요소도 일치하지 않는지 확인하는데 사용할 수 있는 메서드들이다. 이 메서드들은 모두 매개변수로 Predicate를 요구하며, 연산결과로 boolean을 반환한다.</p><p><strong>통계 - count(), sum(), average(), max(), min()</strong><br>IntStream과 같은 기본형 스트림에는 스트림의 요소들에 대한 통계 정보를 얻을 수 있는 메서드들이 있다. 대부분의 경우 위의 메서드를 사용하기보다 기본형 스트림으로 변환하거나 reduce()와 collect()를 사용해 통계 정보를 얻는다.</p><p><strong>리듀싱 - reduce()</strong><br>스트림의 요소를 줄여나가면서 연산을 수행하고 최종결과를 반환한다. 처음 두 요소를 가지고 연산한 결과를 가지고 그 다음 요소와 연산한다. 그래서 매개변수의 타입이 BinaryOperator&lt;T&gt;인 것이다. 이 과정에서 스트림의 요소를 하나씩 소모하게 되며, 스트림의 모든 요소를 소모하게 되면 그 결과를 반환한다.</p><p>최종 연산 count()와 sum()  등은 내부적으로 모두 reduce()를 이용해서 작성되어 있다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> count = intStream.reduce(<span class="number">0</span>, (a,b) -&gt; a + <span class="number">1</span>); <span class="comment">// count()</span></span><br><span class="line"><span class="keyword">int</span> sum = intStream.reduce(<span class="number">0</span>, (a,b) -&gt; a + b); <span class="comment">// sum()</span></span><br><span class="line"><span class="keyword">int</span> max = intStream.reduce(Integer.MIN_VALUE, (a,b) -&gt; a&gt;b ? a:b); <span class="comment">// max()</span></span><br><span class="line"><span class="keyword">int</span> min = intStream.reduce(Integer.MAX_VALUE, (a,b) -&gt; a&lt;b ? a:b); <span class="comment">// min()</span></span><br></pre></td></tr></table></figure><h2 id="collect"><a href="#Collect" class="headerlink" title="Collect()"></a>Collect()</h2><p><strong><code>collect()</code>는 스트림의 요소를 수집하는 최종 연산으로 리듀싱(reducing)과 유사하다. </strong>collect()가 스트림의 요소를 수집하려면, 어떻게 수집할 것인가에 대한 방법이 정의되어 있어야 하는데, 이 방법을 정의한 것이 바로 컬렉터(collector)이다.</p><p>컬렉터는 Collector 인터페이스를 구현한 것으로, 직접 구현할 수도 있고 미리 작성된 것을 사용할 수도 있다. Collectors 클래스는 미리 작성된 다양한 종류의 컬렉터를 반환하는 static 메서드를 갖고 있다.</p><ul><li>collect() : 스트림의 최종연산, 매개변수로 컬렉터를 필요로 한다.</li><li>Collector : 인터페이스, 컬렉터는 이 인터페이스를 구현해야 한다.</li><li>Collectors : 클래스, static 메서드로 미리 작성된 컬렉터를 제공한다.</li></ul><p><strong>스트림을 컬렉션과 배열로 변환 - toList(), toSet(), toMap(), toCollection(), toArray()</strong><br>List나 Set이 아닌 특정 컬렉션을 지정하려면, toCollection()에 해당 컬렉션의 생성자 참조를 매개변수로 넣어주면 된다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; names = stuStream.map(Student::getName)</span><br><span class="line">    .collect(Collectors.toList());</span><br><span class="line">ArrayList&lt;String&gt; list = names.stream()</span><br><span class="line">    .collect(Collectors.toCollection(ArrayList::<span class="keyword">new</span>));</span><br></pre></td></tr></table></figure><p>Map은 키와 값의 쌍으로 저장해야하므로 객체의 어떤 필드를 키로 사용할지와 값으로 사용할지를 지정해줘야 한다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String, Person&gt; map = personStream.collect(Collectors.toMap(p-&gt;p.getRegId(), p-&gt;p));</span><br></pre></td></tr></table></figure><p>스트림에 저장된 요소들을 ‘T[]’ 타입의 배열로 변환하려면, toArray()를 사용하면 된다. 단, 해당 타입의 생성자 참조를 매개변수로 지정해줘야 한다. 만일 매개변수를 지정하지 않으면 반환되는 배열의 타입은 ‘Object[]’이다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Student[] stuNames = studentStream.toArray(Student[]::<span class="keyword">new</span>); <span class="comment">// OK</span></span><br><span class="line">Student[] stuNames = studentStream.toArray(); <span class="comment">// 에러</span></span><br><span class="line">Object[] stuNames = studentStream.toArray(); <span class="comment">// OK</span></span><br></pre></td></tr></table></figure><p><strong>통계 - countint(), summingInt(), averagingInt(), maxBy(), minBy()</strong><br>최종 연산들이 제공하는 통계 정보를 collect()로 똑같이 얻을 수 있다.</p><p><strong>리듀싱 - reducing()</strong><br>리듀싱 역시 collect()로 가능하다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">IntStream intStream = <span class="keyword">new</span> Random().ints(<span class="number">1</span>, <span class="number">46</span>).distinct().limit(<span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">OptionalInt max = intStream.reduce(Integer::max);</span><br><span class="line">Optional&lt;Integer&gt; max = intStream.boxed().collect(reducing(Integer::max));</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> sum = intStream.reduce(<span class="number">0</span>, (a, b) -&gt; a + b);</span><br><span class="line"><span class="keyword">long</span> sum = intStream.boxed().collect(reducing(<span class="number">0</span>, (a, b) -&gt; a + b));</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> grandTotal = stuStream.map(Student::getTotalScore).reduce(<span class="number">0</span>, Integer::sum);</span><br><span class="line"><span class="keyword">int</span> grandTotal = stuStream.collect(reducing(<span class="number">0</span>, Student::getTotalScore, Integer::sum));</span><br></pre></td></tr></table></figure><p><strong>문자열 결합 - joining()</strong><br>문자열 스트림의 모든 요소를 하나의 문자열로 연결해서 반환한다. 구분자를 지정해줄 수도 있고, 접두사와 접미사도 가능하다. 스트림의 요소가 String이나 StringBuffer처럼 CharSequence의 자손인 경우에만 결합이 가능하므로 스트림의 요소가 문자열이 아닌 경우에는 먼저 map()을 이용해서 스트림의 요소를 문자열로 변환해야 한다.</p><p>만일 map()없이 스트림에 바로 joining()하면, 스트림의 요소에 toString()을 호출한 결과를 결합한다.</p><p><strong>그룹화와 분할 - groupingBy, partitioningBy()</strong><br>그룹화는 스트림의 요소를 특정 기준으로 그룹화하는 것을 의미하고, 분할은 스트림의 요소를 두 가지, 지정된 조건에 일치하는 그룹과 일치하지 않는 그룹으로의 분할을 의미한다. 스트림을 두 개의 그룹으로 나눠야 한다면, partitioningBy()로 분할하는 것이 더 빠르다. 그 외에는 groupingBy()를 쓰면 된다. 그룹화와 분할의 결과는 Map에 반환된다.</p><h1 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h1><ul><li><a href="http://www.kyobobook.co.kr/product/detailViewKor.laf?barcode=9788995379431" target="_blank" rel="noopener">Java의 정석 - 2</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;해당 포스팅의 내용은 &lt;a href=&quot;http://www.kyobobook.co.kr/product/detailViewKor.laf?barcode=9788995379431&quot; target=&quot;_blank&quot; rel
      
    
    </summary>
    
      <category term="Programming" scheme="https://jongmin92.github.io/categories/Programming/"/>
    
      <category term="Java" scheme="https://jongmin92.github.io/categories/Programming/Java/"/>
    
    
      <category term="Java" scheme="https://jongmin92.github.io/tags/Java/"/>
    
      <category term="Lambda" scheme="https://jongmin92.github.io/tags/Lambda/"/>
    
      <category term="Stream" scheme="https://jongmin92.github.io/tags/Stream/"/>
    
  </entry>
  
</feed>
